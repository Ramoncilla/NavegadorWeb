/* The following code was generated by JFlex 1.4.3 on 3/6/18 12:23 AM */

/* ------------------------==: CODIGO DE USUARIO :==--------------------------*/

package proyecto1_201122872.AnalizadorCSS;
    

import java_cup.runtime.Symbol;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/6/18 12:23 AM from the specification file
 * <tt>ScannerCSS.jflex</tt>
 */
public class scannerCSS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\52\1\7\1\0\2\52\22\0\1\52\1\0\1\4\4\0"+
    "\1\0\1\44\1\45\1\6\1\51\1\50\1\40\1\2\1\5\12\1"+
    "\1\46\1\47\1\0\1\43\3\0\1\17\1\34\1\27\1\11\1\22"+
    "\1\25\1\12\1\31\1\10\1\36\1\3\1\20\1\26\1\21\1\16"+
    "\1\15\1\35\1\13\1\30\1\23\1\14\1\33\1\3\1\24\1\37"+
    "\1\32\1\41\1\0\1\42\1\0\1\3\1\0\1\17\1\34\1\27"+
    "\1\11\1\22\1\25\1\12\1\31\1\10\1\36\1\3\1\20\1\26"+
    "\1\21\1\16\1\15\1\35\1\13\1\30\1\23\1\14\1\33\1\3"+
    "\1\24\1\37\1\32\66\0\1\3\21\0\1\3\u1f54\0\1\3\udfe7\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\17\3\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\0\1\3\1\0\1\21\1\22"+
    "\1\0\1\23\30\3\1\2\2\0\31\3\1\24\10\3"+
    "\1\25\22\3\1\26\3\3\1\27\2\3\1\30\2\3"+
    "\1\31\11\3\1\32\3\3\1\33\3\3\1\34\15\3"+
    "\1\35\3\3\1\36\3\3\1\37\4\3\1\40\4\3"+
    "\1\41\1\42\4\3\1\0\1\43\1\3\1\44\1\3"+
    "\1\45\2\3\1\46\1\47\1\50\1\51\4\3\1\52"+
    "\3\3\1\53\3\3\1\54\1\3\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\53\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\53"+
    "\0\53\0\53\0\53\0\53\0\53\0\53\0\53\0\53"+
    "\0\53\0\u03b2\0\u03dd\0\254\0\53\0\u0408\0\u0433\0\201"+
    "\0\u045e\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b"+
    "\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b"+
    "\0\u03b2\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\53\0\u0cef\0\u0d1a\0\u0d45"+
    "\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\201\0\u0e47\0\u0e72"+
    "\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca"+
    "\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122"+
    "\0\201\0\u114d\0\u1178\0\u11a3\0\201\0\u11ce\0\u11f9\0\201"+
    "\0\u1224\0\u124f\0\201\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\201\0\u13fd\0\u1428\0\u1453"+
    "\0\201\0\u147e\0\u14a9\0\u14d4\0\201\0\u14ff\0\u152a\0\u1555"+
    "\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad"+
    "\0\u16d8\0\u1703\0\201\0\u172e\0\u1759\0\u1784\0\201\0\u17af"+
    "\0\u17da\0\u1805\0\201\0\u1830\0\u185b\0\u1886\0\u18b1\0\201"+
    "\0\u18dc\0\u1907\0\u1932\0\u195d\0\201\0\201\0\u1988\0\u19b3"+
    "\0\u19de\0\u1a09\0\u1a34\0\201\0\u1a5f\0\201\0\u1a8a\0\201"+
    "\0\u1ab5\0\u1ae0\0\201\0\201\0\201\0\53\0\u1b0b\0\u1b36"+
    "\0\u1b61\0\u1b8c\0\201\0\u1bb7\0\u1be2\0\u1c0d\0\201\0\u1c38"+
    "\0\u1c63\0\u1c8e\0\201\0\u1cb9\0\201";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\3\4\1\14\1\15\1\16\1\17"+
    "\1\4\1\20\1\4\1\21\1\22\1\23\1\4\1\24"+
    "\1\4\1\25\1\26\1\4\1\27\1\4\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\10\54\0\1\3\1\42\51\0\1\43\1\0\1\4"+
    "\4\0\30\4\13\0\4\44\1\45\46\44\5\0\1\46"+
    "\1\47\53\0\1\10\42\0\1\10\1\0\1\43\1\0"+
    "\1\4\4\0\1\4\1\50\20\4\1\51\5\4\14\0"+
    "\1\43\1\0\1\4\4\0\12\4\1\52\15\4\14\0"+
    "\1\43\1\0\1\4\4\0\3\4\1\53\24\4\14\0"+
    "\1\43\1\0\1\4\4\0\5\4\1\54\22\4\14\0"+
    "\1\43\1\0\1\4\4\0\4\4\1\55\3\4\1\56"+
    "\17\4\14\0\1\43\1\0\1\4\4\0\12\4\1\57"+
    "\15\4\14\0\1\43\1\0\1\4\4\0\12\4\1\60"+
    "\15\4\14\0\1\43\1\0\1\4\4\0\3\4\1\61"+
    "\3\4\1\62\2\4\1\63\15\4\14\0\1\43\1\0"+
    "\1\4\4\0\6\4\1\64\1\65\20\4\14\0\1\43"+
    "\1\0\1\4\4\0\1\66\6\4\1\67\20\4\14\0"+
    "\1\43\1\0\1\4\4\0\4\4\1\70\1\4\1\71"+
    "\1\72\2\4\1\73\15\4\14\0\1\43\1\0\1\4"+
    "\4\0\6\4\1\74\21\4\14\0\1\43\1\0\1\4"+
    "\4\0\1\75\11\4\1\76\15\4\14\0\1\43\1\0"+
    "\1\4\4\0\6\4\1\77\21\4\14\0\1\43\1\0"+
    "\1\4\4\0\4\4\1\100\23\4\14\0\1\101\52\0"+
    "\1\43\1\102\1\4\4\0\30\4\13\0\7\46\1\0"+
    "\43\46\6\47\1\103\44\47\1\0\1\43\1\0\1\4"+
    "\4\0\25\4\1\104\2\4\14\0\1\43\1\0\1\4"+
    "\4\0\3\4\1\105\24\4\14\0\1\43\1\0\1\4"+
    "\4\0\4\4\1\106\23\4\14\0\1\43\1\0\1\4"+
    "\4\0\7\4\1\107\20\4\14\0\1\43\1\0\1\4"+
    "\4\0\13\4\1\110\14\4\14\0\1\43\1\0\1\4"+
    "\4\0\1\111\27\4\14\0\1\43\1\0\1\4\4\0"+
    "\13\4\1\112\14\4\14\0\1\43\1\0\1\4\4\0"+
    "\2\4\1\113\25\4\14\0\1\43\1\0\1\4\4\0"+
    "\4\4\1\114\23\4\14\0\1\43\1\0\1\4\4\0"+
    "\16\4\1\115\11\4\14\0\1\43\1\0\1\4\4\0"+
    "\14\4\1\116\13\4\14\0\1\43\1\0\1\4\4\0"+
    "\3\4\1\117\5\4\1\120\16\4\14\0\1\43\1\0"+
    "\1\4\4\0\10\4\1\121\17\4\14\0\1\43\1\0"+
    "\1\4\4\0\11\4\1\122\16\4\14\0\1\43\1\0"+
    "\1\4\4\0\27\4\1\123\14\0\1\43\1\0\1\4"+
    "\4\0\3\4\1\124\24\4\14\0\1\43\1\0\1\4"+
    "\4\0\10\4\1\125\17\4\14\0\1\43\1\0\1\4"+
    "\4\0\5\4\1\126\22\4\14\0\1\43\1\0\1\4"+
    "\4\0\11\4\1\127\16\4\14\0\1\43\1\0\1\4"+
    "\4\0\3\4\1\130\24\4\14\0\1\43\1\0\1\4"+
    "\4\0\20\4\1\131\7\4\14\0\1\43\1\0\1\4"+
    "\4\0\3\4\1\132\24\4\14\0\1\43\1\0\1\4"+
    "\4\0\3\4\1\133\24\4\14\0\1\43\1\0\1\4"+
    "\4\0\20\4\1\134\7\4\14\0\1\4\51\0\5\47"+
    "\1\135\1\103\44\47\1\0\1\43\1\0\1\4\4\0"+
    "\4\4\1\136\23\4\14\0\1\43\1\0\1\4\4\0"+
    "\12\4\1\137\15\4\14\0\1\43\1\0\1\4\4\0"+
    "\5\4\1\140\22\4\14\0\1\43\1\0\1\4\4\0"+
    "\25\4\1\141\2\4\14\0\1\43\1\0\1\4\4\0"+
    "\6\4\1\142\21\4\14\0\1\43\1\0\1\4\4\0"+
    "\11\4\1\143\16\4\14\0\1\43\1\0\1\4\4\0"+
    "\3\4\1\144\24\4\14\0\1\43\1\0\1\4\4\0"+
    "\3\4\1\145\24\4\14\0\1\43\1\0\1\4\4\0"+
    "\12\4\1\146\15\4\14\0\1\43\1\0\1\4\4\0"+
    "\13\4\1\147\14\4\14\0\1\43\1\0\1\4\4\0"+
    "\13\4\1\150\14\4\14\0\1\43\1\0\1\4\4\0"+
    "\16\4\1\151\11\4\14\0\1\43\1\0\1\4\4\0"+
    "\1\4\1\152\26\4\14\0\1\43\1\0\1\4\4\0"+
    "\20\4\1\153\7\4\14\0\1\43\1\0\1\4\4\0"+
    "\4\4\1\154\23\4\14\0\1\43\1\0\1\4\4\0"+
    "\4\4\1\155\23\4\14\0\1\43\1\0\1\4\4\0"+
    "\20\4\1\156\7\4\14\0\1\43\1\0\1\4\4\0"+
    "\6\4\1\157\21\4\14\0\1\43\1\0\1\4\4\0"+
    "\1\160\27\4\14\0\1\43\1\0\1\4\4\0\13\4"+
    "\1\161\14\4\14\0\1\43\1\0\1\4\4\0\1\162"+
    "\27\4\14\0\1\43\1\0\1\4\4\0\1\163\27\4"+
    "\14\0\1\43\1\0\1\4\4\0\13\4\1\164\14\4"+
    "\14\0\1\43\1\0\1\4\4\0\1\4\1\165\26\4"+
    "\14\0\1\43\1\0\1\4\4\0\13\4\1\166\14\4"+
    "\14\0\1\43\1\0\1\4\4\0\1\167\27\4\14\0"+
    "\1\43\1\0\1\4\4\0\17\4\1\170\10\4\14\0"+
    "\1\43\1\0\1\4\4\0\6\4\1\171\21\4\14\0"+
    "\1\43\1\0\1\4\4\0\4\4\1\172\23\4\14\0"+
    "\1\43\1\0\1\4\4\0\3\4\1\173\24\4\14\0"+
    "\1\43\1\0\1\4\4\0\12\4\1\174\15\4\14\0"+
    "\1\43\1\0\1\4\4\0\7\4\1\175\20\4\14\0"+
    "\1\43\1\0\1\4\4\0\1\176\27\4\14\0\1\43"+
    "\1\0\1\4\4\0\12\4\1\177\15\4\14\0\1\43"+
    "\1\0\1\4\4\0\6\4\1\200\21\4\14\0\1\43"+
    "\1\0\1\4\4\0\7\4\1\201\20\4\14\0\1\43"+
    "\1\0\1\4\4\0\6\4\1\202\21\4\14\0\1\43"+
    "\1\0\1\4\4\0\12\4\1\203\15\4\14\0\1\43"+
    "\1\0\1\4\4\0\20\4\1\204\7\4\14\0\1\43"+
    "\1\0\1\4\4\0\20\4\1\205\7\4\14\0\1\43"+
    "\1\0\1\4\4\0\1\206\27\4\14\0\1\43\1\0"+
    "\1\4\4\0\3\4\1\207\24\4\14\0\1\43\1\0"+
    "\1\4\4\0\13\4\1\210\14\4\14\0\1\43\1\0"+
    "\1\4\4\0\3\4\1\211\24\4\14\0\1\43\1\0"+
    "\1\4\4\0\22\4\1\212\5\4\14\0\1\43\1\0"+
    "\1\4\4\0\24\4\1\213\3\4\14\0\1\43\1\0"+
    "\1\4\4\0\1\214\27\4\14\0\1\43\1\0\1\4"+
    "\4\0\12\4\1\215\15\4\14\0\1\43\1\0\1\4"+
    "\4\0\1\216\27\4\14\0\1\43\1\0\1\4\4\0"+
    "\12\4\1\217\15\4\14\0\1\43\1\0\1\4\4\0"+
    "\21\4\1\220\6\4\14\0\1\43\1\0\1\4\4\0"+
    "\12\4\1\221\15\4\14\0\1\43\1\0\1\4\4\0"+
    "\12\4\1\222\15\4\14\0\1\43\1\0\1\4\4\0"+
    "\7\4\1\223\20\4\14\0\1\43\1\0\1\4\4\0"+
    "\10\4\1\224\17\4\14\0\1\43\1\0\1\4\4\0"+
    "\14\4\1\225\13\4\14\0\1\43\1\0\1\4\4\0"+
    "\13\4\1\226\14\4\14\0\1\43\1\0\1\4\4\0"+
    "\12\4\1\227\15\4\14\0\1\43\1\0\1\4\4\0"+
    "\17\4\1\230\10\4\14\0\1\43\1\0\1\4\4\0"+
    "\17\4\1\231\10\4\14\0\1\43\1\0\1\4\4\0"+
    "\23\4\1\232\4\4\14\0\1\43\1\0\1\4\4\0"+
    "\13\4\1\233\14\4\14\0\1\43\1\0\1\4\4\0"+
    "\7\4\1\234\20\4\14\0\1\43\1\0\1\4\4\0"+
    "\7\4\1\235\20\4\14\0\1\43\1\0\1\4\4\0"+
    "\6\4\1\236\21\4\14\0\1\43\1\0\1\4\4\0"+
    "\10\4\1\237\17\4\14\0\1\43\1\0\1\4\4\0"+
    "\17\4\1\240\10\4\14\0\1\43\1\0\1\4\4\0"+
    "\15\4\1\241\12\4\14\0\1\43\1\0\1\4\4\0"+
    "\3\4\1\242\24\4\14\0\1\43\1\0\1\4\4\0"+
    "\7\4\1\243\20\4\14\0\1\43\1\0\1\4\4\0"+
    "\1\4\1\244\26\4\14\0\1\43\1\0\1\4\4\0"+
    "\1\4\1\245\26\4\14\0\1\43\1\0\1\4\4\0"+
    "\10\4\1\246\17\4\14\0\1\43\1\0\1\4\4\0"+
    "\6\4\1\247\21\4\14\0\1\43\1\0\1\4\4\0"+
    "\10\4\1\250\17\4\14\0\1\43\1\0\1\4\4\0"+
    "\4\4\1\251\23\4\14\0\1\43\1\0\1\4\4\0"+
    "\4\4\1\252\23\4\14\0\1\43\1\0\1\4\4\0"+
    "\7\4\1\253\20\4\14\0\1\43\1\0\1\4\4\0"+
    "\12\4\1\254\15\4\14\0\1\43\1\0\1\4\4\0"+
    "\10\4\1\255\17\4\14\0\1\43\1\0\1\4\4\0"+
    "\1\4\1\256\26\4\14\0\1\43\1\0\1\4\4\0"+
    "\11\4\1\257\16\4\14\0\1\43\1\0\1\4\4\0"+
    "\12\4\1\260\15\4\14\0\1\43\1\0\1\4\4\0"+
    "\7\4\1\261\20\4\14\0\1\43\1\0\1\4\4\0"+
    "\1\262\27\4\14\0\1\43\1\0\1\4\4\0\1\4"+
    "\1\263\26\4\14\0\1\43\1\0\1\4\4\0\1\264"+
    "\27\4\14\0\1\43\1\0\1\4\4\0\6\4\1\265"+
    "\21\4\14\0\1\43\1\0\1\4\4\0\7\4\1\266"+
    "\20\4\14\0\1\43\1\0\1\4\4\0\12\4\1\267"+
    "\15\4\14\0\1\43\1\0\1\4\4\0\10\4\1\270"+
    "\17\4\14\0\1\43\1\0\1\4\4\0\10\4\1\271"+
    "\17\4\14\0\1\43\1\0\1\4\4\0\14\4\1\272"+
    "\13\4\14\0\1\43\1\0\1\4\4\0\30\4\1\273"+
    "\13\0\1\43\1\0\1\4\4\0\6\4\1\274\21\4"+
    "\14\0\1\43\1\0\1\4\4\0\13\4\1\275\14\4"+
    "\14\0\1\43\1\0\1\4\4\0\10\4\1\276\17\4"+
    "\14\0\1\43\1\0\1\4\4\0\17\4\1\277\10\4"+
    "\14\0\1\43\1\0\1\4\4\0\7\4\1\300\20\4"+
    "\14\0\1\43\1\0\1\4\4\0\16\4\1\301\11\4"+
    "\14\0\1\43\1\0\1\4\4\0\16\4\1\302\11\4"+
    "\14\0\1\43\1\0\1\4\4\0\7\4\1\303\20\4"+
    "\14\0\1\43\1\0\1\4\4\0\7\4\1\304\20\4"+
    "\14\0\1\43\1\0\1\4\4\0\13\4\1\305\14\4"+
    "\36\0\1\306\30\0\1\43\1\0\1\4\4\0\7\4"+
    "\1\307\20\4\14\0\1\43\1\0\1\4\4\0\7\4"+
    "\1\310\20\4\14\0\1\43\1\0\1\4\4\0\12\4"+
    "\1\311\15\4\14\0\1\43\1\0\1\4\4\0\12\4"+
    "\1\312\15\4\14\0\1\43\1\0\1\4\4\0\10\4"+
    "\1\313\17\4\14\0\1\43\1\0\1\4\4\0\1\4"+
    "\1\314\26\4\14\0\1\43\1\0\1\4\4\0\11\4"+
    "\1\315\16\4\14\0\1\43\1\0\1\4\4\0\11\4"+
    "\1\316\16\4\14\0\1\43\1\0\1\4\4\0\6\4"+
    "\1\317\21\4\14\0\1\43\1\0\1\4\4\0\20\4"+
    "\1\320\7\4\14\0\1\43\1\0\1\4\4\0\13\4"+
    "\1\321\14\4\14\0\1\43\1\0\1\4\4\0\1\322"+
    "\27\4\14\0\1\43\1\0\1\4\4\0\6\4\1\323"+
    "\21\4\14\0\1\43\1\0\1\4\4\0\6\4\1\324"+
    "\21\4\14\0\1\43\1\0\1\4\4\0\11\4\1\325"+
    "\16\4\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7396];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\20\1\12\11\1\0\1\1"+
    "\1\0\1\11\1\1\1\0\32\1\2\0\31\1\1\11"+
    "\135\1\1\0\12\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public static String cadena;

/* ------------------------==: METODO DE ERROR LEXICO :==---------------------*/
    private void ErrorScan(int linea, int columna, String valor) {
        System.out.println("Error Lexico Iden: " + valor + ", " + linea + ", " + columna);
        cadena += "<tr>"
                + "<td><center><b>" + valor + "</b></center></td>"
                + "<td><center><b>" + linea + "</b></center></td>"
                + "<td><center><b>" + columna + "</b></center></td>"
                + "</tr>";
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerCSS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scannerCSS(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          { System.out.println("cursiva");   return new Symbol (simbolosCSS.cursiva, yyline+1,yychar+1, new String (yytext()));
          }
        case 46: break;
        case 30: 
          { System.out.println("formato");   return new Symbol (simbolosCSS.formato, yyline+1,yychar+1, new String (yytext()));
          }
        case 47: break;
        case 43: 
          { System.out.println("justificado");   return new Symbol (simbolosCSS.justificado, yyline+1,yychar+1, new String (yytext()));
          }
        case 48: break;
        case 33: 
          { System.out.println("alineado");   return new Symbol (simbolosCSS.alineado, yyline+1,yychar+1, new String (yytext()));
          }
        case 49: break;
        case 35: 
          { System.out.println("centrado");   return new Symbol (simbolosCSS.centrado, yyline+1,yychar+1, new String (yytext()));
          }
        case 50: break;
        case 7: 
          { System.out.println("menos");   return new Symbol (simbolosCSS.menos, yyline+1,yychar+1, new String (yytext()));
          }
        case 51: break;
        case 37: 
          { System.out.println("izquierda");   return new Symbol (simbolosCSS.izquierda, yyline+1,yychar+1, new String (yytext()));
          }
        case 52: break;
        case 4: 
          { System.out.println("division");   return new Symbol (simbolosCSS.division, yyline+1,yychar+1, new String (yytext()));
          }
        case 53: break;
        case 22: 
          { System.out.println("grupo");   return new Symbol (simbolosCSS.grupo, yyline+1,yychar+1, new String (yytext()));
          }
        case 54: break;
        case 18: 
          { System.out.println("Coment simple");   /* se ignora*/
          }
        case 55: break;
        case 44: 
          { System.out.println("fondoelemento");   return new Symbol (simbolosCSS.fondoelemento, yyline+1,yychar+1, new String (yytext()));
          }
        case 56: break;
        case 20: 
          { System.out.println("Coment Multi");   /* se ignora*/
          }
        case 57: break;
        case 1: 
          { ErrorScan(yyline,yychar,yytext());
          }
        case 58: break;
        case 38: 
          { System.out.println("minuscula");   return new Symbol (simbolosCSS.minuscula, yyline+1,yychar+1, new String (yytext()));
          }
        case 59: break;
        case 14: 
          { System.out.println("puntoComa");   return new Symbol (simbolosCSS.puntoComa, yyline+1,yychar+1, new String (yytext()));
          }
        case 60: break;
        case 36: 
          { System.out.println("vertical");   return new Symbol (simbolosCSS.vertical, yyline+1,yychar+1, new String (yytext()));
          }
        case 61: break;
        case 23: 
          { System.out.println("letra");   return new Symbol (simbolosCSS.letra, yyline+1,yychar+1, new String (yytext()));
          }
        case 62: break;
        case 21: 
          { System.out.println("falso");               return new Symbol (simbolosCSS.booleano, yyline+1,yychar+1, new String (yytext()));
          }
        case 63: break;
        case 28: 
          { System.out.println("tamtex");   return new Symbol (simbolosCSS.tamtex, yyline+1,yychar+1, new String (yytext()));
          }
        case 64: break;
        case 42: 
          { System.out.println("horizontal");   return new Symbol (simbolosCSS.horizontal, yyline+1,yychar+1, new String (yytext()));
          }
        case 65: break;
        case 41: 
          { System.out.println("capitalT");   return new Symbol (simbolosCSS.capitalT, yyline+1,yychar+1, new String (yytext()));
          }
        case 66: break;
        case 19: 
          { System.out.println("id");   return new Symbol (simbolosCSS.idTerminal, yyline+1,yychar+1, new String (yytext()));
          }
        case 67: break;
        case 9: 
          { System.out.println("cierraCor");   return new Symbol (simbolosCSS.corCierra, yyline+1,yychar+1, new String (yytext()));
          }
        case 68: break;
        case 10: 
          { System.out.println("igual");   return new Symbol (simbolosCSS.igual, yyline+1,yychar+1, new String (yytext()));
          }
        case 69: break;
        case 26: 
          { System.out.println("borde");   return new Symbol (simbolosCSS.borde, yyline+1,yychar+1, new String (yytext()));
          }
        case 70: break;
        case 12: 
          { System.out.println("cierraPar");   return new Symbol (simbolosCSS.cierraPar, yyline+1,yychar+1, new String (yytext()));
          }
        case 71: break;
        case 24: 
          { System.out.println("texto");   return new Symbol (simbolosCSS.texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 72: break;
        case 39: 
          { System.out.println("mayuscula");   return new Symbol (simbolosCSS.mayuscula, yyline+1,yychar+1, new String (yytext()));
          }
        case 73: break;
        case 13: 
          { System.out.println("dosPuntos");   return new Symbol (simbolosCSS.dosPuntos, yyline+1,yychar+1, new String (yytext()));
          }
        case 74: break;
        case 2: 
          { System.out.println(yytext());                return new Symbol (simbolosCSS.numero, yyline+1,yychar+1, new String (yytext()));
          }
        case 75: break;
        case 5: 
          { System.out.println("multiplicacion");   return new Symbol (simbolosCSS.multiplicacion, yyline+1,yychar+1, new String (yytext()));
          }
        case 76: break;
        case 17: 
          { System.out.println(yytext());                return new Symbol (simbolosCSS.cadena, yyline+1,yychar+1, new String (yytext()));
          }
        case 77: break;
        case 27: 
          { System.out.println("opaque");   return new Symbol (simbolosCSS.opaque, yyline+1,yychar+1, new String (yytext()));
          }
        case 78: break;
        case 40: 
          { System.out.println("colortext");   return new Symbol (simbolosCSS.colortext, yyline+1,yychar+1, new String (yytext()));
          }
        case 79: break;
        case 32: 
          { System.out.println("visible");   return new Symbol (simbolosCSS.visible, yyline+1,yychar+1, new String (yytext()));
          }
        case 80: break;
        case 45: 
          { System.out.println("autoredimension");   return new Symbol (simbolosCSS.autoredimension, yyline+1,yychar+1, new String (yytext()));
          }
        case 81: break;
        case 25: 
          { System.out.println("verdadero");               return new Symbol (simbolosCSS.booleano, yyline+1,yychar+1, new String (yytext()));
          }
        case 82: break;
        case 11: 
          { System.out.println("abrePAr");   return new Symbol (simbolosCSS.abrePar, yyline+1,yychar+1, new String (yytext()));
          }
        case 83: break;
        case 8: 
          { System.out.println("abreCor");   return new Symbol (simbolosCSS.corAbre, yyline+1,yychar+1, new String (yytext()));
          }
        case 84: break;
        case 6: 
          { /* Se ignoran */
          }
        case 85: break;
        case 3: 
          { System.out.println(yytext());                return new Symbol (simbolosCSS.id, yyline+1,yychar+1, new String (yytext()));
          }
        case 86: break;
        case 34: 
          { System.out.println("negrilla");   return new Symbol (simbolosCSS.negrilla, yyline+1,yychar+1, new String (yytext()));
          }
        case 87: break;
        case 16: 
          { System.out.println("mas");   return new Symbol (simbolosCSS.mas, yyline+1,yychar+1, new String (yytext()));
          }
        case 88: break;
        case 29: 
          { System.out.println("derecha");   return new Symbol (simbolosCSS.derecha, yyline+1,yychar+1, new String (yytext()));
          }
        case 89: break;
        case 15: 
          { System.out.println("coma");   return new Symbol (simbolosCSS.coma, yyline+1,yychar+1, new String (yytext()));
          }
        case 90: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolosCSS.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
