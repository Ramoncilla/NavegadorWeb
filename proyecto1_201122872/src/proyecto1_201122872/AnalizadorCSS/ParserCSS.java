
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Mar 08 15:06:22 CST 2018
//----------------------------------------------------

package proyecto1_201122872.AnalizadorCSS;

import CJS.ARBOL.EXPRESION.Aritmetica;
import CJS.ARBOL.EXPRESION.Booleano;
import CJS.ARBOL.EXPRESION.Cadena;
import CJS.ARBOL.EXPRESION.Numero;
import proyecto1_201122872.AnalizadorCSS.simbolosCSS;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;
import bCSS.*;
import proyecto1_201122872.CHTML.ElemetoPropiedad.propiedad;

/** CUP v0.10k generated parser.
  * @version Thu Mar 08 15:06:22 CST 2018
  */
public class ParserCSS extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserCSS() {super();}

  /** Constructor which sets the default scanner. */
  public ParserCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\004\000\002\005\006\000\002\006\004" +
    "\000\002\006\003\000\002\007\003\000\002\007\003\000" +
    "\002\010\010\000\002\011\010\000\002\012\003\000\002" +
    "\012\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\014\007\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\015\007\000\002\016\007\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\005\000\002\031\003\000\002" +
    "\017\007\000\002\020\007\000\002\021\007\000\002\022" +
    "\013\000\002\032\003\000\002\032\003\000\002\023\007" +
    "\000\002\024\015\000\002\025\007\000\002\026\007\000" +
    "\002\033\005\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\004\054\006\001\002\000\006\002\000\054" +
    "\006\001\002\000\004\002\200\001\002\000\004\034\010" +
    "\001\002\000\006\002\uffff\054\uffff\001\002\000\006\004" +
    "\011\005\014\001\002\000\004\037\173\001\002\000\010" +
    "\004\ufff9\005\ufff9\035\ufff9\001\002\000\010\004\ufffb\005" +
    "\ufffb\035\ufffb\001\002\000\004\037\021\001\002\000\010" +
    "\004\ufffa\005\ufffa\035\ufffa\001\002\000\010\004\011\005" +
    "\014\035\017\001\002\000\006\002\ufffd\054\ufffd\001\002" +
    "\000\010\004\ufffc\005\ufffc\035\ufffc\001\002\000\004\054" +
    "\022\001\002\000\004\040\023\001\002\000\004\042\024" +
    "\001\002\000\030\006\042\007\026\010\036\011\043\012" +
    "\034\013\025\014\044\015\041\020\027\021\054\022\035" +
    "\001\002\000\004\041\167\001\002\000\004\041\163\001" +
    "\002\000\004\041\157\001\002\000\036\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\015\ufff1\020\ufff1\021\ufff1\022\ufff1\035\ufff1\001\002" +
    "\000\036\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\020\uffea\021\uffea" +
    "\022\uffea\035\uffea\001\002\000\036\004\ufff8\005\ufff8\006" +
    "\042\007\026\010\036\011\043\012\034\013\025\014\044" +
    "\015\041\020\027\021\054\022\035\035\ufff8\001\002\000" +
    "\036\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\020\uffef\021\uffef\022" +
    "\uffef\035\uffef\001\002\000\004\041\152\001\002\000\004" +
    "\041\146\001\002\000\004\041\132\001\002\000\036\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\014\ufff2\015\ufff2\020\ufff2\021\ufff2\022\ufff2\035" +
    "\ufff2\001\002\000\036\004\uffec\005\uffec\006\uffec\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\020" +
    "\uffec\021\uffec\022\uffec\035\uffec\001\002\000\004\041\120" +
    "\001\002\000\004\041\110\001\002\000\004\041\104\001" +
    "\002\000\004\041\100\001\002\000\036\004\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\020\ufff4\021\ufff4\022\ufff4\035\ufff4\001\002" +
    "\000\036\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\020\ufff6\021\ufff6" +
    "\022\ufff6\035\ufff6\001\002\000\036\004\ufff3\005\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\015\ufff3\020\ufff3\021\ufff3\022\ufff3\035\ufff3\001\002\000" +
    "\036\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\020\uffed\021\uffed\022" +
    "\uffed\035\uffed\001\002\000\036\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\035\ufff0\001\002\000\036" +
    "\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\014\uffeb\015\uffeb\020\uffeb\021\uffeb\022\uffeb" +
    "\035\uffeb\001\002\000\036\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\020\uffee\021\uffee\022\uffee\035\uffee\001\002\000\004\041" +
    "\055\001\002\000\004\036\056\001\002\000\004\034\057" +
    "\001\002\000\010\052\062\053\060\055\061\001\002\000" +
    "\020\035\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\001\002\000\020\035\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\047\uffd0\001\002\000\020\035\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\001" +
    "\002\000\014\043\070\044\065\045\066\046\067\047\071" +
    "\001\002\000\010\052\062\053\060\055\061\001\002\000" +
    "\010\052\uffcd\053\uffcd\055\uffcd\001\002\000\010\052\uffcc" +
    "\053\uffcc\055\uffcc\001\002\000\010\052\uffcb\053\uffcb\055" +
    "\uffcb\001\002\000\010\052\062\053\060\055\061\001\002" +
    "\000\010\052\uffca\053\uffca\055\uffca\001\002\000\014\043" +
    "\073\044\065\045\066\046\067\047\071\001\002\000\010" +
    "\052\062\053\060\055\061\001\002\000\014\035\075\044" +
    "\065\045\066\046\067\047\071\001\002\000\004\042\076" +
    "\001\002\000\036\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\035\uffd4\001\002\000\020\035\uffd1\042" +
    "\uffd1\043\uffd1\044\065\045\066\046\067\047\071\001\002" +
    "\000\004\036\101\001\002\000\010\052\062\053\060\055" +
    "\061\001\002\000\014\042\103\044\065\045\066\046\067" +
    "\047\071\001\002\000\036\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\035\uffd9\001\002\000\004\036" +
    "\105\001\002\000\010\052\062\053\060\055\061\001\002" +
    "\000\014\042\107\044\065\045\066\046\067\047\071\001" +
    "\002\000\036\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\035\uffdb\001\002\000\004\036\111\001\002" +
    "\000\012\023\113\024\112\025\116\026\114\001\002\000" +
    "\004\042\uffe7\001\002\000\004\042\uffe8\001\002\000\004" +
    "\042\uffe5\001\002\000\004\042\117\001\002\000\004\042" +
    "\uffe6\001\002\000\036\004\uffe9\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\035\uffe9\001\002\000\004\036\121" +
    "\001\002\000\004\034\122\001\002\000\010\052\062\053" +
    "\060\055\061\001\002\000\014\043\124\044\065\045\066" +
    "\046\067\047\071\001\002\000\006\016\126\017\127\001" +
    "\002\000\004\035\130\001\002\000\004\035\uffd7\001\002" +
    "\000\004\035\uffd6\001\002\000\004\042\131\001\002\000" +
    "\036\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\013\uffd8\014\uffd8\015\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\035\uffd8\001\002\000\004\036\133\001\002\000\014" +
    "\027\134\030\135\031\136\032\137\033\142\001\002\000" +
    "\006\042\uffe2\043\uffe2\001\002\000\006\042\uffe1\043\uffe1" +
    "\001\002\000\006\042\uffdf\043\uffdf\001\002\000\006\042" +
    "\uffe0\043\uffe0\001\002\000\006\042\uffdc\043\uffdc\001\002" +
    "\000\006\042\144\043\143\001\002\000\006\042\uffde\043" +
    "\uffde\001\002\000\014\027\134\030\135\031\136\032\137" +
    "\033\142\001\002\000\036\004\uffe3\005\uffe3\006\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\035\uffe3\001\002\000\006\042" +
    "\uffdd\043\uffdd\001\002\000\004\036\147\001\002\000\004" +
    "\055\150\001\002\000\004\042\151\001\002\000\036\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\020\uffd3\021\uffd3\022\uffd3\035" +
    "\uffd3\001\002\000\004\036\153\001\002\000\010\052\062" +
    "\053\060\055\061\001\002\000\014\042\155\044\065\045" +
    "\066\046\067\047\071\001\002\000\036\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\020\uffda\021\uffda\022\uffda\035\uffda\001\002" +
    "\000\036\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\035\ufff5\001\002\000\004\036\160\001\002\000" +
    "\010\052\062\053\060\055\061\001\002\000\014\042\162" +
    "\044\065\045\066\046\067\047\071\001\002\000\036\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\020\uffd5\021\uffd5\022\uffd5\035" +
    "\uffd5\001\002\000\004\036\164\001\002\000\010\052\062" +
    "\053\060\055\061\001\002\000\014\042\166\044\065\045" +
    "\066\046\067\047\071\001\002\000\036\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\020\uffe4\021\uffe4\022\uffe4\035\uffe4\001\002" +
    "\000\004\036\170\001\002\000\010\052\062\053\060\055" +
    "\061\001\002\000\014\042\172\044\065\045\066\046\067" +
    "\047\071\001\002\000\036\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\035\uffd2\001\002\000\004\054" +
    "\174\001\002\000\004\040\175\001\002\000\004\042\176" +
    "\001\002\000\030\006\042\007\026\010\036\011\043\012" +
    "\034\013\025\014\044\015\041\020\027\021\054\022\035" +
    "\001\002\000\036\004\ufff7\005\ufff7\006\042\007\026\010" +
    "\036\011\043\012\034\013\025\014\044\015\041\020\027" +
    "\021\054\022\035\035\ufff7\001\002\000\004\002\001\001" +
    "\002\000\006\002\ufffe\054\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\010\003\004\004\003\005\006\001\001\000" +
    "\004\005\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\015\007\012\010\014\011" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\007" +
    "\017\010\014\011\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\012\031\013\045\014\044\015\046\016\036" +
    "\017\027\020\050\021\032\022\052\023\047\024\037\025" +
    "\051\026\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\013\155\014\044\015\046\016\036\017\027\020\050" +
    "\021\032\022\052\023\047\024\037\025\051\026\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\063\001" +
    "\001\000\004\033\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\071\001\001\000" +
    "\002\001\001\000\004\034\063\001\001\000\004\033\073" +
    "\001\001\000\004\034\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\063\001\001\000\002\001\001" +
    "\000\004\033\101\001\001\000\004\034\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\105\001\001" +
    "\000\004\034\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\122\001\001\000\004\034\063\001\001\000" +
    "\004\032\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\137\031\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\030\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\153\001" +
    "\001\000\004\034\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\160\001\001\000" +
    "\004\034\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\164\001\001\000\004\034\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\170\001\001" +
    "\000\004\034\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\012\176" +
    "\013\045\014\044\015\046\016\036\017\027\020\050\021" +
    "\032\022\052\023\047\024\037\025\051\026\030\001\001" +
    "\000\032\013\155\014\044\015\046\016\036\017\027\020" +
    "\050\021\032\022\052\023\047\024\037\025\051\026\030" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
   public String cadena="";
   public ListaBloquesCss lBloques;

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCSS$actions {





  private final ParserCSS parser;

  /** Constructor */
  CUP$ParserCSS$actions(ParserCSS parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCSS$do_action(
    int                        CUP$ParserCSS$act_num,
    java_cup.runtime.lr_parser CUP$ParserCSS$parser,
    java.util.Stack            CUP$ParserCSS$stack,
    int                        CUP$ParserCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCSS$result;

      /* select the action based on the action number */
      switch (CUP$ParserCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SIMB_ARIT ::= division 
            {
              Object RESULT = null;
		RESULT="/";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(26/*SIMB_ARIT*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIMB_ARIT ::= multiplicacion 
            {
              Object RESULT = null;
		RESULT="*";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(26/*SIMB_ARIT*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIMB_ARIT ::= menos 
            {
              Object RESULT = null;
		RESULT="-";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(26/*SIMB_ARIT*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIMB_ARIT ::= mas 
            {
              Object RESULT = null;
		RESULT="+";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(26/*SIMB_ARIT*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= cadena 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT = new Cadena(a);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(25/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT = new Numero(a);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(25/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= booleano 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT = new Booleano(a);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(25/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= EXPRESION SIMB_ARIT EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT = new Aritmetica(a,b,c);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(25/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COLORTEXT ::= colortext dosPuntos igual EXPRESION puntoComa 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT = new Colortext(c);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(20/*COLORTEXT*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPAQUE ::= opaque dosPuntos igual booleano puntoComa 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT = new Opaque(c);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(19/*OPAQUE*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BORDE ::= borde dosPuntos igual corAbre EXPRESION coma EXPRESION coma EXPRESION corCierra puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).value;
		RESULT= new Borde(a,b,c);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(18/*BORDE*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-10)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VISIBLE ::= visible dosPuntos igual EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT= new Visible(a);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(17/*VISIBLE*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DIRECCION ::= vertical 
            {
              Object RESULT = null;
		RESULT="vertical";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(24/*DIRECCION*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DIRECCION ::= horizontal 
            {
              Object RESULT = null;
		RESULT="horizontal";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(24/*DIRECCION*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AUTOREDIMENSION ::= autoredimension dosPuntos igual corAbre EXPRESION coma DIRECCION corCierra puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).value;
		RESULT = new Autoredimension(a,b);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(16/*AUTOREDIMENSION*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-8)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FONDO_ELEMENTO ::= fondoelemento dosPuntos igual EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT= new Fondoelemento(a);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(15/*FONDO_ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TAMTEX ::= tamtex dosPuntos igual EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT= new Tamtex(a);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(14/*TAMTEX*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LETRA ::= letra dosPuntos igual EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT= new Letra(a);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(13/*LETRA*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // L_FORMATOS ::= VALOR_FORMATO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		
	List<String> lista = new ArrayList<>();
	lista.add(a.toString());
	RESULT= lista;
	
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(23/*L_FORMATOS*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L_FORMATOS ::= L_FORMATOS coma VALOR_FORMATO 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		
	List<String> lista = (ArrayList<String>)l;
	lista.add(a.toString());
	RESULT= lista;
	
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(23/*L_FORMATOS*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-2)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALOR_FORMATO ::= capitalT 
            {
              Object RESULT = null;
		RESULT= "capital-t";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(22/*VALOR_FORMATO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR_FORMATO ::= minuscula 
            {
              Object RESULT = null;
		RESULT= "minuscula";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(22/*VALOR_FORMATO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR_FORMATO ::= mayuscula 
            {
              Object RESULT = null;
		RESULT= "mayuscula";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(22/*VALOR_FORMATO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR_FORMATO ::= cursiva 
            {
              Object RESULT = null;
		RESULT= "cursiva";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(22/*VALOR_FORMATO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR_FORMATO ::= negrilla 
            {
              Object RESULT = null;
		RESULT= "negrilla";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(22/*VALOR_FORMATO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORMATO ::= formato dosPuntos igual L_FORMATOS puntoComa 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT= new Formato(l);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(12/*FORMATO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TEXTO ::= texto dosPuntos igual EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT = new Texto(a);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(11/*TEXTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR_ALINEADO ::= justificado 
            {
              Object RESULT = null;
		RESULT= "justificado";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(21/*VALOR_ALINEADO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR_ALINEADO ::= centrado 
            {
              Object RESULT = null;
		RESULT= "centrado";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(21/*VALOR_ALINEADO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR_ALINEADO ::= derecha 
            {
              Object RESULT = null;
		RESULT= "derecha";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(21/*VALOR_ALINEADO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VALOR_ALINEADO ::= izquierda 
            {
              Object RESULT = null;
		RESULT= "izquierda";
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(21/*VALOR_ALINEADO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ALINEADO ::= alineado dosPuntos igual VALOR_ALINEADO puntoComa 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT= new Alineado(c);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(10/*ALINEADO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-4)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ELEMENTO ::= COLORTEXT 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ELEMENTO ::= OPAQUE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTO ::= BORDE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTO ::= VISIBLE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ELEMENTO ::= AUTOREDIMENSION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ELEMENTO ::= FONDO_ELEMENTO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ELEMENTO ::= TAMTEX 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTO ::= LETRA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTO ::= FORMATO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ELEMENTO ::= TEXTO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ELEMENTO ::= ALINEADO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(9/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ELEMENTOS ::= ELEMENTOS ELEMENTO 
            {
              Object RESULT = null;
		int lileft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		
	List<propiedad> l = (ArrayList<propiedad>)li;
	l.add((propiedad)p); 
	RESULT=l;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(8/*ELEMENTOS*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELEMENTOS ::= ELEMENTO 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		List<propiedad> l = new ArrayList<>(); 
l.add((propiedad)p);
 RESULT=l;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(8/*ELEMENTOS*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ID ::= idTerminal abrePar id cierraPar puntoComa ELEMENTOS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT = new ID(a,b);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(7/*ID*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GRUPO ::= grupo abrePar id cierraPar puntoComa ELEMENTOS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT = new Grupo(a,b);
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(6/*GRUPO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-5)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ELEMENTO_CUERPO ::= ID 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT= a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(5/*ELEMENTO_CUERPO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ELEMENTO_CUERPO ::= GRUPO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		RESULT= a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(5/*ELEMENTO_CUERPO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LISTA_ELEMENTO_CUERPO ::= ELEMENTO_CUERPO 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		
	                   List<baseCss> lista = new ArrayList<>();
					   lista.add((baseCss)c);
					   RESULT= lista;
	
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(4/*LISTA_ELEMENTO_CUERPO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LISTA_ELEMENTO_CUERPO ::= LISTA_ELEMENTO_CUERPO ELEMENTO_CUERPO 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		
	                   List<baseCss> lista = (ArrayList<baseCss>)l;
					   lista.add((baseCss)c);
					   RESULT= lista;
	
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(4/*LISTA_ELEMENTO_CUERPO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= id corAbre LISTA_ELEMENTO_CUERPO corCierra 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT=a;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(3/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-3)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTA_CUERPOS ::= LISTA_CUERPOS CUERPO 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		ListaBloquesCss lista = (ListaBloquesCss)l;
                                                        lista.insertarLista((ArrayList<baseCss>)a);
														RESULT= lista;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(2/*LISTA_CUERPOS*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LISTA_CUERPOS ::= CUERPO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		ListaBloquesCss lista = new ListaBloquesCss();
                                                        lista.insertarLista((ArrayList<baseCss>)a);
														RESULT= lista;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(2/*LISTA_CUERPOS*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTA_CUERPOS 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).value;
		parser.lBloques=(ListaBloquesCss)c;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          return CUP$ParserCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).value;
		RESULT = start_val;
              CUP$ParserCSS$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-1)).left, ((java_cup.runtime.Symbol)CUP$ParserCSS$stack.elementAt(CUP$ParserCSS$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$ParserCSS$parser.done_parsing();
          return CUP$ParserCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

