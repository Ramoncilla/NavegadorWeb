
package proyecto1_201122872.AnalizadorCSS;

import proyecto1_201122872.AnalizadorCSS.simbolosCSS;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;
import bCSS.*;
import CJS.ARBOL.EXPRESION.Aritmetica;
import CJS.ARBOL.EXPRESION.Booleano;
import CJS.ARBOL.EXPRESION.Cadena;
import CJS.ARBOL.EXPRESION.Numero;
import Errores.ErrorS;
import proyecto1_201122872.CHTML.ElemetoPropiedad.propiedad;




parser code
{:
 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
   public String cadena="";
   public ListaBloquesCss lBloques;

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				ErrorS nuevo = new ErrorS(s.right,s.left,"Sintactico","El simbolo "+s.value+", no es valido");
paginaActual.erroresPagina.insertarError(nuevo);
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				ErrorS nuevo = new ErrorS(s.right,s.left,"Sintactico","El simbolo "+s.value+", no es valido");
paginaActual.erroresPagina.insertarError(nuevo);
}

:}


action code
{:


:}


/*-------- Terminales ---------------*/


terminal String idTerminal, grupo, alineado, texto, formato, letra, tamtex, colortext, fondoelemento, autoredimension, horizontal, vertical, visible, borde, opaque, izquierda, derecha, centrado, justificado, negrilla, cursiva, minuscula, mayuscula, capitalT,corAbre,corCierra, igual,abrePar,cierraPar,dosPuntos,puntoComa, coma,mas,menos,multiplicacion, division,verdadero,falso,cadena,numero,id,booleano;



non terminal INICIO, LISTA_CUERPOS,CUERPO,LISTA_ELEMENTO_CUERPO,ELEMENTO_CUERPO,GRUPO,ID,ELEMENTOS,ELEMENTO,ALINEADO,TEXTO,FORMATO,LETRA,TAMTEX,FONDO_ELEMENTO,AUTOREDIMENSION,VISIBLE,BORDE,OPAQUE,COLORTEXT,VALOR_ALINEADO, VALOR_FORMATO,L_FORMATOS,DIRECCION,EXPRESION,SIMB_ARIT;
	
	

		precedence left mas, menos;
        precedence left multiplicacion, division;
        
	
	start with INICIO;	



INICIO::= LISTA_CUERPOS:c {:parser.lBloques=(ListaBloquesCss)c;:}
|error;

LISTA_CUERPOS::= CUERPO:a{:ListaBloquesCss lista = new ListaBloquesCss();
                                                        lista.insertarLista((ArrayList<baseCss>)a);
														RESULT= lista;:}	
	|LISTA_CUERPOS:l CUERPO:a{:ListaBloquesCss lista = (ListaBloquesCss)l;
                                                        lista.insertarLista((ArrayList<baseCss>)a);
														RESULT= lista;:};

CUERPO::= id corAbre LISTA_ELEMENTO_CUERPO:a corCierra{:RESULT=a;:};

LISTA_ELEMENTO_CUERPO::= LISTA_ELEMENTO_CUERPO:l ELEMENTO_CUERPO:c{:
	                   List<baseCss> lista = (ArrayList<baseCss>)l;
					   lista.add((baseCss)c);
					   RESULT= lista;
	:}
	|ELEMENTO_CUERPO:c{:
	                   List<baseCss> lista = new ArrayList<>();
					   lista.add((baseCss)c);
					   RESULT= lista;
	:};

ELEMENTO_CUERPO::= GRUPO:a{:RESULT= a;:} 
	|ID:a{:RESULT= a;:};

GRUPO::= grupo abrePar id:a cierraPar puntoComa ELEMENTOS:b{:RESULT = new Grupo(a,b);:};

ID::= idTerminal abrePar id:a cierraPar puntoComa ELEMENTOS:b{:RESULT = new ID(a,b);:};


ELEMENTOS::= ELEMENTO:p {:List<propiedad> l = new ArrayList<>(); 
l.add((propiedad)p);
 RESULT=l;:}
	|ELEMENTOS:li ELEMENTO:p{:
	List<propiedad> l = (ArrayList<propiedad>)li;
	l.add((propiedad)p); 
	RESULT=l;:};
	
ELEMENTO::= ALINEADO:a{:RESULT=a;:}
	|TEXTO:a{:RESULT=a;:}
	|FORMATO:a{:RESULT=a;:}
	|LETRA:a{:RESULT=a;:}
	|TAMTEX:a{:RESULT=a;:}
	|FONDO_ELEMENTO:a{:RESULT=a;:}
	|AUTOREDIMENSION:a{:RESULT=a;:}
	|VISIBLE:a{:RESULT=a;:}
	|BORDE:a{:RESULT=a;:}
	|OPAQUE:a{:RESULT=a;:}
	|COLORTEXT:a{:RESULT=a;:};
	
ALINEADO::= alineado dosPuntos igual VALOR_ALINEADO:c puntoComa{:RESULT= new Alineado(c);:};

VALOR_ALINEADO::= izquierda{:RESULT= "izquierda";:}
	|derecha{:RESULT= "derecha";:}
	|centrado{:RESULT= "centrado";:}
	|justificado{:RESULT= "justificado";:};
	
TEXTO::= texto  dosPuntos igual EXPRESION:a puntoComa{:RESULT = new Texto(a);:};

FORMATO::= formato dosPuntos igual L_FORMATOS:l puntoComa{:RESULT= new Formato(l);:};


VALOR_FORMATO::= negrilla{:RESULT= "negrilla";:} 
	|cursiva{:RESULT= "cursiva";:} 
	|mayuscula{:RESULT= "mayuscula";:} 
	|minuscula{:RESULT= "minuscula";:} 
	|capitalT{:RESULT= "capital-t";:} ;
	
	
	
L_FORMATOS::= L_FORMATOS:l coma VALOR_FORMATO:a
{:
	List<String> lista = (ArrayList<String>)l;
	lista.add(a.toString());
	RESULT= lista;
	:}

	|VALOR_FORMATO:a{:
	List<String> lista = new ArrayList<>();
	lista.add(a.toString());
	RESULT= lista;
	:};
	

LETRA::= letra dosPuntos igual EXPRESION:a puntoComa{:RESULT= new Letra(a);:};

TAMTEX::= tamtex dosPuntos igual EXPRESION:a puntoComa{:RESULT= new Tamtex(a);:}; 

FONDO_ELEMENTO::= fondoelemento dosPuntos igual EXPRESION:a puntoComa{:RESULT= new Fondoelemento(a);:};

AUTOREDIMENSION::= autoredimension dosPuntos igual	corAbre EXPRESION:a coma DIRECCION:b corCierra puntoComa{:RESULT = new Autoredimension(a,b);:};

DIRECCION::= horizontal{:RESULT="horizontal";:}
	|vertical{:RESULT="vertical";:};
	
	
VISIBLE::= visible dosPuntos igual EXPRESION:a puntoComa{:RESULT= new Visible(a);:};

BORDE::= borde dosPuntos igual corAbre EXPRESION:a coma EXPRESION:b coma EXPRESION:c corCierra puntoComa{:RESULT= new Borde(a,b,c);:};

OPAQUE::= opaque dosPuntos igual booleano:c puntoComa{:RESULT = new Opaque(c);:};

COLORTEXT::= colortext dosPuntos igual EXPRESION:c puntoComa{:RESULT = new Colortext(c);:};

EXPRESION::= EXPRESION:a SIMB_ARIT:b EXPRESION:c{:RESULT = new Aritmetica(a,b,c);:}
	|booleano:a{:RESULT = new Booleano(a);:}
	|numero:a{:RESULT = new Numero(a);:}
	|cadena:a{:RESULT = new Cadena(a);:};
	
SIMB_ARIT ::= mas{:RESULT="+";:}
	|menos{:RESULT="-";:}
	| multiplicacion{:RESULT="*";:}
	| division{:RESULT="/";:};	

