/* The following code was generated by JFlex 1.4.3 on 2/16/18 9:56 PM */

/* ------------------------==: CODIGO DE USUARIO :==--------------------------*/

package proyecto1_201122872.AnalizadorCHTML;
    

import java_cup.runtime.Symbol;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/16/18 9:56 PM from the specification file
 * <tt>ScannerHTML.jflex</tt>
 */
public class scannerCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\3\1\0\2\42\22\0\1\42\1\0\1\2\4\0"+
    "\1\0\5\0\1\7\1\0\1\6\12\0\1\0\1\41\1\5\1\40"+
    "\1\10\2\0\1\22\1\23\1\11\1\25\1\21\1\16\1\34\1\12"+
    "\1\17\1\27\1\36\1\15\1\14\1\20\1\26\1\32\1\37\1\31"+
    "\1\4\1\13\1\30\1\35\1\0\1\33\1\0\1\24\4\0\1\1"+
    "\1\0\1\22\1\23\1\11\1\25\1\21\1\16\1\34\1\12\1\17"+
    "\1\27\1\36\1\15\1\14\1\20\1\26\1\32\1\37\1\31\1\4"+
    "\1\13\1\30\1\35\1\0\1\33\1\0\1\24\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\1\1\2\1\1\1\3\1\4\15\1\1\5\1\6"+
    "\1\1\1\0\5\1\1\7\3\1\1\10\11\1\1\11"+
    "\12\1\1\12\10\1\1\13\30\1\1\14\3\1\1\15"+
    "\13\1\1\16\5\1\1\17\5\1\1\0\1\1\1\20"+
    "\1\21\4\1\1\22\1\23\1\24\11\1\1\25\5\1"+
    "\1\26\1\27\2\1\1\30\1\31\1\32\2\1\1\0"+
    "\3\1\1\33\1\34\4\1\1\35\1\1\1\36\13\1"+
    "\1\37\2\1\1\40\2\1\1\41\1\1\1\42\1\0"+
    "\3\1\1\43\4\1\1\44\16\1\1\45\1\1\1\0"+
    "\1\46\1\47\2\1\1\50\1\1\1\51\15\1\1\52"+
    "\1\53\1\46\2\1\1\54\3\1\1\55\1\56\1\57"+
    "\3\1\1\60\1\1\1\61\1\62\1\1\1\63\2\1"+
    "\1\64\1\65\1\1\1\66\1\1\1\67\1\70\1\71"+
    "\1\72\1\1\1\73\5\1\1\74\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\43\0\322"+
    "\0\365\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea"+
    "\0\u020d\0\u0230\0\u0253\0\u0276\0\43\0\43\0\u0299\0\u02bc"+
    "\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b\0\43\0\u038e\0\u03b1"+
    "\0\u03d4\0\43\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6"+
    "\0\u04c9\0\u04ec\0\u050f\0\43\0\u0532\0\u0555\0\u0578\0\u059b"+
    "\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3"+
    "\0\u06d6\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\43"+
    "\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0"+
    "\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8"+
    "\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0"+
    "\0\43\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5"+
    "\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd"+
    "\0\43\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\43\0\u0dcf"+
    "\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\43\0\43"+
    "\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\43\0\43\0\u0f73"+
    "\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\u1068\0\u108b"+
    "\0\43\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a\0\43\0\43"+
    "\0\u115d\0\u1180\0\43\0\43\0\43\0\u11a3\0\u11c6\0\u11e9"+
    "\0\u120c\0\u122f\0\u1252\0\43\0\43\0\u1275\0\u1298\0\u12bb"+
    "\0\u12de\0\43\0\u1301\0\43\0\u1324\0\u1347\0\u136a\0\u138d"+
    "\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482\0\43"+
    "\0\u14a5\0\u14c8\0\43\0\u14eb\0\u150e\0\43\0\u1531\0\43"+
    "\0\u1554\0\u1577\0\u159a\0\u15bd\0\43\0\u15e0\0\u1603\0\u1626"+
    "\0\u1649\0\43\0\u166c\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b"+
    "\0\u173e\0\u1761\0\u1784\0\u17a7\0\u17ca\0\u17ed\0\u1810\0\u1833"+
    "\0\43\0\u1856\0\u1879\0\43\0\43\0\u189c\0\u18bf\0\43"+
    "\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991\0\u19b4\0\u19d7"+
    "\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u1aa9\0\u1acc\0\43"+
    "\0\43\0\u0690\0\u1aef\0\u1b12\0\43\0\u1b35\0\u1b58\0\u1b7b"+
    "\0\u1b9e\0\43\0\43\0\u1bc1\0\u1be4\0\u1c07\0\43\0\u1c2a"+
    "\0\43\0\43\0\u1c4d\0\43\0\u1c70\0\u1c93\0\43\0\43"+
    "\0\u1cb6\0\43\0\u1cd9\0\43\0\43\0\43\0\43\0\u1cfc"+
    "\0\43\0\u1d1f\0\u1d42\0\u1d65\0\u1d88\0\u1dab\0\43\0\43";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\2\2\1\7\1\10"+
    "\1\2\1\11\2\2\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\2\1\17\1\20\2\2\1\21\1\22\1\2"+
    "\1\23\1\24\2\2\1\25\1\26\1\27\3\2\1\0"+
    "\37\2\2\3\1\2\1\30\37\3\3\0\1\4\36\0"+
    "\1\4\3\2\1\0\16\2\1\31\7\2\1\32\13\2"+
    "\1\0\2\2\1\33\37\2\1\0\5\2\1\34\1\35"+
    "\1\36\1\2\1\37\3\2\1\40\1\41\1\42\3\2"+
    "\1\43\1\44\15\2\1\0\13\2\1\45\1\2\1\46"+
    "\1\47\23\2\1\0\13\2\1\50\6\2\1\51\17\2"+
    "\1\0\10\2\1\52\7\2\1\53\1\54\20\2\1\0"+
    "\14\2\1\55\25\2\1\0\11\2\1\56\2\2\1\57"+
    "\25\2\1\0\22\2\1\60\17\2\1\0\15\2\1\61"+
    "\24\2\1\0\26\2\1\62\13\2\1\0\24\2\1\63"+
    "\15\2\1\0\16\2\1\64\23\2\1\0\25\2\1\65"+
    "\14\2\1\0\16\2\1\66\23\2\1\4\36\2\1\27"+
    "\2\30\1\67\40\30\3\2\1\0\11\2\1\70\30\2"+
    "\1\0\13\2\1\71\26\2\1\0\2\2\1\72\37\2"+
    "\1\0\1\73\41\2\1\0\7\2\1\74\32\2\1\0"+
    "\13\2\1\75\26\2\1\0\14\2\1\76\25\2\1\0"+
    "\23\2\1\77\16\2\1\0\1\100\41\2\1\0\15\2"+
    "\1\101\24\2\1\0\7\2\1\102\32\2\1\0\27\2"+
    "\1\103\12\2\1\0\17\2\1\104\22\2\1\0\11\2"+
    "\1\105\2\2\1\106\25\2\1\0\14\2\1\107\25\2"+
    "\1\0\16\2\1\110\23\2\1\0\33\2\1\111\6\2"+
    "\1\0\5\2\1\112\3\2\1\113\30\2\1\0\7\2"+
    "\1\114\3\2\1\115\26\2\1\0\5\2\1\116\34\2"+
    "\1\0\7\2\1\117\32\2\1\0\25\2\1\120\14\2"+
    "\1\0\5\2\1\121\34\2\1\0\7\2\1\122\32\2"+
    "\1\0\14\2\1\123\25\2\1\0\24\2\1\124\15\2"+
    "\1\0\11\2\1\125\25\2\43\0\3\2\1\0\7\2"+
    "\1\126\32\2\1\0\14\2\1\127\25\2\1\0\3\2"+
    "\1\130\36\2\1\0\1\131\41\2\1\0\10\2\1\132"+
    "\31\2\1\0\5\2\1\133\34\2\1\0\7\2\1\134"+
    "\32\2\1\0\16\2\1\135\23\2\1\0\25\2\1\136"+
    "\14\2\1\0\24\2\1\137\15\2\1\0\7\2\1\140"+
    "\32\2\1\0\11\2\1\141\26\2\1\142\1\2\1\0"+
    "\42\2\1\0\3\2\1\143\36\2\1\0\21\2\1\144"+
    "\20\2\1\0\30\2\1\145\11\2\1\0\24\2\1\146"+
    "\15\2\1\0\16\2\1\147\23\2\1\0\16\2\1\150"+
    "\23\2\1\0\22\2\1\151\17\2\1\0\14\2\1\152"+
    "\25\2\1\0\6\2\1\153\33\2\1\0\22\2\1\154"+
    "\17\2\1\0\15\2\1\155\24\2\1\0\13\2\1\156"+
    "\26\2\1\0\16\2\1\157\23\2\1\0\15\2\1\160"+
    "\24\2\1\0\26\2\1\161\13\2\1\0\22\2\1\162"+
    "\17\2\1\0\22\2\1\163\17\2\1\0\14\2\1\164"+
    "\22\2\3\130\1\165\3\130\1\166\33\130\3\2\1\0"+
    "\11\2\1\167\30\2\1\0\32\2\1\170\7\2\1\0"+
    "\25\2\1\171\12\2\1\172\1\2\1\0\42\2\1\0"+
    "\26\2\1\173\13\2\1\0\11\2\1\174\30\2\1\0"+
    "\22\2\1\175\17\2\1\0\16\2\1\176\23\2\1\0"+
    "\7\2\1\177\32\2\1\0\1\200\4\2\1\201\1\2"+
    "\1\202\2\2\1\203\1\204\1\2\1\205\1\2\1\206"+
    "\2\2\1\207\3\2\1\210\13\2\1\0\22\2\1\211"+
    "\17\2\1\0\15\2\1\212\24\2\1\0\13\2\1\213"+
    "\26\2\1\0\17\2\1\214\22\2\1\0\5\2\1\215"+
    "\34\2\1\0\15\2\1\216\24\2\1\0\22\2\1\217"+
    "\17\2\1\0\14\2\1\220\25\2\1\0\5\2\1\221"+
    "\34\2\1\0\22\2\1\222\17\2\1\0\11\2\1\223"+
    "\30\2\1\0\22\2\1\224\17\2\1\0\25\2\1\225"+
    "\14\2\1\0\3\2\1\226\36\2\1\0\15\2\1\227"+
    "\21\2\7\165\1\230\33\165\3\130\1\165\2\130\1\231"+
    "\1\166\33\130\3\2\1\0\16\2\1\232\23\2\1\0"+
    "\7\2\1\233\32\2\1\0\22\2\1\234\17\2\1\0"+
    "\22\2\1\235\15\2\1\236\1\2\1\0\42\2\1\0"+
    "\26\2\1\237\13\2\1\0\5\2\1\240\1\241\1\242"+
    "\6\2\1\243\1\244\3\2\1\245\1\246\15\2\1\0"+
    "\13\2\1\247\1\2\1\250\1\251\23\2\1\0\13\2"+
    "\1\252\26\2\1\0\10\2\1\253\31\2\1\0\14\2"+
    "\1\254\25\2\1\0\22\2\1\255\17\2\1\0\26\2"+
    "\1\256\13\2\1\0\16\2\1\257\23\2\1\0\14\2"+
    "\1\260\25\2\1\0\15\2\1\261\24\2\1\0\15\2"+
    "\1\262\24\2\1\0\15\2\1\263\24\2\1\0\16\2"+
    "\1\264\23\2\1\0\6\2\1\265\33\2\1\0\14\2"+
    "\1\266\25\2\1\0\12\2\1\267\27\2\1\0\25\2"+
    "\1\270\11\2\6\165\1\271\1\230\33\165\3\130\1\165"+
    "\2\130\1\272\1\166\33\130\3\2\1\0\21\2\1\273"+
    "\20\2\1\0\15\2\1\274\24\2\1\0\16\2\1\275"+
    "\23\2\1\0\13\2\1\276\26\2\1\0\1\277\41\2"+
    "\1\0\7\2\1\300\32\2\1\0\23\2\1\301\16\2"+
    "\1\0\1\302\41\2\1\0\15\2\1\303\24\2\1\0"+
    "\7\2\1\304\32\2\1\0\27\2\1\305\12\2\1\0"+
    "\17\2\1\306\22\2\1\0\11\2\1\307\30\2\1\0"+
    "\16\2\1\310\23\2\1\0\5\2\1\311\3\2\1\312"+
    "\30\2\1\0\7\2\1\313\32\2\1\0\5\2\1\314"+
    "\34\2\1\0\14\2\1\315\25\2\1\0\25\2\1\316"+
    "\14\2\1\0\20\2\1\317\21\2\1\0\21\2\1\320"+
    "\20\2\1\0\22\2\1\321\17\2\1\0\13\2\1\322"+
    "\23\2\6\165\1\323\1\230\33\165\3\130\1\165\3\130"+
    "\1\166\1\324\32\130\3\2\1\0\22\2\1\325\17\2"+
    "\1\0\27\2\1\326\12\2\1\0\14\2\1\327\25\2"+
    "\1\0\1\330\41\2\1\0\10\2\1\331\31\2\1\0"+
    "\16\2\1\332\23\2\1\0\25\2\1\333\14\2\1\0"+
    "\24\2\1\334\15\2\1\0\7\2\1\335\32\2\1\0"+
    "\11\2\1\336\26\2\1\337\1\2\1\0\42\2\1\0"+
    "\30\2\1\340\11\2\1\0\16\2\1\341\23\2\1\0"+
    "\16\2\1\342\23\2\1\0\22\2\1\343\17\2\1\0"+
    "\13\2\1\344\26\2\1\0\15\2\1\345\24\2\1\0"+
    "\21\2\1\346\20\2\1\0\16\2\1\347\23\2\1\0"+
    "\22\2\1\350\17\2\1\0\14\2\1\351\22\2\7\165"+
    "\1\230\1\352\32\165\3\2\1\0\7\2\1\353\32\2"+
    "\1\0\14\2\1\354\25\2\1\0\11\2\1\355\26\2"+
    "\1\356\1\2\1\0\42\2\1\0\26\2\1\357\13\2"+
    "\1\0\11\2\1\360\30\2\1\0\22\2\1\361\17\2"+
    "\1\0\16\2\1\362\23\2\1\0\7\2\1\363\32\2"+
    "\1\0\15\2\1\364\24\2\1\0\17\2\1\365\22\2"+
    "\1\0\5\2\1\366\34\2\1\0\14\2\1\367\25\2"+
    "\1\0\22\2\1\370\17\2\1\0\11\2\1\371\30\2"+
    "\1\0\16\2\1\372\23\2\1\0\21\2\1\373\20\2"+
    "\1\0\22\2\1\374\17\2\1\0\15\2\1\375\24\2"+
    "\1\0\7\2\1\376\32\2\1\0\22\2\1\377\17\2"+
    "\1\0\22\2\1\u0100\15\2\1\u0101\1\2\1\0\42\2"+
    "\1\0\14\2\1\u0102\25\2\1\0\15\2\1\u0103\24\2"+
    "\1\0\15\2\1\u0104\24\2\1\0\14\2\1\u0105\25\2"+
    "\1\0\22\2\1\u0106\17\2\1\0\25\2\1\u0107\14\2"+
    "\1\0\15\2\1\u0108\24\2\1\0\16\2\1\u0109\23\2"+
    "\1\0\20\2\1\u010a\21\2\1\0\27\2\1\u010b\12\2"+
    "\1\0\16\2\1\u010c\23\2\1\0\7\2\1\u010d\32\2"+
    "\1\0\21\2\1\u010e\20\2\1\0\22\2\1\u010f\17\2"+
    "\1\0\22\2\1\u0110\14\2";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7630];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\27\1\1\0\36\1\1\11\75\1\1\0\42\1\1\0"+
    "\40\1\1\0\31\1\1\0\26\1\1\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public static String cadena;
//cadena2   = (({id}|{numero}|\s ))(({id}|{numero}|\s )+)
/* ------------------------==: METODO DE ERROR LEXICO :==---------------------*/
    private void ErrorScan(int linea, int columna, String valor) {
        System.out.println("Error Lexico Iden: " + valor + ", " + linea + ", " + columna);
        cadena += "<tr>"
                + "<td><center><b>" + valor + "</b></center></td>"
                + "<td><center><b>" + linea + "</b></center></td>"
                + "<td><center><b>" + columna + "</b></center></td>"
                + "</tr>";
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerCHTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scannerCHTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 58: 
          { System.out.println("finSpinner");               return new Symbol (simbolosCHTML.finSpinner, yyline+1,yychar+1, new String (yytext()));
          }
        case 62: break;
        case 46: 
          { System.out.println("finTabla");               return new Symbol (simbolosCHTML.finTabla, yyline+1,yychar+1, new String (yytext()));
          }
        case 63: break;
        case 24: 
          { System.out.println("panel");               return new Symbol (simbolosCHTML.panel, yyline+1,yychar+1, new String (yytext()));
          }
        case 64: break;
        case 52: 
          { System.out.println("finCuerpo");               return new Symbol (simbolosCHTML.finCuerpo, yyline+1,yychar+1, new String (yytext()));
          }
        case 65: break;
        case 26: 
          { System.out.println("valor");               return new Symbol (simbolosCHTML.valor, yyline+1,yychar+1, new String (yytext()));
          }
        case 66: break;
        case 17: 
          { System.out.println("click");               return new Symbol (simbolosCHTML.click, yyline+1,yychar+1, new String (yytext()));
          }
        case 67: break;
        case 29: 
          { System.out.println("finCt");               return new Symbol (simbolosCHTML.finCt, yyline+1,yychar+1, new String (yytext()));
          }
        case 68: break;
        case 57: 
          { System.out.println("encabezado");                 return new Symbol (simbolosCHTML.encabezado, yyline+1,yychar+1, new String (yytext()));
          }
        case 69: break;
        case 47: 
          { System.out.println("finFilT");               return new Symbol (simbolosCHTML.finFil_t, yyline+1,yychar+1, new String (yytext()));
          }
        case 70: break;
        case 11: 
          { System.out.println("cjs");               return new Symbol (simbolosCHTML.cjs, yyline+1,yychar+1, new String (yytext()));
          }
        case 71: break;
        case 34: 
          { System.out.println("spinner");               return new Symbol (simbolosCHTML.spinner, yyline+1,yychar+1, new String (yytext()));
          }
        case 72: break;
        case 21: 
          { System.out.println("fondo");               return new Symbol (simbolosCHTML.fondo, yyline+1,yychar+1, new String (yytext()));
          }
        case 73: break;
        case 15: 
          { System.out.println("ruta");               return new Symbol (simbolosCHTML.ruta, yyline+1,yychar+1, new String (yytext()));
          }
        case 74: break;
        case 14: 
          { System.out.println("alto");               return new Symbol (simbolosCHTML.alto, yyline+1,yychar+1, new String (yytext()));
          }
        case 75: break;
        case 23: 
          { System.out.println("Boton");               return new Symbol (simbolosCHTML.boton, yyline+1,yychar+1, new String (yytext()));
          }
        case 76: break;
        case 16: 
          { System.out.println("chtml");              return new Symbol (simbolosCHTML.chtml, yyline+1,yychar+1, new String (yytext()));
          }
        case 77: break;
        case 3: 
          { System.out.println("menor");              return new Symbol (simbolosCHTML.menor, yyline+1,yychar+1, new String (yytext()));
          }
        case 78: break;
        case 53: 
          { System.out.println("finTitulo");               return new Symbol (simbolosCHTML.finTitulo, yyline+1,yychar+1, new String (yytext()));
          }
        case 79: break;
        case 20: 
          { System.out.println("filT");               return new Symbol (simbolosCHTML.fil_t, yyline+1,yychar+1, new String (yytext()));
          }
        case 80: break;
        case 19: 
          { System.out.println("tabla");               return new Symbol (simbolosCHTML.tabla, yyline+1,yychar+1, new String (yytext()));
          }
        case 81: break;
        case 38: 
          { System.out.println("Coment Multi");   /* se ignora*/
          }
        case 82: break;
        case 30: 
          { System.out.println("finCb");               return new Symbol (simbolosCHTML.finCb, yyline+1,yychar+1, new String (yytext()));
          }
        case 83: break;
        case 32: 
          { System.out.println("enlace");               return new Symbol (simbolosCHTML.enlace, yyline+1,yychar+1, new String (yytext()));
          }
        case 84: break;
        case 31: 
          { System.out.println("Imagen");               return new Symbol (simbolosCHTML.imagen, yyline+1,yychar+1, new String (yytext()));
          }
        case 85: break;
        case 55: 
          { System.out.println("finEnlace");               return new Symbol (simbolosCHTML.finEnlace, yyline+1,yychar+1, new String (yytext()));
          }
        case 86: break;
        case 10: 
          { System.out.println("cadeba");                return new Symbol (simbolosCHTML.cadena, yyline+1,yychar+1, new String (yytext()));
          }
        case 87: break;
        case 42: 
          { System.out.println("alineado");               return new Symbol (simbolosCHTML.alineado, yyline+1,yychar+1, new String (yytext()));
          }
        case 88: break;
        case 25: 
          { System.out.println("grupo");               return new Symbol (simbolosCHTML.grupo, yyline+1,yychar+1, new String (yytext()));
          }
        case 89: break;
        case 35: 
          { System.out.println("textoa");               return new Symbol (simbolosCHTML.texto_a, yyline+1,yychar+1, new String (yytext()));
          }
        case 90: break;
        case 12: 
          { System.out.println("ccss");               return new Symbol (simbolosCHTML.ccss, yyline+1,yychar+1, new String (yytext()));
          }
        case 91: break;
        case 60: 
          { System.out.println("finCajaTExto");               return new Symbol (simbolosCHTML.finCaja_texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 92: break;
        case 6: 
          { System.out.println("puntoComa");               return new Symbol (simbolosCHTML.puntoComaSimb, yyline+1,yychar+1, new String (yytext()));
          }
        case 93: break;
        case 49: 
          { System.out.println("finPanel");               return new Symbol (simbolosCHTML.finPanel, yyline+1,yychar+1, new String (yytext()));
          }
        case 94: break;
        case 18: 
          { System.out.println("textp");               return new Symbol (simbolosCHTML.texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 95: break;
        case 22: 
          { System.out.println("anchod");               return new Symbol (simbolosCHTML.ancho, yyline+1,yychar+1, new String (yytext()));
          }
        case 96: break;
        case 33: 
          { System.out.println("opcion");               return new Symbol (simbolosCHTML.opcion, yyline+1,yychar+1, new String (yytext()));
          }
        case 97: break;
        case 44: 
          { System.out.println("fincHtml");               return new Symbol (simbolosCHTML.finChtml, yyline+1,yychar+1, new String (yytext()));
          }
        case 98: break;
        case 37: 
          { System.out.println("derecho");               return new Symbol (simbolosCHTML.derecha, yyline+1,yychar+1, new String (yytext()));
          }
        case 99: break;
        case 9: 
          { System.out.println("identificador");               return new Symbol (simbolosCHTML.id, yyline+1,yychar+1, new String (yytext()));
          }
        case 100: break;
        case 7: 
          { System.out.println("ct");               return new Symbol (simbolosCHTML.ct, yyline+1,yychar+1, new String (yytext()));
          }
        case 101: break;
        case 13: 
          { System.out.println("caja");               return new Symbol (simbolosCHTML.caja, yyline+1,yychar+1, new String (yytext()));
          }
        case 102: break;
        case 56: 
          { System.out.println("finOpcion");               return new Symbol (simbolosCHTML.finOpcion, yyline+1,yychar+1, new String (yytext()));
          }
        case 103: break;
        case 45: 
          { System.out.println("finTexto");                  return new Symbol (simbolosCHTML.finTexto, yyline+1,yychar+1, new String (yytext()));
          }
        case 104: break;
        case 39: 
          { System.out.println("centrado");               return new Symbol (simbolosCHTML.centrado, yyline+1,yychar+1, new String (yytext()));
          }
        case 105: break;
        case 28: 
          { System.out.println("titulo");               return new Symbol (simbolosCHTML.titulo, yyline+1,yychar+1, new String (yytext()));
          }
        case 106: break;
        case 8: 
          { System.out.println("cb");               return new Symbol (simbolosCHTML.cb, yyline+1,yychar+1, new String (yytext()));
          }
        case 107: break;
        case 40: 
          { System.out.println("finCcss");               return new Symbol (simbolosCHTML.finCcss, yyline+1,yychar+1, new String (yytext()));
          }
        case 108: break;
        case 43: 
          { System.out.println("saltofin");               return new Symbol (simbolosCHTML.saltoFin, yyline+1,yychar+1, new String (yytext()));
          }
        case 109: break;
        case 41: 
          { System.out.println("finCaja");               return new Symbol (simbolosCHTML.finCaja, yyline+1,yychar+1, new String (yytext()));
          }
        case 110: break;
        case 36: 
          { System.out.println("finCjs");               return new Symbol (simbolosCHTML.finCjs, yyline+1,yychar+1, new String (yytext()));
          }
        case 111: break;
        case 5: 
          { System.out.println("igual");               return new Symbol (simbolosCHTML.igualSimb, yyline+1,yychar+1, new String (yytext()));
          }
        case 112: break;
        case 2: 
          { /* Se ignoran */
          }
        case 113: break;
        case 54: 
          { System.out.println("finImagen");               return new Symbol (simbolosCHTML.finImagen, yyline+1,yychar+1, new String (yytext()));
          }
        case 114: break;
        case 50: 
          { System.out.println("izquierdo");               return new Symbol (simbolosCHTML.izquierda, yyline+1,yychar+1, new String (yytext()));
          }
        case 115: break;
        case 48: 
          { System.out.println("finBoton");               return new Symbol (simbolosCHTML.finBoton, yyline+1,yychar+1, new String (yytext()));
          }
        case 116: break;
        case 27: 
          { System.out.println("cierpo");               return new Symbol (simbolosCHTML.cuerpo, yyline+1,yychar+1, new String (yytext()));
          }
        case 117: break;
        case 1: 
          { System.out.println("cadena2");                return new Symbol (simbolosCHTML.cadena2, yyline+1,yychar+1, new String (yytext()));
          }
        case 118: break;
        case 4: 
          { System.out.println("mayor");              return new Symbol (simbolosCHTML.mayor, yyline+1,yychar+1, new String (yytext()));
          }
        case 119: break;
        case 61: 
          { System.out.println("finEncabezado");               return new Symbol (simbolosCHTML.finEncabezado, yyline+1,yychar+1, new String (yytext()));
          }
        case 120: break;
        case 51: 
          { System.out.println("cajaTexto");               return new Symbol (simbolosCHTML.caja_texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 121: break;
        case 59: 
          { System.out.println("finTextoa");               return new Symbol (simbolosCHTML.finTexto_a, yyline+1,yychar+1, new String (yytext()));
          }
        case 122: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolosCHTML.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
