/* The following code was generated by JFlex 1.4.3 on 2/12/18 1:54 PM */

/* ------------------------==: CODIGO DE USUARIO :==--------------------------*/

package proyecto1_201122872.AnalizadorCHTML;
    

import java_cup.runtime.Symbol;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/12/18 1:54 PM from the specification file
 * <tt>ScannerHTML.jflex</tt>
 */
public class scannerCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\6\1\0\2\45\22\0\1\45\1\0\1\4\4\0"+
    "\1\0\5\0\1\11\1\2\1\10\12\1\1\0\1\44\1\7\1\43"+
    "\1\12\2\0\1\24\1\25\1\13\1\27\1\23\1\20\1\37\1\14"+
    "\1\21\1\31\1\41\1\17\1\16\1\22\1\30\1\35\1\42\1\34"+
    "\1\32\1\15\1\33\1\40\1\5\1\36\1\5\1\26\4\0\1\3"+
    "\1\0\1\24\1\25\1\13\1\27\1\23\1\20\1\37\1\14\1\21"+
    "\1\31\1\41\1\17\1\16\1\22\1\30\1\35\1\42\1\34\1\32"+
    "\1\15\1\33\1\40\1\5\1\36\1\5\1\26\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\16\3\1\7\1\10\1\4\1\11\1\0\1\11\1\0"+
    "\1\12\1\11\1\0\2\11\1\13\3\11\1\14\11\11"+
    "\1\15\14\11\1\0\1\2\1\0\5\11\1\16\27\11"+
    "\1\0\1\17\3\11\1\20\5\11\1\0\5\11\1\21"+
    "\7\11\1\22\3\11\1\0\1\23\1\24\4\11\1\25"+
    "\1\26\1\27\11\0\1\30\5\11\1\31\1\32\4\11"+
    "\1\33\1\34\1\35\1\0\2\11\1\36\1\37\1\11"+
    "\2\0\1\40\1\0\1\41\14\0\1\42\2\11\1\43"+
    "\2\11\1\44\1\0\1\11\1\0\2\11\1\45\3\0"+
    "\1\46\14\0\3\11\1\47\1\0\1\50\1\51\1\52"+
    "\1\11\1\53\1\0\1\54\14\0\2\11\1\55\1\0"+
    "\1\11\1\56\3\0\1\57\1\60\1\61\3\0\1\62"+
    "\2\0\1\63\1\64\1\11\1\65\1\66\1\0\1\67"+
    "\1\70\1\0\1\71\1\0\1\72\1\73\1\0\1\74"+
    "\1\0\1\75\1\0\1\76\4\0\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\46"+
    "\0\u010a\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\u0214"+
    "\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u02f8\0\46\0\46"+
    "\0\u031e\0\u0344\0\u036a\0\162\0\230\0\46\0\276\0\u0390"+
    "\0\u03b6\0\u03dc\0\162\0\u0402\0\u0428\0\u044e\0\162\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u05a4"+
    "\0\162\0\u05ca\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae"+
    "\0\u06d4\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\162\0\u07b8"+
    "\0\u07de\0\u0804\0\u082a\0\u0850\0\u0876\0\162\0\u089c\0\u08c2"+
    "\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2"+
    "\0\u0a18\0\u0a3e\0\u0a64\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22"+
    "\0\u0b48\0\u0b6e\0\u0b94\0\u0bba\0\u0be0\0\u0c06\0\162\0\u0c2c"+
    "\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c"+
    "\0\u0d82\0\u0da8\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\162\0\u0e66"+
    "\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe\0\u0f24\0\u0f4a\0\162\0\u0f70"+
    "\0\u0f96\0\u0fbc\0\u0fe2\0\162\0\162\0\u1008\0\u102e\0\u1054"+
    "\0\u107a\0\u10a0\0\162\0\162\0\u10c6\0\u10ec\0\u1112\0\u1138"+
    "\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\162\0\u121c\0\u1242"+
    "\0\u1268\0\u128e\0\u12b4\0\162\0\162\0\u12da\0\u1300\0\u1326"+
    "\0\u134c\0\162\0\162\0\162\0\u1372\0\u1398\0\u13be\0\162"+
    "\0\162\0\u13e4\0\u140a\0\u1430\0\46\0\u1456\0\46\0\u147c"+
    "\0\u14a2\0\u14c8\0\u14ee\0\u1514\0\u153a\0\u1560\0\u1586\0\u15ac"+
    "\0\u15d2\0\u15f8\0\u161e\0\162\0\u1644\0\u166a\0\162\0\u1690"+
    "\0\u16b6\0\162\0\u16dc\0\u1702\0\u1728\0\u174e\0\u1774\0\162"+
    "\0\u179a\0\u17c0\0\u17e6\0\46\0\u180c\0\u1832\0\u1858\0\u187e"+
    "\0\u18a4\0\u18ca\0\u18f0\0\u1916\0\u193c\0\u1962\0\u1988\0\u19ae"+
    "\0\u19d4\0\u19fa\0\u1a20\0\162\0\u1a46\0\162\0\46\0\162"+
    "\0\u1a6c\0\46\0\u1a92\0\u1ab8\0\u1ade\0\u1b04\0\u1b2a\0\u1b50"+
    "\0\u1b76\0\u1b9c\0\u1bc2\0\u1be8\0\u1c0e\0\u1c34\0\u1c5a\0\u1c80"+
    "\0\u1ca6\0\u1ccc\0\162\0\u1cf2\0\u1d18\0\46\0\u1d3e\0\u1d64"+
    "\0\u1d8a\0\u1db0\0\46\0\46\0\u1dd6\0\u1dfc\0\u1e22\0\46"+
    "\0\u1e48\0\u1e6e\0\46\0\162\0\u1e94\0\46\0\162\0\u1eba"+
    "\0\46\0\46\0\u1ee0\0\46\0\u1f06\0\46\0\46\0\u1f2c"+
    "\0\162\0\u1f52\0\46\0\u1f78\0\46\0\u1f9e\0\u1fc4\0\u1fea"+
    "\0\u2010\0\46\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\4\1\6\1\7"+
    "\2\2\1\10\1\11\1\4\1\12\2\4\1\13\1\14"+
    "\1\4\1\15\1\16\1\17\1\4\1\20\1\21\1\4"+
    "\1\22\1\4\1\23\1\24\1\4\1\25\1\26\2\4"+
    "\1\27\1\30\1\31\47\0\1\32\1\33\1\34\1\0"+
    "\2\34\4\0\30\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\30\34\3\0\4\35\1\36\41\35\1\0"+
    "\1\32\1\0\1\34\1\0\1\34\1\37\4\0\30\34"+
    "\2\0\1\31\10\0\1\40\36\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\1\41\1\42\1\43\1\34\1\44"+
    "\3\34\1\45\1\46\1\47\3\34\1\50\1\34\1\51"+
    "\7\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\6\34\1\52\1\34\1\53\1\54\16\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\6\34\1\55\6\34"+
    "\1\56\12\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\3\34\1\57\7\34\1\60\1\61\13\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\7\34\1\62"+
    "\20\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\4\34\1\63\2\34\1\64\20\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\15\34\1\65\12\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\10\34\1\66"+
    "\17\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\22\34\1\67\5\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\11\34\1\70\10\34\1\71\5\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\20\34\1\72"+
    "\7\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\11\34\1\73\16\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\21\34\1\74\6\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\11\34\1\75\16\34\11\0"+
    "\1\31\36\0\1\31\1\0\1\32\1\76\1\34\1\0"+
    "\2\34\4\0\30\34\4\0\1\77\54\0\1\100\36\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\17\34\1\101"+
    "\10\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\2\34\1\102\25\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\6\34\1\103\21\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\7\34\1\104\20\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\16\34\1\105"+
    "\11\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\17\34\1\106\10\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\10\34\1\107\17\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\2\34\1\110\25\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\23\34\1\111"+
    "\4\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\12\34\1\112\15\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\4\34\1\113\2\34\1\114\20\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\7\34\1\115"+
    "\20\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\11\34\1\116\16\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\27\34\1\117\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\1\120\3\34\1\121\23\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\2\34\1\122"+
    "\3\34\1\123\21\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\1\124\27\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\2\34\1\125\25\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\21\34\1\126\6\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\1\127"+
    "\27\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\4\34\1\130\23\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\6\34\1\131\21\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\2\34\1\132\25\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\7\34\1\133"+
    "\20\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\20\34\1\134\7\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\4\34\1\135\23\34\4\0\1\34\55\0"+
    "\1\136\35\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\17\34\1\137\10\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\3\34\1\140\24\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\1\141\27\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\2\34\1\142\25\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\11\34"+
    "\1\143\16\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\21\34\1\144\6\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\20\34\1\145\7\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\2\34\1\146\25\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\4\34"+
    "\1\147\23\34\4\0\1\32\1\0\1\150\1\0\2\34"+
    "\4\0\30\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\2\0\1\151\1\0\30\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\14\34\1\152\13\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\24\34\1\153\3\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\20\34"+
    "\1\154\7\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\11\34\1\155\16\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\11\34\1\156\16\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\15\34\1\157\12\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\7\34"+
    "\1\160\20\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\1\34\1\161\26\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\15\34\1\162\12\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\10\34\1\163\17\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\6\34"+
    "\1\164\21\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\2\34\1\165\25\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\7\34\1\166\20\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\11\34\1\167\16\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\10\34"+
    "\1\170\17\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\22\34\1\171\5\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\15\34\1\172\12\34\3\0\11\136"+
    "\1\173\34\136\1\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\4\34\1\174\23\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\26\34\1\175\1\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\21\34\1\176\6\34"+
    "\4\0\1\32\1\0\1\177\1\0\2\34\4\0\30\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\22\34"+
    "\1\200\5\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\4\34\1\201\23\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\15\34\1\202\12\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\11\34\1\203\16\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\2\34"+
    "\1\204\25\34\16\0\1\205\1\0\1\206\2\0\1\207"+
    "\1\210\1\0\1\211\1\0\1\212\2\0\1\213\1\0"+
    "\1\214\2\0\1\215\11\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\15\34\1\216\12\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\10\34\1\217\17\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\6\34\1\220"+
    "\21\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\12\34\1\221\15\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\1\222\27\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\10\34\1\223\17\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\15\34\1\224\12\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\7\34"+
    "\1\225\20\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\1\226\27\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\15\34\1\227\12\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\15\34\1\230\12\34\4\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\7\34\1\231"+
    "\20\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\4\34\1\232\23\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\15\34\1\233\12\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\21\34\1\234\6\34\3\0"+
    "\10\136\1\235\1\173\34\136\1\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\11\34\1\236\16\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\2\34\1\237\25\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\15\34"+
    "\1\240\12\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\15\34\1\241\12\34\4\0\1\32\1\0\1\242"+
    "\1\0\2\34\4\0\30\34\16\0\1\243\1\244\1\245"+
    "\6\0\1\246\1\247\3\0\1\250\1\0\1\251\33\0"+
    "\1\252\1\0\1\253\1\254\42\0\1\255\42\0\1\256"+
    "\51\0\1\257\53\0\1\260\52\0\1\261\45\0\1\262"+
    "\34\0\1\263\22\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\7\34\1\264\20\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\10\34\1\265\17\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\10\34\1\266\17\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\4\0\10\34"+
    "\1\267\17\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\11\34\1\270\16\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\1\34\1\271\26\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\7\34\1\272\20\34"+
    "\4\0\1\32\1\0\1\34\1\0\2\34\2\0\1\273"+
    "\1\0\30\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\10\34\1\274\17\34\3\0\10\136\1\275\1\173"+
    "\34\136\1\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\14\34\1\276\13\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\10\34\1\277\17\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\11\34\1\300\16\34\35\0"+
    "\1\301\30\0\1\302\61\0\1\303\46\0\1\304\36\0"+
    "\1\305\37\0\1\306\66\0\1\307\34\0\1\310\37\0"+
    "\1\311\52\0\1\312\34\0\1\313\3\0\1\314\43\0"+
    "\1\315\43\0\1\316\53\0\1\317\46\0\1\320\24\0"+
    "\1\32\1\0\1\34\1\0\2\34\4\0\21\34\1\321"+
    "\6\34\4\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\13\34\1\322\14\34\4\0\1\32\1\0\1\34\1\0"+
    "\2\34\4\0\14\34\1\323\13\34\4\0\1\32\1\0"+
    "\1\34\1\0\2\34\4\0\15\34\1\324\12\34\23\0"+
    "\1\325\26\0\1\32\1\0\1\34\1\0\2\34\4\0"+
    "\21\34\1\326\6\34\3\0\11\136\1\173\1\327\33\136"+
    "\1\0\1\32\1\0\1\34\1\0\2\34\4\0\15\34"+
    "\1\330\12\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\23\34\1\331\4\34\35\0\1\332\31\0\1\333"+
    "\53\0\1\334\55\0\1\335\44\0\1\336\27\0\1\337"+
    "\47\0\1\340\31\0\1\341\101\0\1\342\32\0\1\343"+
    "\45\0\1\344\51\0\1\345\36\0\1\346\46\0\1\347"+
    "\46\0\1\350\23\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\14\34\1\351\13\34\4\0\1\32\1\0\1\34"+
    "\1\0\2\34\4\0\11\34\1\352\16\34\4\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\15\34\1\353\12\34"+
    "\24\0\1\354\25\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\2\34\1\355\25\34\22\0\1\356\31\0\1\357"+
    "\77\0\1\360\27\0\1\361\56\0\1\362\41\0\1\363"+
    "\36\0\1\364\53\0\1\365\47\0\1\366\33\0\1\367"+
    "\54\0\1\370\53\0\1\371\37\0\1\372\42\0\1\373"+
    "\27\0\1\32\1\0\1\34\1\0\2\34\4\0\11\34"+
    "\1\374\16\34\4\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\14\34\1\375\13\34\25\0\1\376\24\0\1\32"+
    "\1\0\1\34\1\0\2\34\4\0\15\34\1\377\12\34"+
    "\20\0\1\u0100\60\0\1\u0101\45\0\1\u0102\20\0\1\u0103"+
    "\64\0\1\u0104\46\0\1\u0105\45\0\1\u0106\44\0\1\u0107"+
    "\46\0\1\u0108\23\0\1\32\1\0\1\34\1\0\2\34"+
    "\4\0\15\34\1\u0109\12\34\26\0\1\u010a\46\0\1\u010b"+
    "\47\0\1\u010c\53\0\1\u010d\47\0\1\u010e\33\0\1\u010f"+
    "\36\0\1\u0110\57\0\1\u0111\46\0\1\u0112\45\0\1\u0113"+
    "\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8246];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\16\1\2\11\2\1\1\0"+
    "\1\1\1\0\1\11\1\1\1\0\35\1\1\0\1\1"+
    "\1\0\35\1\1\0\12\1\1\0\21\1\1\0\11\1"+
    "\11\0\17\1\1\0\5\1\2\0\1\11\1\0\1\11"+
    "\14\0\7\1\1\0\1\1\1\0\3\1\3\0\1\11"+
    "\14\0\4\1\1\0\1\1\1\11\2\1\1\11\1\0"+
    "\1\1\14\0\3\1\1\0\1\1\1\11\3\0\1\1"+
    "\2\11\3\0\1\11\2\0\1\11\2\1\1\11\1\1"+
    "\1\0\2\11\1\0\1\11\1\0\2\11\1\0\1\1"+
    "\1\0\1\11\1\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public static String cadena;
//cadena2   = (\n|{id}|{numero})+
/* ------------------------==: METODO DE ERROR LEXICO :==---------------------*/
    private void ErrorScan(int linea, int columna, String valor) {
        System.out.println("Error Lexico Iden: " + valor + ", " + linea + ", " + columna);
        cadena += "<tr>"
                + "<td><center><b>" + valor + "</b></center></td>"
                + "<td><center><b>" + linea + "</b></center></td>"
                + "<td><center><b>" + columna + "</b></center></td>"
                + "</tr>";
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerCHTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scannerCHTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { System.out.println("finSpinner");               return new Symbol (simbolosCHTML.finSpinner, yyline+1,yychar+1, new String (yytext()));
          }
        case 65: break;
        case 48: 
          { System.out.println("finTabla");               return new Symbol (simbolosCHTML.finTabla, yyline+1,yychar+1, new String (yytext()));
          }
        case 66: break;
        case 27: 
          { System.out.println("panel");               return new Symbol (simbolosCHTML.panel, yyline+1,yychar+1, new String (yytext()));
          }
        case 67: break;
        case 55: 
          { System.out.println("finCuerpo");               return new Symbol (simbolosCHTML.finCuerpo, yyline+1,yychar+1, new String (yytext()));
          }
        case 68: break;
        case 29: 
          { System.out.println("valor");               return new Symbol (simbolosCHTML.valor, yyline+1,yychar+1, new String (yytext()));
          }
        case 69: break;
        case 20: 
          { System.out.println("click");               return new Symbol (simbolosCHTML.click, yyline+1,yychar+1, new String (yytext()));
          }
        case 70: break;
        case 32: 
          { System.out.println("finCt");               return new Symbol (simbolosCHTML.finCt, yyline+1,yychar+1, new String (yytext()));
          }
        case 71: break;
        case 60: 
          { System.out.println("encabezado");                 return new Symbol (simbolosCHTML.encabezado, yyline+1,yychar+1, new String (yytext()));
          }
        case 72: break;
        case 49: 
          { System.out.println("finFilT");               return new Symbol (simbolosCHTML.finFil_t, yyline+1,yychar+1, new String (yytext()));
          }
        case 73: break;
        case 14: 
          { System.out.println("cjs");               return new Symbol (simbolosCHTML.cjs, yyline+1,yychar+1, new String (yytext()));
          }
        case 74: break;
        case 40: 
          { System.out.println("spinner");               return new Symbol (simbolosCHTML.spinner, yyline+1,yychar+1, new String (yytext()));
          }
        case 75: break;
        case 24: 
          { System.out.println("fondo");               return new Symbol (simbolosCHTML.fondo, yyline+1,yychar+1, new String (yytext()));
          }
        case 76: break;
        case 18: 
          { System.out.println("ruta");               return new Symbol (simbolosCHTML.ruta, yyline+1,yychar+1, new String (yytext()));
          }
        case 77: break;
        case 17: 
          { System.out.println("alto");               return new Symbol (simbolosCHTML.alto, yyline+1,yychar+1, new String (yytext()));
          }
        case 78: break;
        case 26: 
          { System.out.println("Boton");               return new Symbol (simbolosCHTML.boton, yyline+1,yychar+1, new String (yytext()));
          }
        case 79: break;
        case 19: 
          { System.out.println("chtml");              return new Symbol (simbolosCHTML.chtml, yyline+1,yychar+1, new String (yytext()));
          }
        case 80: break;
        case 5: 
          { System.out.println("menor");              return new Symbol (simbolosCHTML.menor, yyline+1,yychar+1, new String (yytext()));
          }
        case 81: break;
        case 56: 
          { System.out.println("finTitulo");               return new Symbol (simbolosCHTML.finTitulo, yyline+1,yychar+1, new String (yytext()));
          }
        case 82: break;
        case 23: 
          { System.out.println("filT");               return new Symbol (simbolosCHTML.fil_t, yyline+1,yychar+1, new String (yytext()));
          }
        case 83: break;
        case 22: 
          { System.out.println("tabla");               return new Symbol (simbolosCHTML.tabla, yyline+1,yychar+1, new String (yytext()));
          }
        case 84: break;
        case 41: 
          { System.out.println("Coment Multi");   /* se ignora*/
          }
        case 85: break;
        case 33: 
          { System.out.println("finCb");               return new Symbol (simbolosCHTML.finCb, yyline+1,yychar+1, new String (yytext()));
          }
        case 86: break;
        case 35: 
          { System.out.println("enlace");               return new Symbol (simbolosCHTML.enlace, yyline+1,yychar+1, new String (yytext()));
          }
        case 87: break;
        case 1: 
          { ErrorScan(yyline,yychar,yytext());
          }
        case 88: break;
        case 34: 
          { System.out.println("Imagen");               return new Symbol (simbolosCHTML.imagen, yyline+1,yychar+1, new String (yytext()));
          }
        case 89: break;
        case 3: 
          { System.out.println("id");                return new Symbol (simbolosCHTML.identificador, yyline+1,yychar+1, new String (yytext()));
          }
        case 90: break;
        case 58: 
          { System.out.println("finEnlace");               return new Symbol (simbolosCHTML.finEnlace, yyline+1,yychar+1, new String (yytext()));
          }
        case 91: break;
        case 10: 
          { System.out.println("cadeba");                return new Symbol (simbolosCHTML.cadena, yyline+1,yychar+1, new String (yytext()));
          }
        case 92: break;
        case 45: 
          { System.out.println("alineado");               return new Symbol (simbolosCHTML.alineado, yyline+1,yychar+1, new String (yytext()));
          }
        case 93: break;
        case 28: 
          { System.out.println("grupo");               return new Symbol (simbolosCHTML.grupo, yyline+1,yychar+1, new String (yytext()));
          }
        case 94: break;
        case 37: 
          { System.out.println("textoa");               return new Symbol (simbolosCHTML.texto_a, yyline+1,yychar+1, new String (yytext()));
          }
        case 95: break;
        case 15: 
          { System.out.println("ccss");               return new Symbol (simbolosCHTML.ccss, yyline+1,yychar+1, new String (yytext()));
          }
        case 96: break;
        case 63: 
          { System.out.println("finCajaTExto");               return new Symbol (simbolosCHTML.finCaja_texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 97: break;
        case 8: 
          { System.out.println("puntoComa");               return new Symbol (simbolosCHTML.puntoComaSimb, yyline+1,yychar+1, new String (yytext()));
          }
        case 98: break;
        case 51: 
          { System.out.println("finPanel");               return new Symbol (simbolosCHTML.finPanel, yyline+1,yychar+1, new String (yytext()));
          }
        case 99: break;
        case 21: 
          { System.out.println("textp");               return new Symbol (simbolosCHTML.texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 100: break;
        case 36: 
          { System.out.println("opcion");               return new Symbol (simbolosCHTML.opcion, yyline+1,yychar+1, new String (yytext()));
          }
        case 101: break;
        case 25: 
          { System.out.println("anchod");               return new Symbol (simbolosCHTML.ancho, yyline+1,yychar+1, new String (yytext()));
          }
        case 102: break;
        case 2: 
          { System.out.println("nu mero");                return new Symbol (simbolosCHTML.numero, yyline+1,yychar+1, new String (yytext()));
          }
        case 103: break;
        case 46: 
          { System.out.println("fincHtml");               return new Symbol (simbolosCHTML.finChtml, yyline+1,yychar+1, new String (yytext()));
          }
        case 104: break;
        case 39: 
          { System.out.println("derecho");               return new Symbol (simbolosCHTML.derecha, yyline+1,yychar+1, new String (yytext()));
          }
        case 105: break;
        case 13: 
          { System.out.println("identificador");               return new Symbol (simbolosCHTML.id, yyline+1,yychar+1, new String (yytext()));
          }
        case 106: break;
        case 11: 
          { System.out.println("ct");               return new Symbol (simbolosCHTML.ct, yyline+1,yychar+1, new String (yytext()));
          }
        case 107: break;
        case 16: 
          { System.out.println("caja");               return new Symbol (simbolosCHTML.caja, yyline+1,yychar+1, new String (yytext()));
          }
        case 108: break;
        case 59: 
          { System.out.println("finOpcion");               return new Symbol (simbolosCHTML.finOpcion, yyline+1,yychar+1, new String (yytext()));
          }
        case 109: break;
        case 47: 
          { System.out.println("finTexto");                  return new Symbol (simbolosCHTML.finTexto, yyline+1,yychar+1, new String (yytext()));
          }
        case 110: break;
        case 42: 
          { System.out.println("centrado");               return new Symbol (simbolosCHTML.centrado, yyline+1,yychar+1, new String (yytext()));
          }
        case 111: break;
        case 31: 
          { System.out.println("titulo");               return new Symbol (simbolosCHTML.titulo, yyline+1,yychar+1, new String (yytext()));
          }
        case 112: break;
        case 12: 
          { System.out.println("cb");               return new Symbol (simbolosCHTML.cb, yyline+1,yychar+1, new String (yytext()));
          }
        case 113: break;
        case 43: 
          { System.out.println("finCcss");               return new Symbol (simbolosCHTML.finCcss, yyline+1,yychar+1, new String (yytext()));
          }
        case 114: break;
        case 53: 
          { System.out.println("saltofin");               return new Symbol (simbolosCHTML.saltoFin, yyline+1,yychar+1, new String (yytext()));
          }
        case 115: break;
        case 44: 
          { System.out.println("finCaja");               return new Symbol (simbolosCHTML.finCaja, yyline+1,yychar+1, new String (yytext()));
          }
        case 116: break;
        case 38: 
          { System.out.println("finCjs");               return new Symbol (simbolosCHTML.finCjs, yyline+1,yychar+1, new String (yytext()));
          }
        case 117: break;
        case 7: 
          { System.out.println("igual");               return new Symbol (simbolosCHTML.igualSimb, yyline+1,yychar+1, new String (yytext()));
          }
        case 118: break;
        case 4: 
          { /* Se ignoran */
          }
        case 119: break;
        case 57: 
          { System.out.println("finImagen");               return new Symbol (simbolosCHTML.finImagen, yyline+1,yychar+1, new String (yytext()));
          }
        case 120: break;
        case 52: 
          { System.out.println("izquierdo");               return new Symbol (simbolosCHTML.izquierda, yyline+1,yychar+1, new String (yytext()));
          }
        case 121: break;
        case 50: 
          { System.out.println("finBoton");               return new Symbol (simbolosCHTML.finBoton, yyline+1,yychar+1, new String (yytext()));
          }
        case 122: break;
        case 30: 
          { System.out.println("cierpo");               return new Symbol (simbolosCHTML.cuerpo, yyline+1,yychar+1, new String (yytext()));
          }
        case 123: break;
        case 9: 
          { System.out.println("cadena2");                return new Symbol (simbolosCHTML.cadena2, yyline+1,yychar+1, new String (yytext()));
          }
        case 124: break;
        case 6: 
          { System.out.println("mayor");              return new Symbol (simbolosCHTML.mayor, yyline+1,yychar+1, new String (yytext()));
          }
        case 125: break;
        case 64: 
          { System.out.println("finEncabezado");               return new Symbol (simbolosCHTML.finEncabezado, yyline+1,yychar+1, new String (yytext()));
          }
        case 126: break;
        case 54: 
          { System.out.println("cajaTexto");               return new Symbol (simbolosCHTML.caja_texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 127: break;
        case 61: 
          { System.out.println("finTextoa");               return new Symbol (simbolosCHTML.finTexto_a, yyline+1,yychar+1, new String (yytext()));
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolosCHTML.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
