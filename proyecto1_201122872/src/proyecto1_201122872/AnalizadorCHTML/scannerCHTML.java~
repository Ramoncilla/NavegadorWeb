/* The following code was generated by JFlex 1.4.3 on 2/23/18 3:08 PM */

/* ------------------------==: CODIGO DE USUARIO :==--------------------------*/

package proyecto1_201122872.AnalizadorCHTML;
    

import java_cup.runtime.Symbol;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 2/23/18 3:08 PM from the specification file
 * <tt>ScannerHTML.jflex</tt>
 */
public class scannerCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\44\1\44\1\0\2\44\22\0\1\44\1\0\1\4\4\0"+
    "\1\0\5\0\1\10\1\2\1\7\12\1\1\0\1\43\1\6\1\42"+
    "\1\11\2\0\1\23\1\24\1\12\1\26\1\22\1\17\1\36\1\13"+
    "\1\20\1\30\1\40\1\16\1\15\1\21\1\27\1\34\1\41\1\33"+
    "\1\31\1\14\1\32\1\37\1\5\1\35\1\5\1\25\4\0\1\3"+
    "\1\0\1\23\1\24\1\12\1\26\1\22\1\17\1\36\1\13\1\20"+
    "\1\30\1\40\1\16\1\15\1\21\1\27\1\34\1\41\1\33\1\31"+
    "\1\14\1\32\1\37\1\5\1\35\1\5\1\25\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\16\3"+
    "\1\6\1\7\1\10\1\11\1\0\1\11\1\0\1\12"+
    "\1\0\2\11\1\13\3\11\1\14\11\11\1\15\14\11"+
    "\1\0\1\2\1\0\5\11\1\16\27\11\1\0\1\17"+
    "\3\11\1\20\5\11\1\0\5\11\1\21\7\11\1\22"+
    "\3\11\1\0\1\23\1\24\4\11\1\25\1\26\1\27"+
    "\11\0\1\30\5\11\1\31\1\32\4\11\1\33\1\34"+
    "\1\35\1\0\2\11\1\36\1\37\1\11\2\0\1\40"+
    "\1\0\1\41\14\0\1\42\2\11\1\43\2\11\1\44"+
    "\1\0\1\11\1\0\2\11\1\45\3\0\1\46\14\0"+
    "\3\11\1\47\1\0\1\50\1\51\1\52\1\11\1\53"+
    "\1\0\1\54\14\0\2\11\1\55\1\0\1\11\1\56"+
    "\3\0\1\57\1\60\1\61\3\0\1\62\2\0\1\63"+
    "\1\64\1\11\1\65\1\66\1\0\1\67\1\70\1\0"+
    "\1\71\1\0\1\72\1\73\1\0\1\74\1\0\1\75"+
    "\1\0\1\76\4\0\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\45\0\336"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1\0\u0206"+
    "\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\45\0\45\0\u02e4"+
    "\0\u0309\0\u032e\0\157\0\224\0\45\0\u0353\0\u0378\0\u039d"+
    "\0\157\0\u03c2\0\u03e7\0\u040c\0\157\0\u0431\0\u0456\0\u047b"+
    "\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\157\0\u057e"+
    "\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6"+
    "\0\u06cb\0\u06f0\0\u0715\0\u073a\0\157\0\u075f\0\u0784\0\u07a9"+
    "\0\u07ce\0\u07f3\0\u0818\0\157\0\u083d\0\u0862\0\u0887\0\u08ac"+
    "\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4"+
    "\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc"+
    "\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\157\0\u0bb5\0\u0bda\0\u0bff"+
    "\0\u0c24\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02\0\u0d27"+
    "\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\157\0\u0de0\0\u0e05\0\u0e2a"+
    "\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\157\0\u0ee3\0\u0f08\0\u0f2d"+
    "\0\u0f52\0\157\0\157\0\u0f77\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b"+
    "\0\157\0\157\0\u1030\0\u1055\0\u107a\0\u109f\0\u10c4\0\u10e9"+
    "\0\u110e\0\u1133\0\u1158\0\157\0\u117d\0\u11a2\0\u11c7\0\u11ec"+
    "\0\u1211\0\157\0\157\0\u1236\0\u125b\0\u1280\0\u12a5\0\157"+
    "\0\157\0\157\0\u12ca\0\u12ef\0\u1314\0\157\0\157\0\u1339"+
    "\0\u135e\0\u1383\0\45\0\u13a8\0\45\0\u13cd\0\u13f2\0\u1417"+
    "\0\u143c\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f"+
    "\0\u1564\0\157\0\u1589\0\u15ae\0\157\0\u15d3\0\u15f8\0\157"+
    "\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1\0\157\0\u16d6\0\u16fb"+
    "\0\u1720\0\45\0\u1745\0\u176a\0\u178f\0\u17b4\0\u17d9\0\u17fe"+
    "\0\u1823\0\u1848\0\u186d\0\u1892\0\u18b7\0\u18dc\0\u1901\0\u1926"+
    "\0\u194b\0\157\0\u1970\0\157\0\45\0\157\0\u1995\0\45"+
    "\0\u19ba\0\u19df\0\u1a04\0\u1a29\0\u1a4e\0\u1a73\0\u1a98\0\u1abd"+
    "\0\u1ae2\0\u1b07\0\u1b2c\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5"+
    "\0\157\0\u1c0a\0\u1c2f\0\45\0\u1c54\0\u1c79\0\u1c9e\0\u1cc3"+
    "\0\45\0\45\0\u1ce8\0\u1d0d\0\u1d32\0\45\0\u1d57\0\u1d7c"+
    "\0\45\0\157\0\u1da1\0\45\0\157\0\u1dc6\0\45\0\45"+
    "\0\u1deb\0\45\0\u1e10\0\45\0\45\0\u1e35\0\157\0\u1e5a"+
    "\0\45\0\u1e7f\0\45\0\u1ea4\0\u1ec9\0\u1eee\0\u1f13\0\45"+
    "\0\45";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\4\1\6\2\2"+
    "\1\7\1\10\1\4\1\11\2\4\1\12\1\13\1\4"+
    "\1\14\1\15\1\16\1\4\1\17\1\20\1\4\1\21"+
    "\1\4\1\22\1\23\1\4\1\24\1\25\2\4\1\26"+
    "\1\27\1\30\46\0\1\31\1\32\1\33\1\0\1\33"+
    "\4\0\30\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\30\33\3\0\4\34\1\35\40\34\7\0\1\36"+
    "\36\0\1\31\1\0\1\33\1\0\1\33\4\0\1\37"+
    "\1\40\1\41\1\33\1\42\3\33\1\43\1\44\1\45"+
    "\3\33\1\46\1\33\1\47\7\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\6\33\1\50\1\33\1\51"+
    "\1\52\16\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\6\33\1\53\6\33\1\54\12\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\3\33\1\55\7\33"+
    "\1\56\1\57\13\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\7\33\1\60\20\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\4\33\1\61\2\33\1\62"+
    "\20\33\4\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\15\33\1\63\12\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\10\33\1\64\17\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\22\33\1\65\5\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\11\33\1\66"+
    "\10\33\1\67\5\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\20\33\1\70\7\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\11\33\1\71\16\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\21\33\1\72"+
    "\6\33\4\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\11\33\1\73\16\33\47\0\1\30\1\0\1\31\1\74"+
    "\1\33\1\0\1\33\4\0\30\33\4\0\1\75\52\0"+
    "\1\76\36\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\17\33\1\77\10\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\2\33\1\100\25\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\6\33\1\101\21\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\7\33\1\102"+
    "\20\33\4\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\16\33\1\103\11\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\17\33\1\104\10\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\10\33\1\105\17\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\2\33\1\106"+
    "\25\33\4\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\23\33\1\107\4\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\12\33\1\110\15\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\4\33\1\111\2\33\1\112"+
    "\20\33\4\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\7\33\1\113\20\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\11\33\1\114\16\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\27\33\1\115\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\1\116\3\33\1\117"+
    "\23\33\4\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\2\33\1\120\3\33\1\121\21\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\1\122\27\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\2\33\1\123\25\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\21\33"+
    "\1\124\6\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\1\125\27\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\4\33\1\126\23\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\6\33\1\127\21\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\2\33\1\130"+
    "\25\33\4\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\7\33\1\131\20\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\20\33\1\132\7\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\4\33\1\133\23\33\4\0"+
    "\1\33\53\0\1\134\35\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\17\33\1\135\10\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\3\33\1\136\24\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\1\137\27\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\2\33"+
    "\1\140\25\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\11\33\1\141\16\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\21\33\1\142\6\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\20\33\1\143\7\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\2\33"+
    "\1\144\25\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\4\33\1\145\23\33\4\0\1\31\1\0\1\146"+
    "\1\0\1\33\4\0\30\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\2\0\1\147\1\0\30\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\14\33\1\150\13\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\24\33"+
    "\1\151\3\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\20\33\1\152\7\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\11\33\1\153\16\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\11\33\1\154\16\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\15\33"+
    "\1\155\12\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\7\33\1\156\20\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\1\33\1\157\26\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\15\33\1\160\12\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\10\33"+
    "\1\161\17\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\6\33\1\162\21\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\2\33\1\163\25\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\7\33\1\164\20\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\11\33"+
    "\1\165\16\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\10\33\1\166\17\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\22\33\1\167\5\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\15\33\1\170\12\33"+
    "\3\0\10\134\1\171\34\134\1\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\4\33\1\172\23\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\26\33\1\173\1\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\21\33"+
    "\1\174\6\33\4\0\1\31\1\0\1\175\1\0\1\33"+
    "\4\0\30\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\22\33\1\176\5\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\4\33\1\177\23\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\15\33\1\200\12\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\11\33"+
    "\1\201\16\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\2\33\1\202\25\33\15\0\1\203\1\0\1\204"+
    "\2\0\1\205\1\206\1\0\1\207\1\0\1\210\2\0"+
    "\1\211\1\0\1\212\2\0\1\213\11\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\15\33\1\214\12\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\10\33\1\215"+
    "\17\33\4\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\6\33\1\216\21\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\12\33\1\217\15\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\1\220\27\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\10\33\1\221\17\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\15\33"+
    "\1\222\12\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\7\33\1\223\20\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\1\224\27\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\15\33\1\225\12\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\15\33\1\226"+
    "\12\33\4\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\7\33\1\227\20\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\4\33\1\230\23\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\15\33\1\231\12\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\21\33\1\232"+
    "\6\33\3\0\7\134\1\233\1\171\34\134\1\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\11\33\1\234\16\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\2\33"+
    "\1\235\25\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\15\33\1\236\12\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\15\33\1\237\12\33\4\0\1\31"+
    "\1\0\1\240\1\0\1\33\4\0\30\33\15\0\1\241"+
    "\1\242\1\243\6\0\1\244\1\245\3\0\1\246\1\0"+
    "\1\247\32\0\1\250\1\0\1\251\1\252\41\0\1\253"+
    "\41\0\1\254\50\0\1\255\52\0\1\256\51\0\1\257"+
    "\44\0\1\260\33\0\1\261\22\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\7\33\1\262\20\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\10\33\1\263\17\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\10\33"+
    "\1\264\17\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\10\33\1\265\17\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\11\33\1\266\16\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\1\33\1\267\26\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\7\33"+
    "\1\270\20\33\4\0\1\31\1\0\1\33\1\0\1\33"+
    "\2\0\1\271\1\0\30\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\10\33\1\272\17\33\3\0\7\134"+
    "\1\273\1\171\34\134\1\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\14\33\1\274\13\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\10\33\1\275\17\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\11\33\1\276"+
    "\16\33\34\0\1\277\27\0\1\300\60\0\1\301\45\0"+
    "\1\302\35\0\1\303\36\0\1\304\65\0\1\305\33\0"+
    "\1\306\36\0\1\307\51\0\1\310\33\0\1\311\3\0"+
    "\1\312\42\0\1\313\42\0\1\314\52\0\1\315\45\0"+
    "\1\316\24\0\1\31\1\0\1\33\1\0\1\33\4\0"+
    "\21\33\1\317\6\33\4\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\13\33\1\320\14\33\4\0\1\31\1\0"+
    "\1\33\1\0\1\33\4\0\14\33\1\321\13\33\4\0"+
    "\1\31\1\0\1\33\1\0\1\33\4\0\15\33\1\322"+
    "\12\33\22\0\1\323\26\0\1\31\1\0\1\33\1\0"+
    "\1\33\4\0\21\33\1\324\6\33\3\0\10\134\1\171"+
    "\1\325\33\134\1\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\15\33\1\326\12\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\23\33\1\327\4\33\34\0\1\330"+
    "\30\0\1\331\52\0\1\332\54\0\1\333\43\0\1\334"+
    "\26\0\1\335\46\0\1\336\31\0\1\337\77\0\1\340"+
    "\31\0\1\341\44\0\1\342\50\0\1\343\35\0\1\344"+
    "\45\0\1\345\45\0\1\346\23\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\14\33\1\347\13\33\4\0\1\31"+
    "\1\0\1\33\1\0\1\33\4\0\11\33\1\350\16\33"+
    "\4\0\1\31\1\0\1\33\1\0\1\33\4\0\15\33"+
    "\1\351\12\33\23\0\1\352\25\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\2\33\1\353\25\33\21\0\1\354"+
    "\31\0\1\355\75\0\1\356\26\0\1\357\55\0\1\360"+
    "\40\0\1\361\35\0\1\362\52\0\1\363\46\0\1\364"+
    "\32\0\1\365\53\0\1\366\52\0\1\367\36\0\1\370"+
    "\41\0\1\371\27\0\1\31\1\0\1\33\1\0\1\33"+
    "\4\0\11\33\1\372\16\33\4\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\14\33\1\373\13\33\24\0\1\374"+
    "\24\0\1\31\1\0\1\33\1\0\1\33\4\0\15\33"+
    "\1\375\12\33\17\0\1\376\57\0\1\377\44\0\1\u0100"+
    "\20\0\1\u0101\62\0\1\u0102\45\0\1\u0103\44\0\1\u0104"+
    "\43\0\1\u0105\45\0\1\u0106\23\0\1\31\1\0\1\33"+
    "\1\0\1\33\4\0\15\33\1\u0107\12\33\25\0\1\u0108"+
    "\45\0\1\u0109\46\0\1\u010a\52\0\1\u010b\46\0\1\u010c"+
    "\32\0\1\u010d\35\0\1\u010e\56\0\1\u010f\45\0\1\u0110"+
    "\44\0\1\u0111\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7992];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\16\1\2\11\2\1\1\0"+
    "\1\1\1\0\1\11\1\0\35\1\1\0\1\1\1\0"+
    "\35\1\1\0\12\1\1\0\21\1\1\0\11\1\11\0"+
    "\17\1\1\0\5\1\2\0\1\11\1\0\1\11\14\0"+
    "\7\1\1\0\1\1\1\0\3\1\3\0\1\11\14\0"+
    "\4\1\1\0\1\1\1\11\2\1\1\11\1\0\1\1"+
    "\14\0\3\1\1\0\1\1\1\11\3\0\1\1\2\11"+
    "\3\0\1\11\2\0\1\11\2\1\1\11\1\1\1\0"+
    "\2\11\1\0\1\11\1\0\2\11\1\0\1\1\1\0"+
    "\1\11\1\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public static String cadena;
//cadena2   = (({id}|{numero}|\s ))(({id}|{numero}|\s )+)
/* ------------------------==: METODO DE ERROR LEXICO :==---------------------*/
    private void ErrorScan(int linea, int columna, String valor) {
        System.out.println("Error Lexico Iden: " + valor + ", " + linea + ", " + columna);
        cadena += "<tr>"
                + "<td><center><b>" + valor + "</b></center></td>"
                + "<td><center><b>" + linea + "</b></center></td>"
                + "<td><center><b>" + columna + "</b></center></td>"
                + "</tr>";
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerCHTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scannerCHTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 62: 
          { System.out.println("finSpinner");               return new Symbol (simbolosCHTML.finSpinner, yyline+1,yychar+1, new String (yytext()));
          }
        case 65: break;
        case 48: 
          { System.out.println("finTabla");               return new Symbol (simbolosCHTML.finTabla, yyline+1,yychar+1, new String (yytext()));
          }
        case 66: break;
        case 27: 
          { System.out.println("panel");               return new Symbol (simbolosCHTML.panel, yyline+1,yychar+1, new String (yytext()));
          }
        case 67: break;
        case 55: 
          { System.out.println("finCuerpo");               return new Symbol (simbolosCHTML.finCuerpo, yyline+1,yychar+1, new String (yytext()));
          }
        case 68: break;
        case 29: 
          { System.out.println("valor");               return new Symbol (simbolosCHTML.valor, yyline+1,yychar+1, new String (yytext()));
          }
        case 69: break;
        case 20: 
          { System.out.println("click");               return new Symbol (simbolosCHTML.click, yyline+1,yychar+1, new String (yytext()));
          }
        case 70: break;
        case 32: 
          { System.out.println("finCt");               return new Symbol (simbolosCHTML.finCt, yyline+1,yychar+1, new String (yytext()));
          }
        case 71: break;
        case 60: 
          { System.out.println("encabezado");                 return new Symbol (simbolosCHTML.encabezado, yyline+1,yychar+1, new String (yytext()));
          }
        case 72: break;
        case 49: 
          { System.out.println("finFilT");               return new Symbol (simbolosCHTML.finFil_t, yyline+1,yychar+1, new String (yytext()));
          }
        case 73: break;
        case 14: 
          { System.out.println("cjs");               return new Symbol (simbolosCHTML.cjs, yyline+1,yychar+1, new String (yytext()));
          }
        case 74: break;
        case 40: 
          { System.out.println("spinner");               return new Symbol (simbolosCHTML.spinner, yyline+1,yychar+1, new String (yytext()));
          }
        case 75: break;
        case 24: 
          { System.out.println("fondo");               return new Symbol (simbolosCHTML.fondo, yyline+1,yychar+1, new String (yytext()));
          }
        case 76: break;
        case 18: 
          { System.out.println("ruta");               return new Symbol (simbolosCHTML.ruta, yyline+1,yychar+1, new String (yytext()));
          }
        case 77: break;
        case 17: 
          { System.out.println("alto");               return new Symbol (simbolosCHTML.alto, yyline+1,yychar+1, new String (yytext()));
          }
        case 78: break;
        case 26: 
          { System.out.println("Boton");               return new Symbol (simbolosCHTML.boton, yyline+1,yychar+1, new String (yytext()));
          }
        case 79: break;
        case 19: 
          { System.out.println("chtml");              return new Symbol (simbolosCHTML.chtml, yyline+1,yychar+1, new String (yytext()));
          }
        case 80: break;
        case 4: 
          { System.out.println("menor");              return new Symbol (simbolosCHTML.menor, yyline+1,yychar+1, new String (yytext()));
          }
        case 81: break;
        case 56: 
          { System.out.println("finTitulo");               return new Symbol (simbolosCHTML.finTitulo, yyline+1,yychar+1, new String (yytext()));
          }
        case 82: break;
        case 23: 
          { System.out.println("filT");               return new Symbol (simbolosCHTML.fil_t, yyline+1,yychar+1, new String (yytext()));
          }
        case 83: break;
        case 22: 
          { System.out.println("tabla");               return new Symbol (simbolosCHTML.tabla, yyline+1,yychar+1, new String (yytext()));
          }
        case 84: break;
        case 41: 
          { System.out.println("Coment Multi");   /* se ignora*/
          }
        case 85: break;
        case 33: 
          { System.out.println("finCb");               return new Symbol (simbolosCHTML.finCb, yyline+1,yychar+1, new String (yytext()));
          }
        case 86: break;
        case 35: 
          { System.out.println("enlace");               return new Symbol (simbolosCHTML.enlace, yyline+1,yychar+1, new String (yytext()));
          }
        case 87: break;
        case 1: 
          { ErrorScan(yyline,yychar,yytext());
          }
        case 88: break;
        case 34: 
          { System.out.println("Imagen");               return new Symbol (simbolosCHTML.imagen, yyline+1,yychar+1, new String (yytext()));
          }
        case 89: break;
        case 3: 
          { System.out.println("id");                return new Symbol (simbolosCHTML.identificador, yyline+1,yychar+1, new String (yytext()));
          }
        case 90: break;
        case 58: 
          { System.out.println("finEnlace");               return new Symbol (simbolosCHTML.finEnlace, yyline+1,yychar+1, new String (yytext()));
          }
        case 91: break;
        case 10: 
          { System.out.println("cadeba");                return new Symbol (simbolosCHTML.cadena, yyline+1,yychar+1, new String (yytext()));
          }
        case 92: break;
        case 45: 
          { System.out.println("alineado");               return new Symbol (simbolosCHTML.alineado, yyline+1,yychar+1, new String (yytext()));
          }
        case 93: break;
        case 28: 
          { System.out.println("grupo");               return new Symbol (simbolosCHTML.grupo, yyline+1,yychar+1, new String (yytext()));
          }
        case 94: break;
        case 37: 
          { System.out.println("textoa");               return new Symbol (simbolosCHTML.texto_a, yyline+1,yychar+1, new String (yytext()));
          }
        case 95: break;
        case 15: 
          { System.out.println("ccss");               return new Symbol (simbolosCHTML.ccss, yyline+1,yychar+1, new String (yytext()));
          }
        case 96: break;
        case 63: 
          { System.out.println("finCajaTExto");               return new Symbol (simbolosCHTML.finCaja_texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 97: break;
        case 7: 
          { System.out.println("puntoComa");               return new Symbol (simbolosCHTML.puntoComaSimb, yyline+1,yychar+1, new String (yytext()));
          }
        case 98: break;
        case 51: 
          { System.out.println("finPanel");               return new Symbol (simbolosCHTML.finPanel, yyline+1,yychar+1, new String (yytext()));
          }
        case 99: break;
        case 21: 
          { System.out.println("textp");               return new Symbol (simbolosCHTML.texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 100: break;
        case 36: 
          { System.out.println("opcion");               return new Symbol (simbolosCHTML.opcion, yyline+1,yychar+1, new String (yytext()));
          }
        case 101: break;
        case 25: 
          { System.out.println("anchod");               return new Symbol (simbolosCHTML.ancho, yyline+1,yychar+1, new String (yytext()));
          }
        case 102: break;
        case 2: 
          { System.out.println("nu mero");                return new Symbol (simbolosCHTML.numero, yyline+1,yychar+1, new String (yytext()));
          }
        case 103: break;
        case 46: 
          { System.out.println("fincHtml");               return new Symbol (simbolosCHTML.finChtml, yyline+1,yychar+1, new String (yytext()));
          }
        case 104: break;
        case 39: 
          { System.out.println("derecho");               return new Symbol (simbolosCHTML.derecha, yyline+1,yychar+1, new String (yytext()));
          }
        case 105: break;
        case 13: 
          { System.out.println("identificador");               return new Symbol (simbolosCHTML.id, yyline+1,yychar+1, new String (yytext()));
          }
        case 106: break;
        case 11: 
          { System.out.println("ct");               return new Symbol (simbolosCHTML.ct, yyline+1,yychar+1, new String (yytext()));
          }
        case 107: break;
        case 16: 
          { System.out.println("caja");               return new Symbol (simbolosCHTML.caja, yyline+1,yychar+1, new String (yytext()));
          }
        case 108: break;
        case 59: 
          { System.out.println("finOpcion");               return new Symbol (simbolosCHTML.finOpcion, yyline+1,yychar+1, new String (yytext()));
          }
        case 109: break;
        case 47: 
          { System.out.println("finTexto");                  return new Symbol (simbolosCHTML.finTexto, yyline+1,yychar+1, new String (yytext()));
          }
        case 110: break;
        case 42: 
          { System.out.println("centrado");               return new Symbol (simbolosCHTML.centrado, yyline+1,yychar+1, new String (yytext()));
          }
        case 111: break;
        case 31: 
          { System.out.println("titulo");               return new Symbol (simbolosCHTML.titulo, yyline+1,yychar+1, new String (yytext()));
          }
        case 112: break;
        case 12: 
          { System.out.println("cb");               return new Symbol (simbolosCHTML.cb, yyline+1,yychar+1, new String (yytext()));
          }
        case 113: break;
        case 43: 
          { System.out.println("finCcss");               return new Symbol (simbolosCHTML.finCcss, yyline+1,yychar+1, new String (yytext()));
          }
        case 114: break;
        case 53: 
          { System.out.println("saltofin");               return new Symbol (simbolosCHTML.saltoFin, yyline+1,yychar+1, new String (yytext()));
          }
        case 115: break;
        case 44: 
          { System.out.println("finCaja");               return new Symbol (simbolosCHTML.finCaja, yyline+1,yychar+1, new String (yytext()));
          }
        case 116: break;
        case 38: 
          { System.out.println("finCjs");               return new Symbol (simbolosCHTML.finCjs, yyline+1,yychar+1, new String (yytext()));
          }
        case 117: break;
        case 6: 
          { System.out.println("igual");               return new Symbol (simbolosCHTML.igualSimb, yyline+1,yychar+1, new String (yytext()));
          }
        case 118: break;
        case 8: 
          { /* Se ignoran */
          }
        case 119: break;
        case 57: 
          { System.out.println("finImagen");               return new Symbol (simbolosCHTML.finImagen, yyline+1,yychar+1, new String (yytext()));
          }
        case 120: break;
        case 52: 
          { System.out.println("izquierdo");               return new Symbol (simbolosCHTML.izquierda, yyline+1,yychar+1, new String (yytext()));
          }
        case 121: break;
        case 50: 
          { System.out.println("finBoton");               return new Symbol (simbolosCHTML.finBoton, yyline+1,yychar+1, new String (yytext()));
          }
        case 122: break;
        case 30: 
          { System.out.println("cierpo");               return new Symbol (simbolosCHTML.cuerpo, yyline+1,yychar+1, new String (yytext()));
          }
        case 123: break;
        case 9: 
          { System.out.println("cadena2");                return new Symbol (simbolosCHTML.cadena2, yyline+1,yychar+1, new String (yytext()));
          }
        case 124: break;
        case 5: 
          { System.out.println("mayor");              return new Symbol (simbolosCHTML.mayor, yyline+1,yychar+1, new String (yytext()));
          }
        case 125: break;
        case 64: 
          { System.out.println("finEncabezado");               return new Symbol (simbolosCHTML.finEncabezado, yyline+1,yychar+1, new String (yytext()));
          }
        case 126: break;
        case 54: 
          { System.out.println("cajaTexto");               return new Symbol (simbolosCHTML.caja_texto, yyline+1,yychar+1, new String (yytext()));
          }
        case 127: break;
        case 61: 
          { System.out.println("finTextoa");               return new Symbol (simbolosCHTML.finTexto_a, yyline+1,yychar+1, new String (yytext()));
          }
        case 128: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolosCHTML.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
