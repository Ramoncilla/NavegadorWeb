/* The following code was generated by JFlex 1.6.1 */

/* ------------------------==: CODIGO DE USUARIO :==--------------------------*/

package proyecto1_201122872.AnalizadorCHTML;
    

import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>ScannerHTML.jflex</tt>
 */
public class scannerCHTML implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SIN_ETIQUETA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\7\1\52\1\10\1\10\22\0\1\10\1\5\1\4"+
    "\4\5\1\5\5\5\1\13\1\2\1\12\12\1\1\5\1\51\1\11"+
    "\1\50\1\14\2\5\1\27\1\30\1\15\1\32\1\26\1\22\1\43"+
    "\1\16\1\24\1\34\1\46\1\21\1\20\1\25\1\33\1\41\1\47"+
    "\1\40\1\36\1\17\1\37\1\44\1\6\1\42\1\6\1\31\4\5"+
    "\1\3\1\5\1\27\1\30\1\15\1\32\1\26\1\22\1\43\1\16"+
    "\1\24\1\34\1\46\1\21\1\20\1\25\1\33\1\41\1\47\1\40"+
    "\1\36\1\17\1\37\1\44\1\6\1\42\1\6\1\31\12\5\1\53"+
    "\76\5\154\0\2\23\57\0\1\5\35\0\1\35\u1e98\0\1\5\3\0"+
    "\1\5\13\0\1\52\1\52\6\0\1\5\371\0\1\45\uded2\0\1\5"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\22\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\3\3\1\1\6\3\1\1\5\3\1\10\1\11"+
    "\1\12\1\13\1\14\1\0\1\3\1\0\1\15\1\0"+
    "\2\3\1\16\3\3\1\17\2\3\1\0\3\3\1\0"+
    "\2\3\2\0\1\20\2\3\1\20\6\3\2\0\6\3"+
    "\1\2\3\0\2\3\1\0\3\3\2\21\1\3\1\0"+
    "\3\3\2\0\3\3\2\0\5\3\1\0\5\3\2\0"+
    "\6\3\1\0\2\22\1\3\1\0\2\3\1\23\1\3"+
    "\1\0\3\3\2\0\2\3\2\0\4\3\1\24\1\0"+
    "\4\3\1\0\1\3\2\0\2\3\1\25\3\3\1\0"+
    "\1\26\2\27\3\3\1\0\1\3\1\30\1\31\1\32"+
    "\11\0\1\32\1\33\2\0\4\3\1\0\1\3\1\34"+
    "\1\35\1\3\1\0\1\3\2\0\2\3\1\36\1\37"+
    "\1\40\1\0\2\3\1\41\2\42\1\3\2\0\1\43"+
    "\1\0\1\44\14\0\1\45\1\0\1\45\2\3\1\46"+
    "\1\0\2\3\2\47\2\0\1\3\1\0\2\3\1\50"+
    "\3\0\1\51\15\0\2\3\1\0\1\3\1\52\1\0"+
    "\2\53\1\54\1\55\1\3\1\56\1\0\1\57\15\0"+
    "\2\3\2\60\1\0\1\3\1\61\3\0\1\62\1\63"+
    "\1\64\3\0\1\65\2\0\1\66\2\67\1\3\1\70"+
    "\1\71\1\0\1\72\1\73\1\0\1\74\1\0\1\75"+
    "\1\76\1\0\1\77\1\0\1\100\1\0\1\101\4\0"+
    "\1\102\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\130\0\130"+
    "\0\u0108\0\130\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210"+
    "\0\u023c\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370"+
    "\0\u039c\0\u03c8\0\130\0\130\0\130\0\u03f4\0\130\0\u0420"+
    "\0\u044c\0\334\0\130\0\u0478\0\u04a4\0\u04d0\0\260\0\u04fc"+
    "\0\u0528\0\u0554\0\260\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630"+
    "\0\u065c\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u0738\0\130\0\u0764"+
    "\0\u0790\0\260\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8"+
    "\0\u0420\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c"+
    "\0\u0b58\0\u0b84\0\130\0\260\0\u0bb0\0\u0bdc\0\u0c08\0\u0c34"+
    "\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94"+
    "\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u0ef4"+
    "\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054"+
    "\0\u1080\0\u10ac\0\u10d8\0\u1104\0\130\0\260\0\u1130\0\u115c"+
    "\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290\0\u12bc"+
    "\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0\0\u141c"+
    "\0\u1448\0\u1474\0\260\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550"+
    "\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\260\0\u1684"+
    "\0\u16b0\0\u16dc\0\u1708\0\260\0\130\0\260\0\u1734\0\u1760"+
    "\0\u178c\0\u17b8\0\u17e4\0\u1810\0\260\0\130\0\u183c\0\u1868"+
    "\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\260"+
    "\0\260\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0"+
    "\0\u1afc\0\260\0\260\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8"+
    "\0\u1c04\0\u1c30\0\260\0\260\0\260\0\u1c5c\0\u1c88\0\u1cb4"+
    "\0\260\0\130\0\260\0\u1ce0\0\u1d0c\0\u1d38\0\130\0\u1d64"+
    "\0\130\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98"+
    "\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\130\0\u1fa0\0\260"+
    "\0\u1fcc\0\u1ff8\0\260\0\u2024\0\u2050\0\u207c\0\130\0\260"+
    "\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184\0\260\0\u21b0"+
    "\0\u21dc\0\u2208\0\130\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4"+
    "\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444"+
    "\0\u2470\0\u249c\0\u24c8\0\u24f4\0\260\0\u2520\0\130\0\260"+
    "\0\130\0\260\0\u254c\0\130\0\u2578\0\u25a4\0\u25d0\0\u25fc"+
    "\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730\0\u275c"+
    "\0\u2788\0\u27b4\0\u27e0\0\u280c\0\u2838\0\130\0\260\0\u2864"+
    "\0\u2890\0\130\0\u28bc\0\u28e8\0\u2914\0\u2940\0\130\0\130"+
    "\0\u296c\0\u2998\0\u29c4\0\130\0\u29f0\0\u2a1c\0\130\0\130"+
    "\0\260\0\u2a48\0\130\0\260\0\u2a74\0\130\0\130\0\u2aa0"+
    "\0\130\0\u2acc\0\130\0\130\0\u2af8\0\260\0\u2b24\0\130"+
    "\0\u2b50\0\130\0\u2b7c\0\u2ba8\0\u2bd4\0\u2c00\0\130\0\130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\3\1\5\1\7"+
    "\1\10\1\11\2\3\1\12\1\13\1\5\1\14\2\5"+
    "\1\15\1\16\1\17\1\5\1\20\1\21\1\22\1\5"+
    "\1\23\1\24\1\5\1\25\1\26\1\5\1\27\1\30"+
    "\1\5\1\31\1\32\1\3\2\5\1\33\1\34\2\0"+
    "\1\35\6\36\1\37\1\7\1\11\2\36\1\35\6\36"+
    "\1\35\11\36\1\35\7\36\1\35\4\36\1\0\1\36"+
    "\55\0\1\4\1\40\52\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\0\11\5\1\0\7\5\1\0"+
    "\2\5\4\0\4\42\1\43\47\42\12\0\1\44\42\0"+
    "\1\41\1\0\1\5\2\0\1\5\6\0\1\45\1\46"+
    "\1\47\1\5\1\50\1\5\1\0\2\5\1\51\1\52"+
    "\1\53\3\5\1\54\1\0\1\5\1\55\5\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\56\1\57\1\5\1\60\1\61\5\5\1\0"+
    "\7\5\1\0\2\5\5\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\62\1\63\6\5\1\64\1\5"+
    "\1\0\7\5\1\0\2\5\24\0\1\65\10\0\1\66"+
    "\1\67\22\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\3\5\1\70\2\5\1\0\5\5\1\71\1\72\2\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\1\5\1\73\7\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\4\5\1\74\1\5\1\0\1\5"+
    "\1\75\7\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\7\5"+
    "\1\76\1\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\2\5"+
    "\1\77\6\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\11\5"+
    "\1\0\3\5\1\100\3\5\1\0\2\5\33\0\1\101"+
    "\11\0\1\102\13\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\3\5\1\103\5\5\1\0\3\5"+
    "\1\104\3\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\0\1\5"+
    "\1\105\5\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\3\5\1\106\5\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\0\2\5"+
    "\1\107\4\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\3\5\1\110\5\5"+
    "\1\0\7\5\1\0\2\5\5\0\10\36\1\0\2\36"+
    "\1\0\6\36\1\0\11\36\1\0\7\36\1\0\4\36"+
    "\1\0\1\36\1\0\1\111\53\0\1\41\1\112\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\0\7\5"+
    "\1\0\2\5\16\0\1\113\42\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\114\1\115"+
    "\6\5\1\0\2\5\5\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\2\5\1\116\3\5\1\0\11\5\1\0"+
    "\7\5\1\0\2\5\5\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\117\1\120\10\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\1\5\1\121\7\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\10\5\1\122\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\11\5\1\123\1\124\6\5\1\0\2\5"+
    "\5\0\1\41\1\0\1\5\2\0\1\5\6\0\6\5"+
    "\1\0\2\5\1\125\6\5\1\0\7\5\1\0\2\5"+
    "\23\0\1\126\35\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\2\5\1\127\3\5\1\0\11\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\11\5\1\0\4\5\1\130\2\5"+
    "\1\0\2\5\5\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\4\5\1\131\4\5\1\0\7\5"+
    "\1\0\2\5\25\0\1\132\3\0\1\133\27\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\134\1\5"+
    "\1\0\1\5\1\135\7\5\1\0\7\5\1\0\2\5"+
    "\5\0\1\41\1\0\1\5\2\0\1\5\6\0\6\5"+
    "\1\0\1\5\1\136\7\5\1\0\7\5\1\0\2\5"+
    "\33\0\1\137\73\0\1\140\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\3\5\1\141\5\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\0\7\5"+
    "\1\0\1\5\1\142\5\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\1\143\3\5\1\144\1\5\1\0\11\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\2\5\1\145\3\5\1\146\1\147"+
    "\10\5\1\0\7\5\1\0\2\5\5\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\1\150\5\5\1\0\11\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\2\5\1\151\3\5\1\0\11\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\0\2\5"+
    "\1\152\4\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\1\153\5\5\1\0\11\5\1\0"+
    "\7\5\1\0\2\5\25\0\1\154\55\0\2\155\30\0"+
    "\1\41\1\0\1\5\2\0\1\5\6\0\4\5\1\156"+
    "\1\5\1\0\11\5\1\0\7\5\1\0\2\5\5\0"+
    "\1\41\1\0\1\5\2\0\1\5\6\0\6\5\1\155"+
    "\1\157\10\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\2\5\1\160\3\5"+
    "\1\0\11\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\1\5"+
    "\1\161\7\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\11\5"+
    "\1\0\1\5\1\162\5\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\163\1\5"+
    "\1\0\11\5\1\0\7\5\1\0\2\5\5\0\1\5"+
    "\65\0\1\164\75\0\2\165\16\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\165\1\166"+
    "\6\5\1\0\2\5\5\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\3\5\1\167\2\5\1\0\11\5\1\0"+
    "\7\5\1\0\2\5\21\0\1\170\37\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\1\171\5\5\1\0\11\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\2\5\1\172\3\5\1\0\11\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\3\5\1\173\5\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\0\2\5"+
    "\1\174\4\5\1\0\2\5\43\0\1\175\15\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\11\5"+
    "\1\0\1\5\1\176\5\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\2\5\1\177\3\5"+
    "\1\0\11\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\200\1\5"+
    "\1\0\11\5\1\0\7\5\1\0\2\5\7\0\1\201"+
    "\63\0\1\202\41\0\1\41\1\0\1\203\2\0\1\5"+
    "\6\0\6\5\1\0\11\5\1\0\7\5\1\0\2\5"+
    "\5\0\1\41\1\0\1\5\2\0\1\5\4\0\1\202"+
    "\1\0\6\5\1\0\11\5\1\0\7\5\1\0\2\5"+
    "\5\0\1\41\1\0\1\5\2\0\1\5\6\0\6\5"+
    "\1\0\6\5\1\204\2\5\1\0\7\5\1\0\2\5"+
    "\47\0\1\205\47\0\1\206\15\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\0\5\5"+
    "\1\207\1\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\0\1\5"+
    "\1\210\5\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\3\5\1\211\5\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\3\5\1\212\5\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\7\5\1\213\1\5"+
    "\1\0\7\5\1\0\2\5\31\0\1\214\27\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\1\5"+
    "\1\215\7\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\1\5\1\216\4\5"+
    "\1\0\11\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\7\5"+
    "\1\217\1\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\2\5"+
    "\1\220\6\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\221\1\222"+
    "\10\5\1\0\7\5\1\0\2\5\23\0\1\223\61\0"+
    "\1\224\27\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\2\5\1\225\3\5\1\0\11\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\1\5\1\226\7\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\3\5\1\227\5\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\2\5\1\230\6\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\11\5\1\0\3\5\1\231\3\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\7\5\1\232\1\5\1\0\7\5\1\0"+
    "\2\5\4\0\13\164\1\233\40\164\1\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\4\5\1\234\1\5\1\0"+
    "\11\5\1\0\7\5\1\0\2\5\51\0\2\235\6\0"+
    "\1\41\1\0\1\5\2\0\1\5\6\0\6\5\1\0"+
    "\11\5\1\0\7\5\1\235\1\236\1\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\11\5"+
    "\1\0\2\5\1\237\4\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\240\2\0\1\5\6\0\6\5\1\0\11\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\11\5\1\0\3\5"+
    "\1\241\3\5\1\0\2\5\25\0\1\242\33\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\243\1\5"+
    "\1\0\11\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\7\5"+
    "\1\244\1\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\3\5"+
    "\1\245\5\5\1\0\7\5\1\0\2\5\23\0\1\246"+
    "\51\0\1\247\1\0\1\250\2\0\1\251\2\252\1\0"+
    "\1\253\1\0\1\254\2\0\1\255\1\0\2\256\2\0"+
    "\1\257\13\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\2\5\1\260\3\5\1\0\11\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\7\5\1\261\1\5\1\0\7\5\1\0"+
    "\2\5\32\0\1\262\50\0\2\263\30\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\0\2\5\1\264"+
    "\6\5\1\0\7\5\1\0\2\5\5\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\263\1\265\10\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\6\5\1\0\4\5\1\266\4\5"+
    "\1\0\7\5\1\0\2\5\5\0\1\41\1\0\1\5"+
    "\2\0\1\5\6\0\1\267\5\5\1\0\11\5\1\0"+
    "\7\5\1\0\2\5\32\0\1\270\26\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\0\2\5\1\271"+
    "\6\5\1\0\7\5\1\0\2\5\5\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\0\7\5\1\272"+
    "\1\5\1\0\7\5\1\0\2\5\5\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\0\1\5\1\273"+
    "\7\5\1\0\7\5\1\0\2\5\5\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\1\274\5\5\1\0\11\5"+
    "\1\0\7\5\1\0\2\5\37\0\1\275\21\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\7\5"+
    "\1\276\1\5\1\0\7\5\1\0\2\5\37\0\1\277"+
    "\45\0\1\300\27\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\7\5\1\301\1\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\1\5\1\302\7\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\4\5\1\303\1\5\1\0\11\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\7\5\1\304\1\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\11\5\1\0\2\5\1\305\4\5"+
    "\1\0\2\5\4\0\12\164\1\306\1\233\40\164\1\0"+
    "\1\41\1\0\1\5\2\0\1\5\6\0\6\5\1\0"+
    "\3\5\1\307\5\5\1\0\7\5\1\0\2\5\5\0"+
    "\1\41\1\0\1\5\2\0\1\5\6\0\2\5\1\310"+
    "\3\5\1\0\11\5\1\0\7\5\1\0\2\5\5\0"+
    "\1\41\1\0\1\5\2\0\1\5\6\0\6\5\1\0"+
    "\7\5\1\311\1\5\1\0\7\5\1\0\2\5\37\0"+
    "\1\312\21\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\7\5\1\313\1\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\314\2\0\1\5\6\0"+
    "\6\5\1\0\11\5\1\0\7\5\1\0\2\5\21\0"+
    "\1\315\1\316\1\317\7\0\1\320\1\321\3\0\1\322"+
    "\2\0\1\323\37\0\2\324\1\0\1\325\1\326\47\0"+
    "\2\327\47\0\1\330\60\0\1\331\61\0\1\332\61\0"+
    "\1\333\53\0\1\334\41\0\1\335\51\0\1\336\54\0"+
    "\1\337\26\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\1\5\1\340\7\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\2\5\1\341\6\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\2\5\1\342\6\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\2\5\1\343\6\5\1\0\7\5\1\0"+
    "\2\5\33\0\1\344\25\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\0\3\5\1\345\5\5\1\0"+
    "\7\5\1\0\2\5\5\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\1\5\1\346\4\5\1\0\11\5\1\0"+
    "\7\5\1\0\2\5\31\0\1\347\27\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\0\1\5\1\350"+
    "\7\5\1\0\7\5\1\0\2\5\17\0\1\351\66\0"+
    "\1\352\26\0\1\41\1\0\1\5\2\0\1\5\4\0"+
    "\1\351\1\0\6\5\1\0\11\5\1\0\7\5\1\0"+
    "\2\5\5\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\2\5\1\353\6\5\1\0\7\5\1\0"+
    "\2\5\4\0\12\164\1\354\1\233\40\164\1\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\6\5"+
    "\1\355\2\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\2\5"+
    "\1\356\6\5\1\0\7\5\1\0\2\5\5\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\3\5"+
    "\1\357\5\5\1\0\7\5\1\0\2\5\41\0\2\360"+
    "\34\0\1\361\70\0\1\362\54\0\2\363\43\0\1\364"+
    "\44\0\1\365\76\0\1\366\41\0\1\367\44\0\1\370"+
    "\61\0\1\371\41\0\1\372\3\0\1\373\51\0\1\374"+
    "\51\0\1\375\61\0\2\376\54\0\1\377\66\0\1\u0100"+
    "\14\0\1\41\1\0\1\5\2\0\1\5\6\0\6\5"+
    "\1\0\11\5\1\0\2\5\1\u0101\4\5\1\0\2\5"+
    "\5\0\1\41\1\0\1\5\2\0\1\5\6\0\6\5"+
    "\1\0\5\5\1\u0102\3\5\1\0\7\5\1\0\2\5"+
    "\36\0\1\u0103\22\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\6\5\1\u0104\2\5\1\0\7\5"+
    "\1\0\2\5\5\0\1\41\1\0\1\5\2\0\1\5"+
    "\6\0\6\5\1\0\7\5\1\u0105\1\5\1\0\7\5"+
    "\1\0\2\5\26\0\1\u0106\71\0\1\u0107\14\0\1\41"+
    "\1\0\1\5\2\0\1\5\6\0\6\5\1\0\11\5"+
    "\1\0\2\5\1\u0108\4\5\1\0\2\5\4\0\13\164"+
    "\1\233\1\u0109\37\164\1\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\0\7\5\1\u010a\1\5\1\0"+
    "\7\5\1\0\2\5\5\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\0\11\5\1\0\4\5\1\u010b"+
    "\2\5\1\0\2\5\41\0\2\u010c\35\0\1\u010d\62\0"+
    "\1\u010e\64\0\1\u010f\52\0\1\u0110\33\0\1\u0111\55\0"+
    "\1\u0112\35\0\1\u0113\113\0\1\u0114\37\0\1\u0115\53\0"+
    "\1\u0116\57\0\1\u0117\43\0\2\u0118\54\0\1\u0119\54\0"+
    "\1\u011a\57\0\1\u011b\22\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\0\6\5\1\u011c\2\5\1\0"+
    "\7\5\1\0\2\5\5\0\1\41\1\0\1\5\2\0"+
    "\1\5\6\0\6\5\1\0\3\5\1\u011d\5\5\1\0"+
    "\7\5\1\0\2\5\37\0\1\u011e\21\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\0\7\5\1\u011f"+
    "\1\5\1\0\7\5\1\0\2\5\27\0\2\u0120\30\0"+
    "\1\41\1\0\1\5\2\0\1\5\6\0\2\5\1\u0121"+
    "\3\5\1\0\11\5\1\0\7\5\1\0\2\5\25\0"+
    "\1\u0122\35\0\1\u0123\111\0\1\u0124\33\0\1\u0125\65\0"+
    "\1\u0126\47\0\1\u0127\43\0\1\u0128\62\0\1\u0129\55\0"+
    "\1\u012a\40\0\1\u012b\63\0\1\u012c\61\0\1\u012d\45\0"+
    "\1\u012e\47\0\1\u012f\61\0\1\u0130\25\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\0\3\5\1\u0131"+
    "\5\5\1\0\7\5\1\0\2\5\5\0\1\41\1\0"+
    "\1\5\2\0\1\5\6\0\6\5\1\0\6\5\1\u0132"+
    "\2\5\1\0\7\5\1\0\2\5\31\0\1\u0133\27\0"+
    "\1\41\1\0\1\5\2\0\1\5\6\0\6\5\1\0"+
    "\7\5\1\u0134\1\5\1\0\7\5\1\0\2\5\23\0"+
    "\1\u0135\67\0\1\u0136\53\0\1\u0137\23\0\1\u0138\75\0"+
    "\1\u0139\54\0\1\u013a\53\0\1\u013b\52\0\1\u013c\54\0"+
    "\1\u013d\26\0\1\41\1\0\1\5\2\0\1\5\6\0"+
    "\6\5\1\0\7\5\1\u013e\1\5\1\0\7\5\1\0"+
    "\2\5\32\0\1\u013f\54\0\1\u0140\55\0\1\u0141\62\0"+
    "\1\u0142\55\0\1\u0143\40\0\1\u0144\43\0\1\u0145\66\0"+
    "\1\u0146\54\0\1\u0147\53\0\1\u0148\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11308];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\2\11\1\1\1\11\20\1\3\11"+
    "\1\1\1\11\1\0\1\1\1\0\1\11\1\0\11\1"+
    "\1\0\3\1\1\0\2\1\2\0\1\11\11\1\2\0"+
    "\7\1\3\0\2\1\1\0\3\1\1\11\2\1\1\0"+
    "\3\1\2\0\3\1\2\0\5\1\1\0\5\1\2\0"+
    "\6\1\1\0\1\11\2\1\1\0\4\1\1\0\3\1"+
    "\2\0\2\1\2\0\5\1\1\0\4\1\1\0\1\1"+
    "\2\0\6\1\1\0\1\1\1\11\4\1\1\0\3\1"+
    "\1\11\11\0\2\1\2\0\4\1\1\0\4\1\1\0"+
    "\1\1\2\0\5\1\1\0\3\1\1\11\2\1\2\0"+
    "\1\11\1\0\1\11\14\0\1\11\1\0\4\1\1\0"+
    "\2\1\1\11\1\1\2\0\1\1\1\0\3\1\3\0"+
    "\1\11\15\0\2\1\1\0\2\1\1\0\1\11\1\1"+
    "\1\11\2\1\1\11\1\0\1\1\15\0\2\1\1\11"+
    "\1\1\1\0\1\1\1\11\3\0\1\1\2\11\3\0"+
    "\1\11\2\0\2\11\2\1\1\11\1\1\1\0\2\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\1\1\0\1\11"+
    "\1\0\1\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String cadena;
/* ------------------------==: METODO DE ERROR LEXICO :==---------------------*/
    private void ErrorScan(int linea, int columna, String valor) {
        System.out.println("Error Lexico Iden: " + valor + ", " + linea + ", " + columna);
        cadena += "<tr>"
                + "<td><center><b>" + valor + "</b></center></td>"
                + "<td><center><b>" + linea + "</b></center></td>"
                + "<td><center><b>" + columna + "</b></center></td>"
                + "</tr>";
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerCHTML(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 234) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(simbolosCHTML.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ErrorScan(yyline,yychar,yytext());
            }
          case 68: break;
          case 2: 
            { System.out.println("nu mero");                return new Symbol (simbolosCHTML.numero, yyline+1,yychar+1, new String (yytext()));
            }
          case 69: break;
          case 3: 
            { System.out.println("id");                return new Symbol (simbolosCHTML.identificador, yyline+1,yychar+1, new String (yytext()));
            }
          case 70: break;
          case 4: 
            { /*Saltos de linea, ignorados*/
            }
          case 71: break;
          case 5: 
            { /*Espacios en blanco, ignorados*/
            }
          case 72: break;
          case 6: 
            { System.out.println("menor");  yybegin(YYINITIAL);            return new Symbol (simbolosCHTML.menor, yyline+1,yychar+1, new String (yytext()));
            }
          case 73: break;
          case 7: 
            { System.out.println("mayor");  yybegin(SIN_ETIQUETA);            return new Symbol (simbolosCHTML.mayor, yyline+1,yychar+1, new String (yytext()));
            }
          case 74: break;
          case 8: 
            { System.out.println("igual");               return new Symbol (simbolosCHTML.igualSimb, yyline+1,yychar+1, new String (yytext()));
            }
          case 75: break;
          case 9: 
            { System.out.println("puntoComa");               return new Symbol (simbolosCHTML.puntoComaSimb, yyline+1,yychar+1, new String (yytext()));
            }
          case 76: break;
          case 10: 
            { String errLex = "Error léxico, caracter irreconocible: '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+yycolumn;
						  System.out.println(errLex);
            }
          case 77: break;
          case 11: 
            { System.out.println("cadena2 "+yytext() );  return new Symbol (simbolosCHTML.cadena2, yyline+1,yychar+1, new String (yytext()));
            }
          case 78: break;
          case 12: 
            { /*espacios, ignorados*/
            }
          case 79: break;
          case 13: 
            { System.out.println("cadeba");                return new Symbol (simbolosCHTML.cadena, yyline+1,yychar+1, new String (yytext()));
            }
          case 80: break;
          case 14: 
            { System.out.println("ct");               return new Symbol (simbolosCHTML.ct, yyline+1,yychar+1, new String (yytext()));
            }
          case 81: break;
          case 15: 
            { System.out.println("cb");               return new Symbol (simbolosCHTML.cb, yyline+1,yychar+1, new String (yytext()));
            }
          case 82: break;
          case 16: 
            { System.out.println("identificador");               return new Symbol (simbolosCHTML.id, yyline+1,yychar+1, new String (yytext()));
            }
          case 83: break;
          case 17: 
            { System.out.println("cjs");               return new Symbol (simbolosCHTML.cjs, yyline+1,yychar+1, new String (yytext()));
            }
          case 84: break;
          case 18: 
            { System.out.println("ccss");               return new Symbol (simbolosCHTML.ccss, yyline+1,yychar+1, new String (yytext()));
            }
          case 85: break;
          case 19: 
            { System.out.println("caja");               return new Symbol (simbolosCHTML.caja, yyline+1,yychar+1, new String (yytext()));
            }
          case 86: break;
          case 20: 
            { System.out.println("alto");               return new Symbol (simbolosCHTML.alto, yyline+1,yychar+1, new String (yytext()));
            }
          case 87: break;
          case 21: 
            { System.out.println("ruta");               return new Symbol (simbolosCHTML.ruta, yyline+1,yychar+1, new String (yytext()));
            }
          case 88: break;
          case 22: 
            { System.out.println("chtml");              return new Symbol (simbolosCHTML.chtml, yyline+1,yychar+1, new String (yytext()));
            }
          case 89: break;
          case 23: 
            { System.out.println("click");               return new Symbol (simbolosCHTML.click, yyline+1,yychar+1, new String (yytext()));
            }
          case 90: break;
          case 24: 
            { System.out.println("textp");               return new Symbol (simbolosCHTML.texto, yyline+1,yychar+1, new String (yytext()));
            }
          case 91: break;
          case 25: 
            { System.out.println("tabla");               return new Symbol (simbolosCHTML.tabla, yyline+1,yychar+1, new String (yytext()));
            }
          case 92: break;
          case 26: 
            { System.out.println("filT");               return new Symbol (simbolosCHTML.fil_t, yyline+1,yychar+1, new String (yytext()));
            }
          case 93: break;
          case 27: 
            { System.out.println("fondo");               return new Symbol (simbolosCHTML.fondo, yyline+1,yychar+1, new String (yytext()));
            }
          case 94: break;
          case 28: 
            { System.out.println("anchod");               return new Symbol (simbolosCHTML.ancho, yyline+1,yychar+1, new String (yytext()));
            }
          case 95: break;
          case 29: 
            { System.out.println("Boton");               return new Symbol (simbolosCHTML.boton, yyline+1,yychar+1, new String (yytext()));
            }
          case 96: break;
          case 30: 
            { System.out.println("panel");               return new Symbol (simbolosCHTML.panel, yyline+1,yychar+1, new String (yytext()));
            }
          case 97: break;
          case 31: 
            { System.out.println("grupo");               return new Symbol (simbolosCHTML.grupo, yyline+1,yychar+1, new String (yytext()));
            }
          case 98: break;
          case 32: 
            { System.out.println("valor");               return new Symbol (simbolosCHTML.valor, yyline+1,yychar+1, new String (yytext()));
            }
          case 99: break;
          case 33: 
            { System.out.println("cierpo");               return new Symbol (simbolosCHTML.cuerpo, yyline+1,yychar+1, new String (yytext()));
            }
          case 100: break;
          case 34: 
            { System.out.println("titulo");               return new Symbol (simbolosCHTML.titulo, yyline+1,yychar+1, new String (yytext()));
            }
          case 101: break;
          case 35: 
            { System.out.println("finCt");               return new Symbol (simbolosCHTML.finCt, yyline+1,yychar+1, new String (yytext()));
            }
          case 102: break;
          case 36: 
            { System.out.println("finCb");               return new Symbol (simbolosCHTML.finCb, yyline+1,yychar+1, new String (yytext()));
            }
          case 103: break;
          case 37: 
            { System.out.println("Imagen");               return new Symbol (simbolosCHTML.imagen, yyline+1,yychar+1, new String (yytext()));
            }
          case 104: break;
          case 38: 
            { System.out.println("enlace");               return new Symbol (simbolosCHTML.enlace, yyline+1,yychar+1, new String (yytext()));
            }
          case 105: break;
          case 39: 
            { System.out.println("opcion");               return new Symbol (simbolosCHTML.opcion, yyline+1,yychar+1, new String (yytext()));
            }
          case 106: break;
          case 40: 
            { System.out.println("textoa");               return new Symbol (simbolosCHTML.texto_a, yyline+1,yychar+1, new String (yytext()));
            }
          case 107: break;
          case 41: 
            { System.out.println("finCjs");               return new Symbol (simbolosCHTML.finCjs, yyline+1,yychar+1, new String (yytext()));
            }
          case 108: break;
          case 42: 
            { System.out.println("derecho");               return new Symbol (simbolosCHTML.derecha, yyline+1,yychar+1, new String (yytext()));
            }
          case 109: break;
          case 43: 
            { System.out.println("spinner");               return new Symbol (simbolosCHTML.spinner, yyline+1,yychar+1, new String (yytext()));
            }
          case 110: break;
          case 44: 
            { /*Comentario Multi Línea Ignorado*/
            }
          case 111: break;
          case 45: 
            { System.out.println("centrado");               return new Symbol (simbolosCHTML.centrado, yyline+1,yychar+1, new String (yytext()));
            }
          case 112: break;
          case 46: 
            { System.out.println("finCcss");               return new Symbol (simbolosCHTML.finCcss, yyline+1,yychar+1, new String (yytext()));
            }
          case 113: break;
          case 47: 
            { System.out.println("finCaja");               return new Symbol (simbolosCHTML.finCaja, yyline+1,yychar+1, new String (yytext()));
            }
          case 114: break;
          case 48: 
            { System.out.println("alineado");               return new Symbol (simbolosCHTML.alineado, yyline+1,yychar+1, new String (yytext()));
            }
          case 115: break;
          case 49: 
            { System.out.println("fincHtml");               return new Symbol (simbolosCHTML.finChtml, yyline+1,yychar+1, new String (yytext()));
            }
          case 116: break;
          case 50: 
            { System.out.println("finTexto");                  return new Symbol (simbolosCHTML.finTexto, yyline+1,yychar+1, new String (yytext()));
            }
          case 117: break;
          case 51: 
            { System.out.println("finTabla");               return new Symbol (simbolosCHTML.finTabla, yyline+1,yychar+1, new String (yytext()));
            }
          case 118: break;
          case 52: 
            { System.out.println("finFilT");               return new Symbol (simbolosCHTML.finFil_t, yyline+1,yychar+1, new String (yytext()));
            }
          case 119: break;
          case 53: 
            { System.out.println("finBoton");               return new Symbol (simbolosCHTML.finBoton, yyline+1,yychar+1, new String (yytext()));
            }
          case 120: break;
          case 54: 
            { System.out.println("finPanel");               return new Symbol (simbolosCHTML.finPanel, yyline+1,yychar+1, new String (yytext()));
            }
          case 121: break;
          case 55: 
            { System.out.println("izquierdo");               return new Symbol (simbolosCHTML.izquierda, yyline+1,yychar+1, new String (yytext()));
            }
          case 122: break;
          case 56: 
            { System.out.println("saltofin");               return new Symbol (simbolosCHTML.saltoFin, yyline+1,yychar+1, new String (yytext()));
            }
          case 123: break;
          case 57: 
            { System.out.println("cajaTexto");               return new Symbol (simbolosCHTML.caja_texto, yyline+1,yychar+1, new String (yytext()));
            }
          case 124: break;
          case 58: 
            { System.out.println("finCuerpo");               return new Symbol (simbolosCHTML.finCuerpo, yyline+1,yychar+1, new String (yytext()));
            }
          case 125: break;
          case 59: 
            { System.out.println("finTitulo");               return new Symbol (simbolosCHTML.finTitulo, yyline+1,yychar+1, new String (yytext()));
            }
          case 126: break;
          case 60: 
            { System.out.println("finImagen");               return new Symbol (simbolosCHTML.finImagen, yyline+1,yychar+1, new String (yytext()));
            }
          case 127: break;
          case 61: 
            { System.out.println("finEnlace");               return new Symbol (simbolosCHTML.finEnlace, yyline+1,yychar+1, new String (yytext()));
            }
          case 128: break;
          case 62: 
            { System.out.println("finOpcion");               return new Symbol (simbolosCHTML.finOpcion, yyline+1,yychar+1, new String (yytext()));
            }
          case 129: break;
          case 63: 
            { System.out.println("encabezado");                 return new Symbol (simbolosCHTML.encabezado, yyline+1,yychar+1, new String (yytext()));
            }
          case 130: break;
          case 64: 
            { System.out.println("finTextoa");               return new Symbol (simbolosCHTML.finTexto_a, yyline+1,yychar+1, new String (yytext()));
            }
          case 131: break;
          case 65: 
            { System.out.println("finSpinner");               return new Symbol (simbolosCHTML.finSpinner, yyline+1,yychar+1, new String (yytext()));
            }
          case 132: break;
          case 66: 
            { System.out.println("finCajaTExto");               return new Symbol (simbolosCHTML.finCaja_texto, yyline+1,yychar+1, new String (yytext()));
            }
          case 133: break;
          case 67: 
            { System.out.println("finEncabezado");               return new Symbol (simbolosCHTML.finEncabezado, yyline+1,yychar+1, new String (yytext()));
            }
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
