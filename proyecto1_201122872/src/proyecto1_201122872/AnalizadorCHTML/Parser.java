
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Mar 07 16:58:34 CST 2018
//----------------------------------------------------

package proyecto1_201122872.AnalizadorCHTML;

import proyecto1_201122872.AnalizadorCHTML.simbolosCHTML;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;
import proyecto1_201122872.CHTML.ElemetoPropiedad.*;
import proyecto1_201122872.CHTML.BODY.*;
import proyecto1_201122872.CHTML.Etiqueta;
import proyecto1_201122872.CHTML.Chtml;
import proyecto1_201122872.CHTML.Opcion;
import proyecto1_201122872.CHTML.listaElementos;
import proyecto1_201122872.CHTML.HEADER.*;
import Errores.ErrorS;
import static proyecto1_201122872.Proyecto1_201122872.paginaActual;

/** CUP v0.10k generated parser.
  * @version Wed Mar 07 16:58:34 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\004\000\002\003\003\000\002\020" +
    "\006\000\002\020\003\000\002\021\006\000\002\022\006" +
    "\000\002\023\006\000\002\012\006\000\002\013\006\000" +
    "\002\014\006\000\002\015\006\000\002\016\006\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\025\004\000\002\025\003" +
    "\000\002\107\003\000\002\107\003\000\002\110\004\000" +
    "\002\110\003\000\002\106\003\000\002\106\003\000\002" +
    "\103\004\000\002\103\003\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\104\004\000\002\104\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\100\004\000\002\100\003\000\002\101\003\000\002" +
    "\101\003\000\002\102\003\000\002\102\004\000\002\053" +
    "\005\000\002\053\006\000\002\054\005\000\002\055\005" +
    "\000\002\055\006\000\002\056\005\000\002\057\005\000" +
    "\002\057\006\000\002\060\005\000\002\061\006\000\002" +
    "\061\005\000\002\062\005\000\002\033\005\000\002\033" +
    "\006\000\002\034\005\000\002\035\005\000\002\035\006" +
    "\000\002\036\005\000\002\041\005\000\002\041\006\000" +
    "\002\042\005\000\002\037\005\000\002\037\006\000\002" +
    "\040\005\000\002\043\005\000\002\043\006\000\002\044" +
    "\005\000\002\075\005\000\002\075\006\000\002\076\005" +
    "\000\002\045\005\000\002\045\006\000\002\046\005\000" +
    "\002\047\006\000\002\047\005\000\002\050\005\000\002" +
    "\051\005\000\002\051\006\000\002\052\005\000\002\063" +
    "\006\000\002\063\005\000\002\064\005\000\002\065\005" +
    "\000\002\065\006\000\002\066\005\000\002\071\006\000" +
    "\002\071\005\000\002\072\005\000\002\070\005\000\002" +
    "\077\005\000\002\073\006\000\002\073\005\000\002\074" +
    "\005\000\002\027\005\000\002\027\006\000\002\030\005" +
    "\000\002\031\005\000\002\031\006\000\002\032\005\000" +
    "\002\113\006\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\010\004\000\002\010\003\000\002\114" +
    "\005\000\002\114\004\000\002\115\004\000\002\116\004" +
    "\000\002\117\005\000\002\117\004\000\002\120\004\000" +
    "\002\120\005\000\002\121\005\000\002\121\004\000\002" +
    "\122\005\000\002\122\004\000\002\123\005\000\002\123" +
    "\004\000\002\124\005\000\002\124\004\000\002\125\005" +
    "\000\002\125\004\000\002\126\005\000\002\126\004\000" +
    "\002\067\005\000\002\067\006\000\002\151\003\000\002" +
    "\151\003\000\002\112\006\000\002\026\004\000\002\026" +
    "\003\000\002\132\005\000\002\132\004\000\002\133\004" +
    "\000\002\133\003\000\002\127\005\000\002\127\004\000" +
    "\002\130\005\000\002\130\004\000\002\131\003\000\002" +
    "\136\005\000\002\136\004\000\002\144\005\000\002\144" +
    "\004\000\002\143\005\000\002\143\004\000\002\142\003" +
    "\000\002\142\003\000\002\140\004\000\002\140\003\000" +
    "\002\141\005\000\002\141\004\000\002\147\004\000\002" +
    "\147\003\000\002\137\005\000\002\137\004\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\134\003\000\002\134\003\000\002" +
    "\134\003\000\002\135\004\000\002\135\003\000\002\145" +
    "\003\000\002\145\003\000\002\145\003\000\002\146\004" +
    "\000\002\146\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\004\004\006\001\002\000\004\002\000\001" +
    "\002\000\004\004\052\001\002\000\004\007\011\001\002" +
    "\000\004\002\010\001\002\000\004\002\001\001\002\000" +
    "\016\005\023\060\012\061\024\062\026\063\014\064\022" +
    "\001\002\000\004\074\045\001\002\000\030\003\ufff4\005" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\066\ufff4\067\ufff4\070\ufff4\001\002\000\004\074\042\001" +
    "\002\000\016\005\uffef\060\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\001\002\000\030\003\ufff5\005\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5" +
    "\070\ufff5\001\002\000\030\003\ufff2\005\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\070\ufff2\001\002\000\030\003\ufff3\005\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\001\002\000\016\005\041\060\012\061\024\062" +
    "\026\063\014\064\022\001\002\000\004\074\035\001\002" +
    "\000\004\004\uffa0\001\002\000\004\074\032\001\002\000" +
    "\030\003\ufff1\005\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\001\002\000" +
    "\004\074\027\001\002\000\004\077\030\001\002\000\004" +
    "\075\031\001\002\000\030\003\ufff8\005\ufff8\060\ufff8\061" +
    "\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8" +
    "\070\ufff8\001\002\000\004\077\033\001\002\000\004\075" +
    "\034\001\002\000\030\003\ufff9\005\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070" +
    "\ufff9\001\002\000\004\077\036\001\002\000\004\075\037" +
    "\001\002\000\030\003\ufff6\005\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\001\002\000\016\005\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\001\002\000\004\004\uff9f\001\002\000\004" +
    "\077\043\001\002\000\004\075\044\001\002\000\030\003" +
    "\ufff7\005\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\066\ufff7\067\ufff7\070\ufff7\001\002\000\004\077" +
    "\046\001\002\000\004\075\047\001\002\000\030\003\ufffa" +
    "\005\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\001\002\000\004\004\u011f" +
    "\001\002\000\004\004\057\001\002\000\004\011\053\001" +
    "\002\000\016\005\055\060\012\061\024\062\026\063\014" +
    "\064\022\001\002\000\016\005\056\060\012\061\024\062" +
    "\026\063\014\064\022\001\002\000\004\004\uffa3\001\002" +
    "\000\004\004\uffa2\001\002\000\004\017\u0112\001\002\000" +
    "\004\004\u010e\001\002\000\004\004\100\001\002\000\004" +
    "\004\u0109\001\002\000\006\004\u0103\006\u0104\001\002\000" +
    "\004\004\uff5a\001\002\000\006\004\375\006\376\001\002" +
    "\000\004\004\uff62\001\002\000\006\004\367\006\370\001" +
    "\002\000\006\004\361\006\362\001\002\000\004\004\uff61" +
    "\001\002\000\004\004\uff5e\001\002\000\004\004\uff91\001" +
    "\002\000\004\004\uff5f\001\002\000\006\004\352\006\354" +
    "\001\002\000\004\004\274\001\002\000\004\004\uff59\001" +
    "\002\000\032\020\175\023\165\025\172\027\200\031\171" +
    "\033\173\035\166\045\167\047\174\051\170\055\176\057" +
    "\177\001\002\000\004\004\uff60\001\002\000\004\004\134" +
    "\001\002\000\004\004\uff74\001\002\000\004\004\uff57\001" +
    "\002\000\006\004\125\006\126\001\002\000\004\004\uff63" +
    "\001\002\000\004\004\uff5d\001\002\000\004\004\uff5b\001" +
    "\002\000\004\004\uff5c\001\002\000\006\004\116\006\117" +
    "\001\002\000\004\004\100\001\002\000\004\004\uff90\001" +
    "\002\000\004\004\uff58\001\002\000\004\056\122\001\002" +
    "\000\004\004\116\001\002\000\004\004\uff75\001\002\000" +
    "\004\004\uff76\001\002\000\004\005\123\001\002\000\004" +
    "\004\uffa4\001\002\000\004\004\uff8e\001\002\000\004\026" +
    "\130\001\002\000\004\004\125\001\002\000\004\004\uff8f" +
    "\001\002\000\004\005\131\001\002\000\004\004\uffbe\001" +
    "\002\000\004\004\uff79\001\002\000\004\004\uff77\001\002" +
    "\000\006\052\150\053\147\001\002\000\004\004\134\001" +
    "\002\000\006\004\137\006\141\001\002\000\004\054\143" +
    "\001\002\000\004\004\uff7b\001\002\000\004\004\137\001" +
    "\002\000\004\004\uff7c\001\002\000\004\005\144\001\002" +
    "\000\004\004\uffa8\001\002\000\004\004\uff7a\001\002\000" +
    "\004\004\uff78\001\002\000\020\005\157\060\012\061\024" +
    "\062\026\063\014\064\022\065\153\001\002\000\004\005" +
    "\151\001\002\000\004\004\uffa9\001\002\000\020\005\164" +
    "\060\012\061\024\062\026\063\014\064\022\065\153\001" +
    "\002\000\004\074\160\001\002\000\020\005\uff81\060\uff81" +
    "\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\001\002\000" +
    "\020\005\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80" +
    "\065\uff80\001\002\000\020\005\uff7d\060\uff7d\061\uff7d\062" +
    "\uff7d\063\uff7d\064\uff7d\065\uff7d\001\002\000\006\004\uff83" +
    "\006\uff83\001\002\000\004\077\161\001\002\000\004\075" +
    "\162\001\002\000\020\005\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\064\uff7f\065\uff7f\001\002\000\020\005\uff7e\060" +
    "\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e\001\002" +
    "\000\006\004\uff82\006\uff82\001\002\000\016\005\266\060" +
    "\012\061\024\062\026\063\014\064\022\001\002\000\016" +
    "\005\263\060\012\061\024\062\026\063\014\064\022\001" +
    "\002\000\016\005\260\060\012\061\024\062\026\063\014" +
    "\064\022\001\002\000\020\005\254\060\012\061\024\062" +
    "\026\063\014\064\022\066\207\001\002\000\024\003\210" +
    "\005\246\060\012\061\024\062\026\063\014\064\022\066" +
    "\207\067\201\001\002\000\016\005\243\060\012\061\024" +
    "\062\026\063\014\064\022\001\002\000\024\003\210\005" +
    "\237\060\012\061\024\062\026\063\014\064\022\066\207" +
    "\067\201\001\002\000\016\005\230\060\012\061\024\062" +
    "\026\063\014\064\022\001\002\000\004\005\226\001\002" +
    "\000\016\005\224\060\012\061\024\062\026\063\014\064" +
    "\022\001\002\000\004\005\222\001\002\000\024\003\210" +
    "\005\211\060\012\061\024\062\026\063\014\064\022\066" +
    "\207\067\201\001\002\000\004\074\217\001\002\000\024" +
    "\003\uffdf\005\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\066\uffdf\067\uffdf\001\002\000\024\003\uffdd\005\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\066\uffdd\067" +
    "\uffdd\001\002\000\024\003\uffe0\005\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0\001\002\000" +
    "\024\003\uffe1\005\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\064\uffe1\066\uffe1\067\uffe1\001\002\000\024\003\210\005" +
    "\216\060\012\061\024\062\026\063\014\064\022\066\207" +
    "\067\201\001\002\000\004\074\212\001\002\000\024\003" +
    "\ufffe\005\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe" +
    "\066\ufffe\067\ufffe\001\002\000\006\004\uffba\006\uffba\001" +
    "\002\000\004\077\213\001\002\000\004\075\214\001\002" +
    "\000\024\003\ufffd\005\ufffd\060\ufffd\061\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\066\ufffd\067\ufffd\001\002\000\024\003\uffde" +
    "\005\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\066" +
    "\uffde\067\uffde\001\002\000\006\004\uffb9\006\uffb9\001\002" +
    "\000\004\077\220\001\002\000\004\075\221\001\002\000" +
    "\024\003\uffff\005\uffff\060\uffff\061\uffff\062\uffff\063\uffff" +
    "\064\uffff\066\uffff\067\uffff\001\002\000\004\004\uffa7\001" +
    "\002\000\016\005\225\060\012\061\024\062\026\063\014" +
    "\064\022\001\002\000\006\004\uffa5\006\uffa5\001\002\000" +
    "\006\004\uffa6\006\uffa6\001\002\000\004\004\uffc4\001\002" +
    "\000\016\005\231\060\012\061\024\062\026\063\014\064" +
    "\022\001\002\000\006\004\uffae\006\uffae\001\002\000\006" +
    "\004\uffad\006\uffad\001\002\000\024\003\uffe4\005\uffe4\060" +
    "\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\066\uffe4\067\uffe4" +
    "\001\002\000\024\003\uffe2\005\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\063\uffe2\064\uffe2\066\uffe2\067\uffe2\001\002\000\024" +
    "\003\uffe5\005\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\066\uffe5\067\uffe5\001\002\000\024\003\210\005\241" +
    "\060\012\061\024\062\026\063\014\064\022\066\207\067" +
    "\201\001\002\000\024\003\uffe6\005\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\066\uffe6\067\uffe6\001\002\000" +
    "\006\004\uffb4\006\uffb4\001\002\000\024\003\uffe3\005\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\066\uffe3\067" +
    "\uffe3\001\002\000\006\004\uffb3\006\uffb3\001\002\000\016" +
    "\005\244\060\012\061\024\062\026\063\014\064\022\001" +
    "\002\000\006\004\uffc0\006\uffc0\001\002\000\006\004\uffbf" +
    "\006\uffbf\001\002\000\024\003\210\005\247\060\012\061" +
    "\024\062\026\063\014\064\022\066\207\067\201\001\002" +
    "\000\006\004\uffb6\006\uffb6\001\002\000\006\004\uffb7\006" +
    "\uffb7\001\002\000\020\005\uffe7\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\066\uffe7\001\002\000\020\005\256\060" +
    "\012\061\024\062\026\063\014\064\022\066\207\001\002" +
    "\000\020\005\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\066\uffe9\001\002\000\020\005\uffea\060\uffea\061\uffea" +
    "\062\uffea\063\uffea\064\uffea\066\uffea\001\002\000\004\004" +
    "\uffaa\001\002\000\020\005\uffe8\060\uffe8\061\uffe8\062\uffe8" +
    "\063\uffe8\064\uffe8\066\uffe8\001\002\000\004\004\uffab\001" +
    "\002\000\016\005\261\060\012\061\024\062\026\063\014" +
    "\064\022\001\002\000\006\004\uffb0\006\uffb0\001\002\000" +
    "\006\004\uffb1\006\uffb1\001\002\000\016\005\264\060\012" +
    "\061\024\062\026\063\014\064\022\001\002\000\004\004" +
    "\uffd8\001\002\000\004\004\uffd7\001\002\000\016\005\267" +
    "\060\012\061\024\062\026\063\014\064\022\001\002\000" +
    "\004\004\uffbd\001\002\000\004\004\uffbc\001\002\000\004" +
    "\004\uff64\001\002\000\004\004\uff66\001\002\000\004\004" +
    "\274\001\002\000\004\004\310\001\002\000\006\036\275" +
    "\037\276\001\002\000\004\005\302\001\002\000\016\005" +
    "\300\060\012\061\024\062\026\063\014\064\022\001\002" +
    "\000\016\005\301\060\012\061\024\062\026\063\014\064" +
    "\022\001\002\000\004\004\uffce\001\002\000\004\004\uffcf" +
    "\001\002\000\004\004\uffd6\001\002\000\004\004\310\001" +
    "\002\000\004\004\uff6c\001\002\000\004\004\uff6d\001\002" +
    "\000\006\004\342\006\316\001\002\000\004\004\uff68\001" +
    "\002\000\010\040\330\041\326\043\327\001\002\000\004" +
    "\004\uff6a\001\002\000\006\004\317\006\316\001\002\000" +
    "\006\004\uff56\006\uff56\001\002\000\004\004\uff70\001\002" +
    "\000\006\004\317\006\316\001\002\000\006\004\uff54\006" +
    "\uff54\001\002\000\010\027\200\031\171\044\322\001\002" +
    "\000\006\004\uff52\006\uff52\001\002\000\006\004\uff55\006" +
    "\uff55\001\002\000\004\005\323\001\002\000\004\004\uffd3" +
    "\001\002\000\006\004\uff53\006\uff53\001\002\000\004\004" +
    "\uff71\001\002\000\016\005\336\060\012\061\024\062\026" +
    "\063\014\064\022\001\002\000\016\005\333\060\012\061" +
    "\024\062\026\063\014\064\022\001\002\000\004\005\331" +
    "\001\002\000\004\004\uffcd\001\002\000\016\005\334\060" +
    "\012\061\024\062\026\063\014\064\022\001\002\000\006" +
    "\004\uffd5\006\uffd5\001\002\000\006\004\uffd4\006\uffd4\001" +
    "\002\000\016\005\337\060\012\061\024\062\026\063\014" +
    "\064\022\001\002\000\006\004\uffd2\006\uffd2\001\002\000" +
    "\006\004\uffd1\006\uffd1\001\002\000\004\004\uff6e\001\002" +
    "\000\006\004\342\006\316\001\002\000\010\027\200\031" +
    "\171\042\343\001\002\000\004\005\344\001\002\000\004" +
    "\004\uffd0\001\002\000\004\004\uff6f\001\002\000\004\004" +
    "\uff69\001\002\000\004\004\uff6b\001\002\000\004\004\uff67" +
    "\001\002\000\004\004\uff65\001\002\000\004\046\356\001" +
    "\002\000\004\004\uff86\001\002\000\004\004\352\001\002" +
    "\000\004\004\uff87\001\002\000\004\005\357\001\002\000" +
    "\004\004\uffaf\001\002\000\006\004\uff8a\006\uff8a\001\002" +
    "\000\004\032\364\001\002\000\004\004\361\001\002\000" +
    "\006\004\uff8b\006\uff8b\001\002\000\004\005\365\001\002" +
    "\000\006\004\uffb5\006\uffb5\001\002\000\006\004\uff8c\006" +
    "\uff8c\001\002\000\004\030\372\001\002\000\004\004\367" +
    "\001\002\000\006\004\uff8d\006\uff8d\001\002\000\004\005" +
    "\373\001\002\000\006\004\uffb8\006\uffb8\001\002\000\004" +
    "\004\uff84\001\002\000\004\050\u0100\001\002\000\004\004" +
    "\375\001\002\000\004\004\uff85\001\002\000\004\005\u0101" +
    "\001\002\000\004\004\uffac\001\002\000\004\004\uff88\001" +
    "\002\000\004\034\u0106\001\002\000\004\004\u0103\001\002" +
    "\000\004\004\uff89\001\002\000\004\005\u0107\001\002\000" +
    "\004\004\uffb2\001\002\000\004\004\uff72\001\002\000\032" +
    "\023\165\024\u010c\025\172\027\200\031\171\033\173\035" +
    "\166\045\167\047\174\051\170\055\176\057\177\001\002" +
    "\000\004\004\u0109\001\002\000\004\004\uff73\001\002\000" +
    "\004\005\u010d\001\002\000\004\004\uffbb\001\002\000\004" +
    "\010\u0110\001\002\000\004\002\uff9d\001\002\000\004\005" +
    "\u0111\001\002\000\004\002\uff9e\001\002\000\020\005\u0118" +
    "\060\012\061\024\062\026\063\014\064\022\070\u0116\001" +
    "\002\000\020\005\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\070\uffdc\001\002\000\020\005\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\070\uffdb\001\002\000\020" +
    "\005\u011d\060\012\061\024\062\026\063\014\064\022\070" +
    "\u0116\001\002\000\004\074\u0119\001\002\000\020\005\uffda" +
    "\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\070\uffda\001" +
    "\002\000\004\004\uffc6\001\002\000\004\077\u011a\001\002" +
    "\000\004\075\u011b\001\002\000\020\005\ufffc\060\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\064\ufffc\070\ufffc\001\002\000\020" +
    "\005\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\070" +
    "\uffd9\001\002\000\004\004\uffc5\001\002\000\004\004\uff9a" +
    "\001\002\000\012\012\u013a\013\u013b\015\u0139\021\u0138\001" +
    "\002\000\004\004\u011f\001\002\000\004\004\uff9b\001\002" +
    "\000\004\004\uff98\001\002\000\004\004\uff96\001\002\000" +
    "\004\004\uff9c\001\002\000\004\004\u0132\001\002\000\004" +
    "\004\u012f\001\002\000\006\004\u0128\006\u0129\001\002\000" +
    "\004\022\u012c\001\002\000\004\004\u0128\001\002\000\004" +
    "\004\uff92\001\002\000\004\004\uff93\001\002\000\004\005" +
    "\u012d\001\002\000\004\004\uffc1\001\002\000\004\004\uff95" +
    "\001\002\000\004\014\u0130\001\002\000\004\005\u0131\001" +
    "\002\000\004\004\uffca\001\002\000\004\016\u0134\001\002" +
    "\000\004\004\uff94\001\002\000\004\005\u0135\001\002\000" +
    "\004\004\uffc7\001\002\000\004\004\uff99\001\002\000\004" +
    "\004\uff97\001\002\000\016\005\u0144\060\012\061\024\062" +
    "\026\063\014\064\022\001\002\000\010\003\210\005\u0141" +
    "\067\201\001\002\000\004\005\u013f\001\002\000\010\003" +
    "\210\005\u013d\067\201\001\002\000\004\005\u013e\001\002" +
    "\000\004\004\uffcc\001\002\000\004\004\uffcb\001\002\000" +
    "\004\004\uffa1\001\002\000\004\005\u0142\001\002\000\004" +
    "\004\uffc9\001\002\000\004\004\uffc8\001\002\000\016\005" +
    "\u0145\060\012\061\024\062\026\063\014\064\022\001\002" +
    "\000\006\004\uffc3\006\uffc3\001\002\000\006\004\uffc2\006" +
    "\uffc2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\010\003\006\031\004\113\003\001\001\000" +
    "\002\001\001\000\006\027\047\114\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\012" +
    "\015\013\012\014\017\015\016\016\024\024\014\025\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\015\013\012\014\017\015" +
    "\016\016\024\024\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\u011f\011\u0121\030\u0122\033" +
    "\u0125\035\u0124\037\u0126\115\u0123\116\u0120\117\u011d\001\001" +
    "\000\006\041\060\120\057\001\001\000\002\001\001\000" +
    "\020\012\015\013\012\014\017\015\016\016\024\024\014" +
    "\025\053\001\001\000\016\012\015\013\012\014\017\015" +
    "\016\016\024\024\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u010e\001\001\000" +
    "\064\042\072\043\104\045\066\047\067\051\062\053\075" +
    "\063\074\065\064\071\101\073\111\075\061\077\102\121" +
    "\105\122\065\123\070\124\100\125\073\126\071\127\106" +
    "\130\110\131\107\134\103\135\112\136\063\137\076\001" +
    "\001\000\064\043\104\045\066\047\067\051\062\053\075" +
    "\063\074\065\064\071\101\073\111\075\061\076\u0107\077" +
    "\102\121\105\122\065\123\070\124\100\125\073\126\071" +
    "\127\106\130\110\131\107\134\103\135\u0109\136\063\137" +
    "\076\001\001\000\004\052\u0101\001\001\000\002\001\001" +
    "\000\004\066\373\001\001\000\002\001\001\000\004\046" +
    "\365\001\001\000\004\050\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\064\352\001\001\000\012\054\267\061\272\141\270" +
    "\147\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\067\135\072\132\132\131\133\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\117\001\001\000" +
    "\062\042\113\043\104\045\066\047\067\051\062\053\075" +
    "\063\074\065\064\071\101\073\111\075\061\077\102\121" +
    "\105\122\065\123\070\124\100\125\073\126\071\127\106" +
    "\130\110\131\107\134\114\136\063\137\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\067\135\072\145\132" +
    "\144\001\001\000\004\070\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\070\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\012\015\013\012\014\017\015" +
    "\016\016\024\024\153\026\151\112\154\151\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\015\013" +
    "\012\014\017\015\016\016\024\024\153\112\154\151\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\015\013\012\014\017\015\016" +
    "\016\024\024\014\025\264\001\001\000\020\012\015\013" +
    "\012\014\017\015\016\016\024\024\014\025\261\001\001" +
    "\000\020\012\015\013\012\014\017\015\016\016\024\024" +
    "\014\025\256\001\001\000\024\012\015\013\012\014\017" +
    "\015\016\016\024\021\251\024\252\103\250\106\247\001" +
    "\001\000\026\012\015\013\012\014\017\015\016\016\024" +
    "\020\201\021\203\024\204\100\244\105\202\001\001\000" +
    "\020\012\015\013\012\014\017\015\016\016\024\024\014" +
    "\025\241\001\001\000\026\012\015\013\012\014\017\015" +
    "\016\016\024\020\231\021\233\024\235\104\234\111\232" +
    "\001\001\000\020\012\015\013\012\014\017\015\016\016" +
    "\024\024\014\025\226\001\001\000\002\001\001\000\020" +
    "\012\015\013\012\014\017\015\016\016\024\024\014\025" +
    "\222\001\001\000\002\001\001\000\026\012\015\013\012" +
    "\014\017\015\016\016\024\020\201\021\203\024\204\100" +
    "\205\105\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\012\015\013\012\014\017\015\016\016\024\020\201" +
    "\021\203\024\204\105\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\015\013\012\014\017\015" +
    "\016\016\024\024\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\015\013\012\014" +
    "\017\015\016\016\024\024\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\012\015\013\012\014\017\015\016" +
    "\016\024\020\231\021\233\024\235\111\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\015\013\012\014\017\015\016\016" +
    "\024\024\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\012\015\013\012\014\017\015\016\016\024\020" +
    "\201\021\203\024\204\105\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\012\015\013" +
    "\012\014\017\015\016\016\024\021\251\024\252\106\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\015" +
    "\013\012\014\017\015\016\016\024\024\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\015\013\012" +
    "\014\017\015\016\016\024\024\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\015\013\012\014\017" +
    "\015\016\016\024\024\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\054\350\061\272\141\347\001\001\000\020\055\311\057" +
    "\305\062\306\140\302\142\310\143\303\144\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\015\013" +
    "\012\014\017\015\016\016\024\024\014\025\276\001\001" +
    "\000\016\012\015\013\012\014\017\015\016\016\024\024" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\055\311\057\305\062\345\142\346\143" +
    "\303\144\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\045\066\047\067\060\337\122\320\123\312\145" +
    "\317\146\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\045\066\047\067\056\313\122" +
    "\320\123\312\145\317\146\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\045\066\047\067\056\324\122" +
    "\320\123\312\145\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\015\013\012\014\017\015\016\016\024\024" +
    "\014\025\334\001\001\000\020\012\015\013\012\014\017" +
    "\015\016\016\024\024\014\025\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\015\013\012\014\017" +
    "\015\016\016\024\024\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\015\013\012\014\017\015\016" +
    "\016\024\024\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\045\066\047\067\060\344" +
    "\122\320\123\312\145\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\354" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\u0104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\043\104" +
    "\045\066\047\067\051\062\053\075\063\074\065\064\071" +
    "\101\073\111\075\061\076\u010a\077\102\121\105\122\065" +
    "\123\070\124\100\125\073\126\071\127\106\130\110\131" +
    "\107\134\114\136\063\137\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\012\015\013\012\014\017\015\016\016\024\022\u0113\024" +
    "\u0112\101\u0116\102\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\012\015\013\012\014\017\015\016\016" +
    "\024\022\u0113\024\u0112\101\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\011" +
    "\u0135\030\u0136\033\u0125\035\u0124\037\u0126\115\u0123\116\u0120" +
    "\117\u011d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\u0132\001\001" +
    "\000\004\034\u012d\001\001\000\004\040\u0129\001\001\000" +
    "\002\001\001\000\004\040\u012a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\015\013\012\014\017\015\016\016\024\024" +
    "\014\025\u0142\001\001\000\004\020\u013f\001\001\000\002" +
    "\001\001\000\004\020\u013b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\015\013\012\014\017\015\016\016\024\024\037\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public  Chtml codigoHTML;
	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				ErrorS nuevo = new ErrorS(s.right,s.left,"Sintactico","El simbolo "+s.value+", no es valido");
paginaActual.erroresPagina.insertarError(nuevo);
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				ErrorS nuevo = new ErrorS(s.right,s.left,"Sintactico","El simbolo "+s.value+", no es valido");
paginaActual.erroresPagina.insertarError(nuevo);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // cuerpoCelda ::= sentenciaCelda 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<Etiqueta> lista = new ArrayList<Etiqueta>(); lista.add((Etiqueta)a);RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(100/*cuerpoCelda*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // cuerpoCelda ::= cuerpoCelda sentenciaCelda 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<Etiqueta> lista = (ArrayList<Etiqueta>)a; lista.add((Etiqueta)b);RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(100/*cuerpoCelda*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // sentenciaCelda ::= cadena2 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(99/*sentenciaCelda*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // sentenciaCelda ::= IMAGEN 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(99/*sentenciaCelda*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // sentenciaCelda ::= BOTON 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(99/*sentenciaCelda*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // cuerpoCuerpo ::= sentenciaCuerpo 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List<Etiqueta> etiquetas = new ArrayList<Etiqueta>();
							  etiquetas.add((Etiqueta)a);
							  RESULT= etiquetas;		
							
              CUP$Parser$result = new java_cup.runtime.Symbol(91/*cuerpoCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // cuerpoCuerpo ::= cuerpoCuerpo sentenciaCuerpo 
            {
              Object RESULT = null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<Etiqueta> etiquetas = (ArrayList<Etiqueta>)lista;
														   etiquetas.add((Etiqueta)a);
															RESULT= etiquetas;
															
              CUP$Parser$result = new java_cup.runtime.Symbol(91/*cuerpoCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sentenciaCuerpo ::= TABLA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // sentenciaCuerpo ::= PANEL 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // sentenciaCuerpo ::= SALTO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // sentenciaCuerpo ::= SPINNER 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // sentenciaCuerpo ::= CAJA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // sentenciaCuerpo ::= CAJA_TEXTO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sentenciaCuerpo ::= TEXTO_A 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // sentenciaCuerpo ::= ENLACE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // sentenciaCuerpo ::= BOTON 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // sentenciaCuerpo ::= IMAGEN 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // sentenciaCuerpo ::= TEXTO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(90/*sentenciaCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TABLA ::= tagTabla tagFinTabla 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(93/*TABLA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TABLA ::= tagTabla LISTA_TABLA tagFinTabla 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(93/*TABLA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LISTA_TABLA ::= FILA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(101/*LISTA_TABLA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LISTA_TABLA ::= LISTA_TABLA FILA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(101/*LISTA_TABLA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // FILA ::= tagFil_t tagFinFil_t 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(95/*FILA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // FILA ::= tagFil_t LISTA_FILA tagFinFil_t 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(95/*FILA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // LISTA_FILA ::= ELEMENTO_FILA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(94/*LISTA_FILA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // LISTA_FILA ::= LISTA_FILA ELEMENTO_FILA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(94/*LISTA_FILA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ELEMENTO_FILA ::= CELDA_ENCABEZADO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(96/*ELEMENTO_FILA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ELEMENTO_FILA ::= CELDA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(96/*ELEMENTO_FILA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CELDA_ENCABEZADO ::= tagCb tagFinCb 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(97/*CELDA_ENCABEZADO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CELDA_ENCABEZADO ::= tagCb cuerpoCelda tagFinCb 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(97/*CELDA_ENCABEZADO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CELDA ::= tagCt tagFinCt 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(98/*CELDA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CELDA ::= tagCt cuerpoCelda tagFinCt 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(98/*CELDA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PANEL ::= tagPanel tagFinPanel 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Panel(new listaElementos((ArrayList<propiedad>)m),new Cuerpo(new ArrayList<propiedad>(),new ArrayList<Etiqueta>()));
              CUP$Parser$result = new java_cup.runtime.Symbol(92/*PANEL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PANEL ::= tagPanel cuerpoCuerpo tagFinPanel 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Panel(new listaElementos((ArrayList<propiedad>)m),new Cuerpo(new ArrayList<propiedad>(),c));
              CUP$Parser$result = new java_cup.runtime.Symbol(92/*PANEL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SALTO ::= tagSaltoFin 
            {
              Object RESULT = null;
		Salto br = new Salto(); RESULT= br;
              CUP$Parser$result = new java_cup.runtime.Symbol(87/*SALTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SPINNER ::= tagSpinner tagFinSpinner 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Spinner img = new Spinner(m,""); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(86/*SPINNER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SPINNER ::= tagSpinner cadena2 tagFinSpinner 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Spinner img = new Spinner(m,c); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(86/*SPINNER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CAJA ::= tagCaja tagFinCaja 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Caja(new listaElementos((ArrayList<propiedad>)a),new ArrayList<Opcion>());
              CUP$Parser$result = new java_cup.runtime.Symbol(85/*CAJA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CAJA ::= tagCaja listaOpciones tagFinCaja 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Caja(new listaElementos((ArrayList<propiedad>)a),b);
              CUP$Parser$result = new java_cup.runtime.Symbol(85/*CAJA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // listaOpciones ::= OPCION 
            {
              Object RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<Opcion> lista = new ArrayList<>(); lista.add((Opcion)op); RESULT=lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(89/*listaOpciones*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // listaOpciones ::= listaOpciones OPCION 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<Opcion> lista = (ArrayList<Opcion>)l; lista.add((Opcion)op); RESULT=lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(89/*listaOpciones*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPCION ::= tagOpcion tagFinOpcion 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Opcion((listaElementos)m,"");
              CUP$Parser$result = new java_cup.runtime.Symbol(88/*OPCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPCION ::= tagOpcion cadena2 tagFinOpcion 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new Opcion((listaElementos)m,c);
              CUP$Parser$result = new java_cup.runtime.Symbol(88/*OPCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // LISTA_OPCION ::= PROPIEDAD_OPCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List<propiedad> lista = new ArrayList<>();
							 lista.add((propiedad)a);
							 RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_OPCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // LISTA_OPCION ::= LISTA_OPCION PROPIEDAD_OPCION 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<propiedad> lista= (List<propiedad>) b;
																		  lista.add((propiedad)a);
																		  RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_OPCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // propiedadValor ::= valor igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new propiedadValor(c);
              CUP$Parser$result = new java_cup.runtime.Symbol(72/*propiedadValor*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PROPIEDAD_OPCION ::= propiedadValor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(103/*PROPIEDAD_OPCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PROPIEDAD_OPCION ::= propiedadGeneral 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(103/*PROPIEDAD_OPCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tagOpcion ::= menor opcion LISTA_OPCION mayor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new  listaElementos((ArrayList<propiedad>)a);
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*tagOpcion*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // tagOpcion ::= menor opcion mayor 
            {
              Object RESULT = null;
		RESULT= new  listaElementos(new ArrayList<propiedad>());
              CUP$Parser$result = new java_cup.runtime.Symbol(53/*tagOpcion*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CAJA_TEXTO ::= tagCaja_texto tagFinCaja_texto 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		caja_texto img = new caja_texto(m,""); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(84/*CAJA_TEXTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CAJA_TEXTO ::= tagCaja_texto cadena2 tagFinCaja_texto 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		caja_texto img = new caja_texto(m,c); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(84/*CAJA_TEXTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // TEXTO_A ::= tagTexto_a tagFinTexto_a 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Texto_a img = new Texto_a(m,""); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(83/*TEXTO_A*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TEXTO_A ::= tagTexto_a cadena2 tagFinTexto_a 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Texto_a img = new Texto_a(m,c); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(83/*TEXTO_A*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ENLACE ::= tagEnlace tagFinEnlace 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Enlace img = new Enlace(m,""); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(82/*ENLACE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ENLACE ::= tagEnlace cadena2 tagFinEnlace 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Enlace img = new Enlace(m,c); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(82/*ENLACE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BOTON ::= tagBoton tagFinBoton 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Boton img = new Boton(m,""); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(81/*BOTON*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BOTON ::= tagBoton cadena2 tagFinBoton 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Boton img = new Boton(m,c); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(81/*BOTON*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IMAGEN ::= tagImagen tagFinImagen 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Imagen img = new Imagen(m,"SinImagen"); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(80/*IMAGEN*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IMAGEN ::= tagImagen cadena2 tagFinImagen 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Imagen img = new Imagen(m,c); RESULT= img;
              CUP$Parser$result = new java_cup.runtime.Symbol(80/*IMAGEN*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TEXTO ::= tagTexto tagFinTexto 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Texto txt = new Texto(m ,""); RESULT= txt;
              CUP$Parser$result = new java_cup.runtime.Symbol(79/*TEXTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TEXTO ::= tagTexto cadena2 tagFinTexto 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Texto txt = new Texto(m ,c); RESULT= txt;
              CUP$Parser$result = new java_cup.runtime.Symbol(79/*TEXTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CUERPO ::= tagCuerpo cuerpoCuerpo tagFinCuerpo 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Cuerpo p = new Cuerpo(m,c); RESULT = p;
              CUP$Parser$result = new java_cup.runtime.Symbol(78/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CUERPO ::= tagCuerpo tagFinCuerpo 
            {
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Cuerpo p = new Cuerpo(m, new ArrayList<Etiqueta>()); RESULT = p;
              CUP$Parser$result = new java_cup.runtime.Symbol(78/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // TITULO ::= tagTitulo tagFinTitulo 
            {
              Object RESULT = null;
		RESULT= new Titulo("");
              CUP$Parser$result = new java_cup.runtime.Symbol(77/*TITULO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TITULO ::= tagTitulo cadena2 tagFinTitulo 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Titulo(c);
              CUP$Parser$result = new java_cup.runtime.Symbol(77/*TITULO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CCSS ::= tagCcss tagFinCcss 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new CCSS(p);
              CUP$Parser$result = new java_cup.runtime.Symbol(76/*CCSS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CCJS ::= tagCjs tagFinCjs 
            {
              Object RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new CJS(p);
              CUP$Parser$result = new java_cup.runtime.Symbol(75/*CCJS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ENCABEZADO ::= tagEncabezado tagFinEncabezado 
            {
              Object RESULT = null;
		RESULT= new Encabezado(new ArrayList<Etiqueta>());
              CUP$Parser$result = new java_cup.runtime.Symbol(74/*ENCABEZADO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ENCABEZADO ::= tagEncabezado cuerpoHeader tagFinEncabezado 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Encabezado(c);
              CUP$Parser$result = new java_cup.runtime.Symbol(74/*ENCABEZADO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // cuerpoHeader ::= elementoHeader 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<Etiqueta> lista = new ArrayList<>();
						lista.add((Etiqueta)r);
						RESULT=lista;	
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*cuerpoHeader*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // cuerpoHeader ::= cuerpoHeader elementoHeader 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<Etiqueta> lista = (ArrayList<Etiqueta>)l;
						lista.add((Etiqueta)r);
						RESULT=lista;	
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*cuerpoHeader*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // elementoHeader ::= TITULO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*elementoHeader*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // elementoHeader ::= CCSS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*elementoHeader*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // elementoHeader ::= CCJS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*elementoHeader*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CHTML ::= tagChtml ENCABEZADO CUERPO tagFinChtml 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Chtml ht= new Chtml(a,e,c); RESULT= ht;
              CUP$Parser$result = new java_cup.runtime.Symbol(73/*CHTML*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tagFinChtml ::= menor finChtml mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(24/*tagFinChtml*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tagChtml ::= menor chtml listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*tagChtml*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tagChtml ::= menor chtml mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*tagChtml*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tagFinEncabezado ::= menor finEncabezado mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*tagFinEncabezado*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tagEncabezado ::= menor encabezado listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*tagEncabezado*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tagEncabezado ::= menor encabezado mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*tagEncabezado*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tagFinSpinner ::= menor finSpinner mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(58/*tagFinSpinner*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tagSpinner ::= menor spinner mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*tagSpinner*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tagSpinner ::= menor spinner listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*tagSpinner*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tagSaltoFin ::= menor saltoFin mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(61/*tagSaltoFin*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tagFinOpcion ::= menor finOpcion mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(54/*tagFinOpcion*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tagFinCaja ::= menor finCaja mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(56/*tagFinCaja*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tagCaja ::= menor caja mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*tagCaja*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tagCaja ::= menor caja listaPropiedadeesCajaOpciones mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(55/*tagCaja*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tagFinCaja_texto ::= menor finCaja_texto mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(52/*tagFinCaja_texto*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tagCaja_texto ::= menor caja_texto listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*tagCaja_texto*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tagCaja_texto ::= menor caja_texto mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*tagCaja_texto*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tagFinTexto_a ::= menor finTexto_a mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(50/*tagFinTexto_a*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tagTexto_a ::= menor texto_a mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*tagTexto_a*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tagTexto_a ::= menor texto_a listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*tagTexto_a*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tagFinEnlace ::= menor finEnlace mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*tagFinEnlace*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tagEnlace ::= menor enlace listaPropiedadesEnlace mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*tagEnlace*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tagEnlace ::= menor enlace mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(39/*tagEnlace*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tagFinBoton ::= menor finBoton mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(38/*tagFinBoton*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tagBoton ::= menor boton mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*tagBoton*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tagBoton ::= menor boton listaPropiedadBoton mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*tagBoton*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tagFinImagen ::= menor finImagen mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(36/*tagFinImagen*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tagImagen ::= menor imagen listaPropiedadBoton mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*tagImagen*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tagImagen ::= menor imagen mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*tagImagen*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tagFinPanel ::= menor finPanel mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(60/*tagFinPanel*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tagPanel ::= menor panel listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*tagPanel*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tagPanel ::= menor panel mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(59/*tagPanel*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tagFinTexto ::= menor finTexto mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(34/*tagFinTexto*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tagTexto ::= menor texto listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*tagTexto*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tagTexto ::= menor texto mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*tagTexto*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tagFinTitulo ::= menor finTitulo mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(30/*tagFinTitulo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tagTitulo ::= menor titulo listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*tagTitulo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tagTitulo ::= menor titulo mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*tagTitulo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tagFinCuerpo ::= menor finCuerpo mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(32/*tagFinCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tagCuerpo ::= menor cuerpo listaPropiedadesCuerpo mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista = (ArrayList<propiedad>)b;
														RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*tagCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tagCuerpo ::= menor cuerpo mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(31/*tagCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tagFinCcss ::= menor finCcss mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*tagFinCcss*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // tagCcss ::= menor ccss rutaPropiedad mayor 
            {
              Object RESULT = null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=rt;
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*tagCcss*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tagCcss ::= menor ccss mayor 
            {
              Object RESULT = null;
		 RESULT=new propiedadRuta("");;
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*tagCcss*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tagFinCjs ::= menor finCjs mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(26/*tagFinCjs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tagCjs ::= menor cjs rutaPropiedad mayor 
            {
              Object RESULT = null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT=rt;
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*tagCjs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tagCjs ::= menor cjs mayor 
            {
              Object RESULT = null;
		 RESULT=new propiedadRuta("");;
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*tagCjs*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tagFinFil_t ::= menor finFil_t mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(48/*tagFinFil_t*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // tagFil_t ::= menor fil_t mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*tagFil_t*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tagFil_t ::= menor fil_t listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista= (ArrayList<propiedad>)b;
														RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(47/*tagFil_t*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tagFinCb ::= menor finCb mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(46/*tagFinCb*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tagCb ::= menor cb listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista= (ArrayList<propiedad>)b;
														RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*tagCb*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tagCb ::= menor cb mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(45/*tagCb*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // tagFinCt ::= menor finCt mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(44/*tagFinCt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // tagCt ::= menor ct listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista= (ArrayList<propiedad>)b;
														RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*tagCt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // tagCt ::= menor ct mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*tagCt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // tagFinTabla ::= menor finTabla mayor 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(42/*tagFinTabla*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // tagTabla ::= menor tabla listaPropiedadesGenerales mayor 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		List<propiedad> lista= (ArrayList<propiedad>)b;
														RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*tagTabla*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // tagTabla ::= menor tabla mayor 
            {
              Object RESULT = null;
		List<propiedad> lista = new ArrayList<>();
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*tagTabla*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listaPropiedadesCuerpo ::= listaPropiedadesCuerpo propiedadCuerpo 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<propiedad> lista= (List<propiedad>) b;
																		  lista.add((propiedad)a);
																		  RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(64/*listaPropiedadesCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listaPropiedadesCuerpo ::= propiedadCuerpo 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List<propiedad> lista = new ArrayList<>();
							 lista.add((propiedad)a);
							 RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(64/*listaPropiedadesCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // propiedadCuerpo ::= fondoPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(63/*propiedadCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // propiedadCuerpo ::= propiedadGeneral 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(63/*propiedadCuerpo*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // listaPropiedadBoton ::= propiedadBoton 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List<propiedad> lista = new ArrayList<>();
							 lista.add((propiedad)a);
							 RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(62/*listaPropiedadBoton*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // listaPropiedadBoton ::= listaPropiedadBoton propiedadBoton 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<propiedad> lista= (List<propiedad>) b;
																		  lista.add((propiedad)a);
																		  RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(62/*listaPropiedadBoton*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // propiedadBoton ::= rutaPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(67/*propiedadBoton*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // propiedadBoton ::= clickPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(67/*propiedadBoton*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // propiedadBoton ::= propiedadGeneral 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(67/*propiedadBoton*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // listaPropiedadesEnlace ::= propiedadEnlace 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List<propiedad> lista = new ArrayList<>();
							 lista.add((propiedad)a);
							 RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(66/*listaPropiedadesEnlace*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listaPropiedadesEnlace ::= listaPropiedadesEnlace propiedadEnlace 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<propiedad> lista= (List<propiedad>) b;
																		  lista.add((propiedad)a);
																		  RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(66/*listaPropiedadesEnlace*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // propiedadEnlace ::= rutaPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(71/*propiedadEnlace*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // propiedadEnlace ::= clickPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(71/*propiedadEnlace*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // propiedadEnlace ::= propiedadGeneral 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(71/*propiedadEnlace*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // listaPropiedadeesCajaOpciones ::= propiedadCajaOpciones 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List<propiedad> lista = new ArrayList<>();
							 lista.add((propiedad)a);
							 RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(65/*listaPropiedadeesCajaOpciones*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // listaPropiedadeesCajaOpciones ::= listaPropiedadeesCajaOpciones propiedadCajaOpciones 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<propiedad> lista= (List<propiedad>) b;
																							  lista.add((propiedad)a);
																							  RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(65/*listaPropiedadeesCajaOpciones*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // propiedadCajaOpciones ::= clickPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(68/*propiedadCajaOpciones*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // propiedadCajaOpciones ::= propiedadGeneral 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(68/*propiedadCajaOpciones*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaPropiedadesOpcion ::= propiedadOpcion 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List<propiedad> lista = new ArrayList<>();
							 lista.add((propiedad)a);
							 RESULT = lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(70/*listaPropiedadesOpcion*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaPropiedadesOpcion ::= listaPropiedadesOpcion propiedadOpcion 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<propiedad> lista= (List<propiedad>) b;
																		  lista.add((propiedad)a);
																		  RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(70/*listaPropiedadesOpcion*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // propiedadOpcion ::= valorPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(69/*propiedadOpcion*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // propiedadOpcion ::= propiedadGeneral 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(69/*propiedadOpcion*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listaPropiedadesGenerales ::= propiedadGeneral 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<propiedad> propiedades = new ArrayList<>();
							  propiedades.add((propiedad)a);
							  RESULT=propiedades; 
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*listaPropiedadesGenerales*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listaPropiedadesGenerales ::= listaPropiedadesGenerales propiedadGeneral 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 List<propiedad> lista = (List<propiedad>)b;
																				lista.add((propiedad)a);
																				RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*listaPropiedadesGenerales*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // propiedadGeneral ::= alineadoPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*propiedadGeneral*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // propiedadGeneral ::= anchoPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*propiedadGeneral*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // propiedadGeneral ::= altoPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*propiedadGeneral*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // propiedadGeneral ::= grupoPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*propiedadGeneral*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // propiedadGeneral ::= idPropiedad 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*propiedadGeneral*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // alineadoPropiedad ::= alineado igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		propiedadAlineado r= new propiedadAlineado(a); 
															RESULT=r;
														  
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*alineadoPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // anchoPropiedad ::= ancho igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		propiedadAncho r= new propiedadAncho(a); 
															RESULT=r;
														  
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*anchoPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // altoPropiedad ::= alto igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		propiedadAlto r= new propiedadAlto(a); 
															RESULT=r;
														  
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*altoPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // grupoPropiedad ::= grupo igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		propiedadGrupo r= new propiedadGrupo(a); 
															RESULT=r;
														  
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*grupoPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // idPropiedad ::= id igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		propiedadId r= new propiedadId(a); 
															RESULT=r;
														  
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*idPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // valorPropiedad ::= valor igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		propiedadValor r= new propiedadValor(a); 
															RESULT=r;
														  
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*valorPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fondoPropiedad ::= fondo igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		propiedadFondo r= new propiedadFondo(a); 
															RESULT=r;
														  
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*fondoPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // clickPropiedad ::= click igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		propiedadClick r= new propiedadClick(a); 
															RESULT=r;
														  
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*clickPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // rutaPropiedad ::= error 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*rutaPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // rutaPropiedad ::= ruta igualSimb cadena puntoComaSimb 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		propiedadRuta r= new propiedadRuta(a); 
															RESULT=r;
														  
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*rutaPropiedad*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CHTML 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		parser.codigoHTML= (Chtml)a;
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

