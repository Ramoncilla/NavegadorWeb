
package proyecto1_201122872.AnalizadorExtra;
import java_cup.runtime.Symbol;
import java.util.ArrayList;


parser code
{:  
    // CODIGO VISIBLE
    
    // METODOS Y VARIABLES GLOBALES DEL PARSER, PUEDEN SER PUBLICAS O PRIVADAS
	

	
   /**Metodo al que se llama automáticamente ante algún error sintactico.*/
	public void syntax_error(Symbol s){
		System.out.println(s);
	System.out.println("Error Sintactico en la Línea " + (s.left) +", Columna "+(s.right+1)+ ". Token "
	+s.value + " no reconocido. - Recuperacion" );
	}

	/**Metodo al que se llama en el momento en que ya no es posible una recuperación de
	errores.*/
	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
	System.out.println(s);
	System.out.println("Error Sintactico en la Línea " + (s.left)+ ", Columna "+(s.right+1)+". Token " +
	s.value + " no reconocido. - No fue posible recuperarse");
	}

	
	

:}

action code
{://Codigo de acciones
		//public Funcion funcion;
      //METODOS Y VARIABLES QUE SOLO PUEDEN SER ACCEDIDAS DENTRO DEL PARSER
:}

terminal 
	id, terminalID ,corcheteabre, corchetecierra, grupo, parabre, parcierra, ptcoma, alineado, dospts, igual,texto, cadena, formato, letra, tamtext, fondoelemento, autoredimension, horizontal, vertical, visible, borde, numero, coma,
colortext, mas, men, por, div,izquierda,derecha,centrado, justificado,negrilla, cursiva, mayuscula, minuscula, capitalt,booleano,opaque
	
;
 
nonterminal ALINEADO,TEXTO, FORMATO, VALOR_FORMATO, L_FORMATOS, LETRA, TAMTEX, FONDO_ELEMENTO,ELEMENTO, AUTOREDIMENSION, DIRECCION,
	VISIBLE, BORDE, OPAQUE, COLORTEXT, EXPRESION,INICIO, L_BLOQUE, BLOQUE, L_ELEM_BLOQUE, ELEM_BLOQUE, GRUPO, ID, L_ELEMENTOS
	,SIMB_ARIT;
nonterminal String  VALOR_ALINEADO;

		precedence left mas,men;
        precedence left por, div;
        

start with INICIO;

INICIO ::= L_BLOQUE;

L_BLOQUE ::=  L_BLOQUE BLOQUE | BLOQUE;

BLOQUE ::= id corcheteabre L_ELEM_BLOQUE corchetecierra;

L_ELEM_BLOQUE ::= L_ELEM_BLOQUE ELEM_BLOQUE | ELEM_BLOQUE;

ELEM_BLOQUE ::= GRUPO | ID;

GRUPO ::=  grupo parabre id parcierra ptcoma L_ELEMENTOS;

ID ::= terminalID parabre id parcierra ptcoma L_ELEMENTOS;

L_ELEMENTOS::= ELEMENTO
			|L_ELEMENTOS ELEMENTO;
	
	
ELEMENTO ::=  ALINEADO 
			| TEXTO 
			| FORMATO  
			| LETRA 
			| TAMTEX 
			| FONDO_ELEMENTO
			| AUTOREDIMENSION
			| DIRECCION 
			| VISIBLE 
			| OPAQUE 
			| BORDE 
			| COLORTEXT
;



ALINEADO::= alineado dospts igual VALOR_ALINEADO ptcoma;

VALOR_ALINEADO::= izquierda:s {: RESULT = s.toString();:}
				|derecha:s {: RESULT = s.toString();:}
				|centrado:s {: RESULT = s.toString();:}
				|justificado:s {: RESULT = s.toString();:}
				;
	
TEXTO::= texto  dospts igual EXPRESION ptcoma;

FORMATO::= formato dospts igual L_FORMATOS ptcoma;

VALOR_FORMATO::= negrilla 
	|cursiva
	|mayuscula
	|minuscula
	|capitalt;
	
	
L_FORMATOS::= L_FORMATOS  coma VALOR_FORMATO
	|VALOR_FORMATO;


LETRA::= letra dospts igual EXPRESION ptcoma;

TAMTEX::= tamtext dospts igual EXPRESION ptcoma; //entero o decimal

FONDO_ELEMENTO::= fondoelemento dospts igual EXPRESION ptcoma;

AUTOREDIMENSION::= autoredimension dospts igual	corcheteabre booleano coma DIRECCION corchetecierra ptcoma;

DIRECCION::= horizontal
	|vertical;
	
	
VISIBLE::= visible dospts igual booleano ptcoma;

BORDE::= borde dospts igual corcheteabre EXPRESION coma EXPRESION coma booleano corchetecierra ptcoma;

OPAQUE::= opaque dospts igual booleano ptcoma;

COLORTEXT::= colortext dospts igual EXPRESION ptcoma;

EXPRESION::= EXPRESION SIMB_ARIT EXPRESION
	|booleano
	|numero
	|cadena;
SIMB_ARIT ::= mas| men| por| div;