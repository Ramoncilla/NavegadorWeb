
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Feb 20 13:56:43 CST 2018
//----------------------------------------------------

package proyecto1_201122872.AnalizadorCJS;

import proyecto1_201122872.AnalizadorCJS.simbolosCJS;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;
import CJS.ARBOL.EXPRESION.*;
import CJS.objetoBase;

/** CUP v0.10k generated parser.
  * @version Tue Feb 20 13:56:43 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\065\003\000\002\003" +
    "\005\000\002\003\010\000\002\003\004\000\002\004\006" +
    "\000\002\004\010\000\002\004\006\000\002\005\003\000" +
    "\002\005\005\000\002\006\006\000\002\007\004\000\002" +
    "\007\005\000\002\010\003\000\002\010\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\023\007\000\002\024\004\000\002\012" +
    "\003\000\002\012\004\000\002\025\006\000\002\026\003" +
    "\000\002\026\004\000\002\027\005\000\002\030\003\000" +
    "\002\030\004\000\002\030\003\000\002\013\010\000\002" +
    "\013\011\000\002\031\003\000\002\031\003\000\002\014" +
    "\015\000\002\015\007\000\002\016\004\000\002\017\007" +
    "\000\002\020\005\000\002\032\010\000\002\032\007\000" +
    "\002\033\003\000\002\033\005\000\002\022\007\000\002" +
    "\034\010\000\002\035\010\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\052\012\000\002\052\011" +
    "\000\002\021\006\000\002\021\005\000\002\050\003\000" +
    "\002\037\004\000\002\037\004\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\040\005\000\002\041\005\000\002\042" +
    "\005\000\002\046\005\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\005\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\005\000\002\043\005\000\002\043\003\000\002\043" +
    "\003\000\002\053\005\000\002\053\003\000\002\063\007" +
    "\000\002\064\010\000\002\045\003\000\002\047\003\000" +
    "\002\047\003\000\002\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\050\007\043\031\034\033\032\037\015\057" +
    "\025\060\041\061\007\062\045\063\026\064\005\065\013" +
    "\070\014\071\020\072\017\073\037\074\010\075\024\076" +
    "\042\077\036\001\002\000\156\002\uffab\004\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\015\uffab\016" +
    "\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077\uffab\001\002" +
    "\000\156\002\uff92\004\uff92\006\uff92\007\uff92\010\uff92\011" +
    "\uff92\012\uff92\013\uff92\015\uff92\016\uff92\017\uff92\020\uff92" +
    "\021\uff92\022\uff92\023\uff92\024\uff92\026\uff92\027\uff92\030" +
    "\uff92\031\uff92\033\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92" +
    "\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066" +
    "\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92" +
    "\075\uff92\076\uff92\077\uff92\001\002\000\156\002\uffae\004" +
    "\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae" +
    "\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae" +
    "\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\076\uffae\077" +
    "\uffae\001\002\000\156\002\uff98\004\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\012\uff98\013\uff98\015\uff98\016\uff98\017" +
    "\uff98\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\026\uff98" +
    "\027\uff98\030\uff98\031\uff98\033\uff98\037\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056" +
    "\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98\064\uff98" +
    "\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072\uff98\073" +
    "\uff98\074\uff98\075\uff98\076\uff98\077\uff98\001\002\000\156" +
    "\002\uffa0\004\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\033\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067" +
    "\uffa0\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0" +
    "\076\uffa0\077\uffa0\001\002\000\156\002\uffa6\004\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6" +
    "\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\033\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\071\uffa6" +
    "\072\uffa6\073\uffa6\074\uffa6\075\uffa6\076\uffa6\077\uffa6\001" +
    "\002\000\156\002\uffa7\004\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\033\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7" +
    "\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074" +
    "\uffa7\075\uffa7\076\uffa7\077\uffa7\001\002\000\156\002\uff8f" +
    "\004\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013" +
    "\uff8f\015\uff8f\016\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\023\uff8f\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\033" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070" +
    "\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f" +
    "\077\uff8f\001\002\000\004\065\310\001\002\000\004\007" +
    "\127\001\002\000\156\002\uffac\004\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\033\uffac\037\uffac\040\uffac\041" +
    "\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac" +
    "\065\uffac\066\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073" +
    "\uffac\074\uffac\075\uffac\076\uffac\077\uffac\001\002\000\156" +
    "\002\uffa2\004\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\022\uffa2\023\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2\031" +
    "\uffa2\033\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2" +
    "\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067" +
    "\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2" +
    "\076\uffa2\077\uffa2\001\002\000\156\002\uffa3\004\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024" +
    "\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\033\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\063" +
    "\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\071\uffa3" +
    "\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\001" +
    "\002\000\156\002\uffad\004\uffad\006\uffad\007\uffad\010\uffad" +
    "\011\uffad\012\uffad\013\uffad\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026\uffad\027\uffad" +
    "\030\uffad\031\uffad\033\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad" +
    "\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\076\uffad\077\uffad\001\002\000\156\002\uffa5" +
    "\004\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\033" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070" +
    "\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5" +
    "\077\uffa5\001\002\000\156\002\uffaa\004\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\033\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa" +
    "\073\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\001\002\000" +
    "\156\002\uff9f\004\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f" +
    "\012\uff9f\013\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\033\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f" +
    "\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060" +
    "\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f" +
    "\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075" +
    "\uff9f\076\uff9f\077\uff9f\001\002\000\156\002\uff91\004\uff91" +
    "\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\015" +
    "\uff91\016\uff91\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91" +
    "\024\uff91\026\uff91\027\uff91\030\uff91\031\uff91\033\uff91\037" +
    "\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91" +
    "\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054" +
    "\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062\uff91" +
    "\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071" +
    "\uff91\072\uff91\073\uff91\074\uff91\075\uff91\076\uff91\077\uff91" +
    "\001\002\000\160\002\uffc5\004\uffc5\005\115\006\uffc5\007" +
    "\116\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\026" +
    "\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\001\002\000" +
    "\156\002\uff9c\004\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\013\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c\027\uff9c\030\uff9c" +
    "\031\uff9c\033\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060" +
    "\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c" +
    "\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075" +
    "\uff9c\076\uff9c\077\uff9c\001\002\000\156\002\uff9b\004\uff9b" +
    "\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\015" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b" +
    "\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071" +
    "\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\001\002\000\156\002\uffaf\004\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\033\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\065" +
    "\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf" +
    "\074\uffaf\075\uffaf\076\uffaf\077\uffaf\001\002\000\004\007" +
    "\110\001\002\000\156\002\uffa9\004\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\026\uffa9" +
    "\027\uffa9\030\uffa9\031\uffa9\033\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9" +
    "\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\001\002\000\004" +
    "\027\103\001\002\000\156\002\uffa4\004\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064" +
    "\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4" +
    "\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\001\002\000" +
    "\156\002\uff9d\004\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d" +
    "\012\uff9d\013\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021" +
    "\uff9d\022\uff9d\023\uff9d\024\uff9d\026\uff9d\027\uff9d\030\uff9d" +
    "\031\uff9d\033\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075" +
    "\uff9d\076\uff9d\077\uff9d\001\002\000\156\002\uffa1\004\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\015" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\033\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1" +
    "\063\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\072\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1" +
    "\001\002\000\156\002\uff95\004\uff95\006\uff95\007\uff95\010" +
    "\uff95\011\uff95\012\uff95\013\uff95\015\uff95\016\uff95\017\uff95" +
    "\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\033\uff95\037\uff95\040\071\041\061" +
    "\042\060\043\065\044\066\045\072\046\062\047\075\050" +
    "\055\051\070\052\054\053\052\054\073\055\057\056\053" +
    "\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065" +
    "\uff95\066\063\067\056\070\uff95\071\uff95\072\uff95\073\uff95" +
    "\074\uff95\075\uff95\076\uff95\077\uff95\001\002\000\156\002" +
    "\uff90\004\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90" +
    "\013\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90\022" +
    "\uff90\023\uff90\024\uff90\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\033\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044" +
    "\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90" +
    "\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061" +
    "\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90" +
    "\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076" +
    "\uff90\077\uff90\001\002\000\156\002\uff9e\004\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\015\uff9e\016" +
    "\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\031\uff9e\033\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e" +
    "\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\001\002" +
    "\000\050\007\043\031\034\033\032\037\015\057\025\060" +
    "\041\061\007\062\045\063\026\064\005\065\013\070\014" +
    "\071\020\072\017\073\037\074\010\075\024\076\042\077" +
    "\036\001\002\000\006\002\000\027\050\001\002\000\156" +
    "\002\uff97\004\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012" +
    "\uff97\013\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021\uff97" +
    "\022\uff97\023\uff97\024\uff97\026\uff97\027\uff97\030\uff97\031" +
    "\uff97\033\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052" +
    "\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067" +
    "\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97" +
    "\076\uff97\077\uff97\001\002\000\004\002\047\001\002\000" +
    "\004\002\001\001\002\000\050\007\043\031\034\033\032" +
    "\037\015\057\025\060\041\061\007\062\045\063\026\064" +
    "\005\065\013\070\014\071\020\072\017\073\037\074\010" +
    "\075\024\076\042\077\036\001\002\000\156\002\uff96\004" +
    "\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96" +
    "\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\022\uff96\023" +
    "\uff96\024\uff96\026\uff96\027\uff96\030\uff96\031\uff96\033\uff96" +
    "\037\uff96\040\071\041\061\042\060\043\065\044\066\045" +
    "\072\046\062\047\075\050\055\051\070\052\054\053\052" +
    "\054\073\055\057\056\053\057\uff96\060\uff96\061\uff96\062" +
    "\uff96\063\uff96\064\uff96\065\uff96\066\063\067\056\070\uff96" +
    "\071\uff96\072\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077" +
    "\uff96\001\002\000\050\007\uffb8\031\uffb8\033\uffb8\037\uffb8" +
    "\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\065" +
    "\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8" +
    "\076\uffb8\077\uffb8\001\002\000\050\007\uffb4\031\uffb4\033" +
    "\uffb4\037\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\064\uffb4\065\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\001\002\000\050\007\uffb7" +
    "\031\uffb7\033\uffb7\037\uffb7\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\065\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\001\002\000" +
    "\050\007\uffba\031\uffba\033\uffba\037\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\070\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba" +
    "\001\002\000\156\002\uffc3\004\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\033\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\077\uffc3\001\002\000\050\007" +
    "\uffb5\031\uffb5\033\uffb5\037\uffb5\057\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\071\uffb5\072" +
    "\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\001\002" +
    "\000\050\007\uffc0\031\uffc0\033\uffc0\037\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\070\uffc0" +
    "\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\001\002\000\050\007\uffc1\031\uffc1\033\uffc1\037\uffc1" +
    "\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065" +
    "\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\001\002\000\050\007\uffbc\031\uffbc\033" +
    "\uffbc\037\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\001\002\000\156\002\uffc4" +
    "\004\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\033" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070" +
    "\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\077\uffc4\001\002\000\050\007\043\031\034\033\032\037" +
    "\015\057\025\060\041\061\007\062\045\063\026\064\005" +
    "\065\013\070\014\071\020\072\017\073\037\074\010\075" +
    "\024\076\042\077\036\001\002\000\050\007\uffbf\031\uffbf" +
    "\033\uffbf\037\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\077\uffbf\001\002\000\050\007" +
    "\uffbe\031\uffbe\033\uffbe\037\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\065\uffbe\070\uffbe\071\uffbe\072" +
    "\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\001\002" +
    "\000\050\007\043\031\034\033\032\037\015\057\025\060" +
    "\041\061\007\062\045\063\026\064\005\065\013\070\014" +
    "\071\020\072\017\073\037\074\010\075\024\076\042\077" +
    "\036\001\002\000\050\007\uffb9\031\uffb9\033\uffb9\037\uffb9" +
    "\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\065" +
    "\uffb9\070\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9" +
    "\076\uffb9\077\uffb9\001\002\000\050\007\uffc2\031\uffc2\033" +
    "\uffc2\037\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074" +
    "\uffc2\075\uffc2\076\uffc2\077\uffc2\001\002\000\050\007\uffbd" +
    "\031\uffbd\033\uffbd\037\uffbd\057\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\070\uffbd\071\uffbd\072\uffbd" +
    "\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\001\002\000" +
    "\050\007\uffb6\031\uffb6\033\uffb6\037\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\070\uffb6\071" +
    "\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6" +
    "\001\002\000\050\007\043\031\034\033\032\037\015\057" +
    "\025\060\041\061\007\062\045\063\026\064\005\065\013" +
    "\070\014\071\020\072\017\073\037\074\010\075\024\076" +
    "\042\077\036\001\002\000\050\007\uffbb\031\uffbb\033\uffbb" +
    "\037\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\076\uffbb\077\uffbb\001\002\000\156\002\uffb3\004" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\013\uffb3" +
    "\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023" +
    "\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3" +
    "\037\uffb3\040\071\041\061\042\060\043\065\044\066\045" +
    "\072\046\062\047\075\050\055\051\070\052\054\053\052" +
    "\054\073\055\057\056\053\057\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\064\uffb3\065\uffb3\066\063\067\056\070\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\001\002\000\156\002\uffb1\004\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\033\uffb1\037\uffb1\040\071\041" +
    "\061\042\060\043\065\044\066\045\072\046\062\047\075" +
    "\050\055\051\070\052\054\053\052\054\073\055\057\056" +
    "\053\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\063\067\056\070\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\001\002\000\156" +
    "\002\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012" +
    "\uffb2\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\033\uffb2\037\uffb2\040\071\041\061\042\060\043\065" +
    "\044\066\045\072\046\062\047\075\050\055\051\070\052" +
    "\054\053\052\054\073\055\057\056\053\057\uffb2\060\uffb2" +
    "\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\063\067" +
    "\056\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2" +
    "\076\uffb2\077\uffb2\001\002\000\006\010\102\027\050\001" +
    "\002\000\156\002\uffa8\004\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\011\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\017\uffa8\020" +
    "\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8" +
    "\030\uffa8\031\uffa8\033\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\066\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\076\uffa8\077\uffa8\001\002\000\004\032\104" +
    "\001\002\000\004\007\105\001\002\000\004\064\106\001" +
    "\002\000\004\010\107\001\002\000\156\002\uffce\004\uffce" +
    "\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce" +
    "\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071" +
    "\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce" +
    "\001\002\000\004\064\111\001\002\000\004\026\112\001" +
    "\002\000\004\064\113\001\002\000\004\010\114\001\002" +
    "\000\156\002\uffcd\004\uffcd\006\uffcd\007\uffcd\010\uffcd\011" +
    "\uffcd\012\uffcd\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\033\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051" +
    "\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd" +
    "\075\uffcd\076\uffcd\077\uffcd\001\002\000\050\007\043\031" +
    "\034\033\032\037\015\057\025\060\041\061\007\062\045" +
    "\063\026\064\005\065\013\070\014\071\020\072\017\073" +
    "\037\074\010\075\024\076\042\077\036\001\002\000\052" +
    "\007\043\010\121\031\034\033\032\037\015\057\025\060" +
    "\041\061\007\062\045\063\026\064\005\065\013\070\014" +
    "\071\020\072\017\073\037\074\010\075\024\076\042\077" +
    "\036\001\002\000\006\010\123\026\122\001\002\000\012" +
    "\006\ufff9\010\ufff9\026\ufff9\027\050\001\002\000\160\002" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\013\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\033\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075" +
    "\uffc6\076\uffc6\077\uffc6\001\002\000\050\007\043\031\034" +
    "\033\032\037\015\057\025\060\041\061\007\062\045\063" +
    "\026\064\005\065\013\070\014\071\020\072\017\073\037" +
    "\074\010\075\024\076\042\077\036\001\002\000\160\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\033\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7" +
    "\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075" +
    "\uffc7\076\uffc7\077\uffc7\001\002\000\012\006\ufff8\010\ufff8" +
    "\026\ufff8\027\050\001\002\000\006\006\126\027\050\001" +
    "\002\000\156\002\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\033\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074" +
    "\ufff7\075\ufff7\076\ufff7\077\ufff7\001\002\000\010\034\131" +
    "\035\132\036\130\001\002\000\004\026\uffca\001\002\000" +
    "\004\026\uffcc\001\002\000\004\026\uffcb\001\002\000\004" +
    "\026\134\001\002\000\004\063\135\001\002\000\004\007" +
    "\116\001\002\000\006\005\137\010\140\001\002\000\074" +
    "\004\146\006\145\007\043\013\156\017\176\020\162\021" +
    "\160\022\155\023\147\024\172\030\163\031\034\033\032" +
    "\037\015\057\025\060\041\061\007\062\045\063\170\064" +
    "\005\065\013\070\014\071\020\072\017\073\037\074\010" +
    "\075\024\076\042\077\036\001\002\000\004\012\144\001" +
    "\002\000\004\010\142\001\002\000\004\012\143\001\002" +
    "\000\156\002\uffc9\004\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\076\uffc9\077\uffc9\001\002\000\156\002\uffc8\004" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\033\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062" +
    "\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8" +
    "\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\001\002\000\104\004\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\030\ufff6\031\ufff6\033\ufff6" +
    "\037\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064" +
    "\ufff6\065\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\076\ufff6\077\ufff6\001\002\000\004\063\302\001" +
    "\002\000\004\007\274\001\002\000\100\004\uffe8\006\uffe8" +
    "\007\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\030\uffe8\031\uffe8\033\uffe8" +
    "\037\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074\uffe8" +
    "\075\uffe8\076\uffe8\077\uffe8\001\002\000\100\004\uffeb\006" +
    "\uffeb\007\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\030\uffeb\031\uffeb\033" +
    "\uffeb\037\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\075\uffeb\076\uffeb\077\uffeb\001\002\000\102\004\uffe5" +
    "\006\uffe5\007\uffe5\013\uffe5\014\271\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\030\uffe5" +
    "\031\uffe5\033\uffe5\037\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\064\uffe5\065\uffe5\070\uffe5\071\uffe5\072\uffe5" +
    "\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\001\002\000" +
    "\074\004\146\006\270\007\043\013\156\017\176\020\162" +
    "\021\160\022\155\023\147\024\172\030\163\031\034\033" +
    "\032\037\015\057\025\060\041\061\007\062\045\063\170" +
    "\064\005\065\013\070\014\071\020\072\017\073\037\074" +
    "\010\075\024\076\042\077\036\001\002\000\100\004\ufff4" +
    "\006\ufff4\007\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\030\ufff4\031\ufff4" +
    "\033\ufff4\037\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\077\ufff4\001\002\000\004\012" +
    "\267\001\002\000\004\007\263\001\002\000\100\004\uffed" +
    "\006\uffed\007\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\030\uffed\031\uffed" +
    "\033\uffed\037\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063" +
    "\uffed\064\uffed\065\uffed\070\uffed\071\uffed\072\uffed\073\uffed" +
    "\074\uffed\075\uffed\076\uffed\077\uffed\001\002\000\004\007" +
    "\257\001\002\000\100\004\ufff2\006\ufff2\007\ufff2\013\ufff2" +
    "\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\030\ufff2\031\ufff2\033\ufff2\037\ufff2\057\ufff2" +
    "\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\001\002\000\004\007\243\001\002\000\004\007" +
    "\237\001\002\000\146\004\uff9b\006\uff9b\007\uff9b\011\234" +
    "\013\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\027\uff9b\030\uff9b\031\uff9b\033\uff9b" +
    "\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062" +
    "\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b" +
    "\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077" +
    "\uff9b\001\002\000\100\004\ufff0\006\ufff0\007\ufff0\013\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\030\ufff0\031\ufff0\033\ufff0\037\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\070" +
    "\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0" +
    "\077\ufff0\001\002\000\100\004\ufff1\006\ufff1\007\ufff1\013" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\023\ufff1\024\ufff1\030\ufff1\031\ufff1\033\ufff1\037\ufff1\057" +
    "\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1" +
    "\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\077\ufff1\001\002\000\100\004\uffef\006\uffef\007\uffef" +
    "\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\023\uffef\024\uffef\030\uffef\031\uffef\033\uffef\037\uffef" +
    "\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065" +
    "\uffef\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef" +
    "\076\uffef\077\uffef\001\002\000\150\004\uffc5\005\115\006" +
    "\uffc5\007\116\011\225\013\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\033\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5" +
    "\075\uffc5\076\uffc5\077\uffc5\001\002\000\100\004\uffec\006" +
    "\uffec\007\uffec\013\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\030\uffec\031\uffec\033" +
    "\uffec\037\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\065\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074" +
    "\uffec\075\uffec\076\uffec\077\uffec\001\002\000\050\007\043" +
    "\031\034\033\032\037\015\057\025\060\041\061\007\062" +
    "\045\063\026\064\005\065\013\070\014\071\020\072\017" +
    "\073\037\074\010\075\024\076\042\077\036\001\002\000" +
    "\100\004\uffee\006\uffee\007\uffee\013\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\030" +
    "\uffee\031\uffee\033\uffee\037\uffee\057\uffee\060\uffee\061\uffee" +
    "\062\uffee\063\uffee\064\uffee\065\uffee\070\uffee\071\uffee\072" +
    "\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077\uffee\001\002" +
    "\000\100\004\uffea\006\uffea\007\uffea\013\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\030\uffea\031\uffea\033\uffea\037\uffea\057\uffea\060\uffea\061" +
    "\uffea\062\uffea\063\uffea\064\uffea\065\uffea\070\uffea\071\uffea" +
    "\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea\077\uffea\001" +
    "\002\000\102\004\uffe9\006\uffe9\007\uffe9\013\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\027\050\030\uffe9\031\uffe9\033\uffe9\037\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\070" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9" +
    "\077\uffe9\001\002\000\004\007\177\001\002\000\050\007" +
    "\043\031\034\033\032\037\015\057\025\060\041\061\007" +
    "\062\045\063\026\064\005\065\013\070\014\071\020\072" +
    "\017\073\037\074\010\075\024\076\042\077\036\001\002" +
    "\000\006\010\201\027\050\001\002\000\004\005\202\001" +
    "\002\000\010\006\204\015\207\016\210\001\002\000\010" +
    "\006\uffdf\015\207\016\210\001\002\000\100\004\uffdc\006" +
    "\uffdc\007\uffdc\013\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\030\uffdc\031\uffdc\033" +
    "\uffdc\037\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc" +
    "\064\uffdc\065\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074" +
    "\uffdc\075\uffdc\076\uffdc\077\uffdc\001\002\000\004\006\220" +
    "\001\002\000\004\006\uffdd\001\002\000\050\007\043\031" +
    "\034\033\032\037\015\057\025\060\041\061\007\062\045" +
    "\063\026\064\005\065\013\070\014\071\020\072\017\073" +
    "\037\074\010\075\024\076\042\077\036\001\002\000\004" +
    "\011\212\001\002\000\010\006\uffe2\015\uffe2\016\uffe2\001" +
    "\002\000\072\004\146\007\043\013\156\017\176\020\162" +
    "\021\160\022\155\023\147\024\172\030\163\031\034\033" +
    "\032\037\015\057\025\060\041\061\007\062\045\063\170" +
    "\064\005\065\013\070\014\071\020\072\017\073\037\074" +
    "\010\075\024\076\042\077\036\001\002\000\074\004\146" +
    "\006\uffe0\007\043\013\156\017\176\020\162\021\160\022" +
    "\155\023\147\024\172\030\163\031\034\033\032\037\015" +
    "\057\025\060\041\061\007\062\045\063\170\064\005\065" +
    "\013\070\014\071\020\072\017\073\037\074\010\075\024" +
    "\076\042\077\036\001\002\000\100\004\ufff3\006\ufff3\007" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\030\ufff3\031\ufff3\033\ufff3\037" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075" +
    "\ufff3\076\ufff3\077\ufff3\001\002\000\006\011\216\027\050" +
    "\001\002\000\072\004\146\007\043\013\156\017\176\020" +
    "\162\021\160\022\155\023\147\024\172\030\163\031\034" +
    "\033\032\037\015\057\025\060\041\061\007\062\045\063" +
    "\170\064\005\065\013\070\014\071\020\072\017\073\037" +
    "\074\010\075\024\076\042\077\036\001\002\000\100\004" +
    "\146\006\uffe3\007\043\013\156\015\uffe3\016\uffe3\017\176" +
    "\020\162\021\160\022\155\023\147\024\172\030\163\031" +
    "\034\033\032\037\015\057\025\060\041\061\007\062\045" +
    "\063\170\064\005\065\013\070\014\071\020\072\017\073" +
    "\037\074\010\075\024\076\042\077\036\001\002\000\100" +
    "\004\uffdb\006\uffdb\007\uffdb\013\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\030\uffdb" +
    "\031\uffdb\033\uffdb\037\uffdb\057\uffdb\060\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\065\uffdb\070\uffdb\071\uffdb\072\uffdb" +
    "\073\uffdb\074\uffdb\075\uffdb\076\uffdb\077\uffdb\001\002\000" +
    "\004\006\uffde\001\002\000\010\006\uffe1\015\uffe1\016\uffe1" +
    "\001\002\000\006\012\224\027\050\001\002\000\100\004" +
    "\uffd4\006\uffd4\007\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\030\uffd4\031" +
    "\uffd4\033\uffd4\037\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\070\uffd4\071\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\001\002\000\052" +
    "\005\226\007\043\031\034\033\032\037\015\057\025\060" +
    "\041\061\007\062\045\063\026\064\005\065\013\070\014" +
    "\071\020\072\017\073\037\074\010\075\024\076\042\077" +
    "\036\001\002\000\050\007\043\031\034\033\032\037\015" +
    "\057\025\060\041\061\007\062\045\063\026\064\005\065" +
    "\013\070\014\071\020\072\017\073\037\074\010\075\024" +
    "\076\042\077\036\001\002\000\006\012\230\027\050\001" +
    "\002\000\100\004\ufffc\006\ufffc\007\ufffc\013\ufffc\015\ufffc" +
    "\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024" +
    "\ufffc\030\ufffc\031\ufffc\033\ufffc\037\ufffc\057\ufffc\060\ufffc" +
    "\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\070\ufffc\071" +
    "\ufffc\072\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc" +
    "\001\002\000\006\006\232\026\122\001\002\000\004\012" +
    "\233\001\002\000\100\004\ufffb\006\ufffb\007\ufffb\013\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023" +
    "\ufffb\024\ufffb\030\ufffb\031\ufffb\033\ufffb\037\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\070" +
    "\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb" +
    "\077\ufffb\001\002\000\050\007\043\031\034\033\032\037" +
    "\015\057\025\060\041\061\007\062\045\063\026\064\005" +
    "\065\013\070\014\071\020\072\017\073\037\074\010\075" +
    "\024\076\042\077\036\001\002\000\006\012\236\027\050" +
    "\001\002\000\100\004\ufffa\006\ufffa\007\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\030\ufffa\031\ufffa\033\ufffa\037\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\070\ufffa" +
    "\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\077" +
    "\ufffa\001\002\000\050\007\043\031\034\033\032\037\015" +
    "\057\025\060\041\061\007\062\045\063\026\064\005\065" +
    "\013\070\014\071\020\072\017\073\037\074\010\075\024" +
    "\076\042\077\036\001\002\000\006\010\241\027\050\001" +
    "\002\000\004\012\242\001\002\000\100\004\uffcf\006\uffcf" +
    "\007\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\030\uffcf\031\uffcf\033\uffcf" +
    "\037\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\077\uffcf\001\002\000\004\063\244\001" +
    "\002\000\004\011\245\001\002\000\050\007\043\031\034" +
    "\033\032\037\015\057\025\060\041\061\007\062\045\063" +
    "\026\064\005\065\013\070\014\071\020\072\017\073\037" +
    "\074\010\075\024\076\042\077\036\001\002\000\006\012" +
    "\247\027\050\001\002\000\050\007\043\031\034\033\032" +
    "\037\015\057\025\060\041\061\007\062\045\063\026\064" +
    "\005\065\013\070\014\071\020\072\017\073\037\074\010" +
    "\075\024\076\042\077\036\001\002\000\006\012\251\027" +
    "\050\001\002\000\006\066\254\067\253\001\002\000\004" +
    "\010\255\001\002\000\004\010\uffd9\001\002\000\004\010" +
    "\uffda\001\002\000\004\005\137\001\002\000\100\004\uffd8" +
    "\006\uffd8\007\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\030\uffd8\031\uffd8" +
    "\033\uffd8\037\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\077\uffd8\001\002\000\050\007" +
    "\043\031\034\033\032\037\015\057\025\060\041\061\007" +
    "\062\045\063\026\064\005\065\013\070\014\071\020\072" +
    "\017\073\037\074\010\075\024\076\042\077\036\001\002" +
    "\000\006\010\261\027\050\001\002\000\004\005\137\001" +
    "\002\000\100\004\uffd7\006\uffd7\007\uffd7\013\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\030\uffd7\031\uffd7\033\uffd7\037\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\070\uffd7\071" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7" +
    "\001\002\000\050\007\043\031\034\033\032\037\015\057" +
    "\025\060\041\061\007\062\045\063\026\064\005\065\013" +
    "\070\014\071\020\072\017\073\037\074\010\075\024\076" +
    "\042\077\036\001\002\000\006\010\265\027\050\001\002" +
    "\000\004\005\137\001\002\000\102\004\uffe7\006\uffe7\007" +
    "\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\uffe7\022\uffe7\023\uffe7\024\uffe7\030\uffe7\031\uffe7\033" +
    "\uffe7\037\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\065\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074" +
    "\uffe7\075\uffe7\076\uffe7\077\uffe7\001\002\000\100\004\uffd6" +
    "\006\uffd6\007\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\030\uffd6\031\uffd6" +
    "\033\uffd6\037\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6" +
    "\074\uffd6\075\uffd6\076\uffd6\077\uffd6\001\002\000\104\004" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\030\ufff5\031\ufff5\033\ufff5\037\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\070\ufff5\071" +
    "\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5" +
    "\001\002\000\004\005\137\001\002\000\100\004\uffe4\006" +
    "\uffe4\007\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\030\uffe4\031\uffe4\033" +
    "\uffe4\037\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4" +
    "\064\uffe4\065\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074" +
    "\uffe4\075\uffe4\076\uffe4\077\uffe4\001\002\000\100\004\uffe6" +
    "\006\uffe6\007\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\030\uffe6\031\uffe6" +
    "\033\uffe6\037\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\001\002\000\050\007" +
    "\043\031\034\033\032\037\015\057\025\060\041\061\007" +
    "\062\045\063\026\064\005\065\013\070\014\071\020\072" +
    "\017\073\037\074\010\075\024\076\042\077\036\001\002" +
    "\000\006\010\276\027\050\001\002\000\004\012\277\001" +
    "\002\000\100\004\uffd5\006\uffd5\007\uffd5\013\uffd5\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\030\uffd5\031\uffd5\033\uffd5\037\uffd5\057\uffd5\060\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\070\uffd5\071" +
    "\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5" +
    "\001\002\000\100\004\ufffd\006\ufffd\007\ufffd\013\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd" +
    "\024\ufffd\030\ufffd\031\ufffd\033\ufffd\037\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\070\ufffd" +
    "\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077" +
    "\ufffd\001\002\000\004\011\234\001\002\000\010\005\304" +
    "\011\225\012\303\001\002\000\100\004\uffff\006\uffff\007" +
    "\uffff\013\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff" +
    "\022\uffff\023\uffff\024\uffff\030\uffff\031\uffff\033\uffff\037" +
    "\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063\uffff\064\uffff" +
    "\065\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075" +
    "\uffff\076\uffff\077\uffff\001\002\000\050\007\043\031\034" +
    "\033\032\037\015\057\025\060\041\061\007\062\045\063" +
    "\026\064\005\065\013\070\014\071\020\072\017\073\037" +
    "\074\010\075\024\076\042\077\036\001\002\000\006\006" +
    "\306\027\050\001\002\000\006\011\ufff7\012\307\001\002" +
    "\000\100\004\ufffe\006\ufffe\007\ufffe\013\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\030\ufffe\031\ufffe\033\ufffe\037\ufffe\057\ufffe\060\ufffe\061" +
    "\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\070\ufffe\071\ufffe" +
    "\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\077\ufffe\001" +
    "\002\000\004\043\322\001\002\000\006\065\314\070\315" +
    "\001\002\000\004\070\313\001\002\000\156\002\uff99\004" +
    "\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99\013\uff99" +
    "\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\026\uff99\027\uff99\030\uff99\031\uff99\033\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99" +
    "\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077" +
    "\uff99\001\002\000\004\011\316\001\002\000\156\002\uff9a" +
    "\004\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033" +
    "\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070" +
    "\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a" +
    "\077\uff9a\001\002\000\004\065\317\001\002\000\004\011" +
    "\320\001\002\000\004\065\321\001\002\000\004\070\uff93" +
    "\001\002\000\004\065\323\001\002\000\004\043\324\001" +
    "\002\000\004\065\325\001\002\000\006\065\uff94\070\uff94" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\042\006\027\021\003\034\034\035\032\037" +
    "\026\040\011\041\021\042\010\043\037\044\030\045\005" +
    "\047\020\050\015\052\022\053\043\065\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\063\310\064\311\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\054\073\055\063\056\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\027\021\003\034\034\035\032" +
    "\037\026\040\011\041\021\042\010\043\037\044\030\045" +
    "\005\047\020\050\015\052\022\053\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\006\027\021\003\034\034\035\032\037\026" +
    "\040\011\041\021\042\010\043\050\044\030\045\005\047" +
    "\020\050\015\052\022\001\001\000\010\054\073\055\063" +
    "\056\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\006\027\021\003\034\034" +
    "\035\032\037\026\040\011\041\021\042\010\043\077\044" +
    "\030\045\005\047\020\050\015\052\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\006\027\021\003\034" +
    "\034\035\032\037\026\040\011\041\021\042\010\043\076" +
    "\044\030\045\005\047\020\050\015\052\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\027\021\003\034\034\035\032\037" +
    "\026\040\011\041\021\042\010\043\075\044\030\045\005" +
    "\047\020\050\015\052\022\001\001\000\002\001\001\000" +
    "\010\054\073\055\063\056\066\001\001\000\010\054\073" +
    "\055\063\056\066\001\001\000\010\054\073\055\063\056" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\006\027\021\003\034\034\035\032\037\026\040\011" +
    "\041\021\042\010\043\037\044\030\045\005\047\020\050" +
    "\015\052\022\053\124\001\001\000\042\005\116\006\027" +
    "\021\003\034\034\035\032\037\026\040\011\041\021\042" +
    "\010\043\037\044\030\045\005\047\020\050\015\052\022" +
    "\053\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\027\021\003\034\034\035\032" +
    "\037\026\040\011\041\021\042\010\043\037\044\030\045" +
    "\005\047\020\050\015\052\022\053\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\135\001\001\000\002\001\001\000\004\007\140\001\001" +
    "\000\072\003\165\004\164\006\163\010\152\011\153\012" +
    "\160\013\166\014\172\015\156\016\170\017\150\020\173" +
    "\021\003\022\147\023\151\034\034\035\032\037\026\040" +
    "\011\041\021\042\010\043\037\044\030\045\005\047\020" +
    "\050\015\052\022\053\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\277\006\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\271\001\001\000\070\003\165\004\164\006" +
    "\163\011\213\012\160\013\166\014\172\015\156\016\170" +
    "\017\150\020\173\021\003\022\147\023\151\034\034\035" +
    "\032\037\026\040\011\041\021\042\010\043\037\044\030" +
    "\045\005\047\020\050\015\052\022\053\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\027\021\003\034\034\035\032" +
    "\037\026\040\011\041\021\042\010\043\037\044\030\045" +
    "\005\047\020\050\015\052\022\053\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\006\027\021\003\034\034\035\032\037\026" +
    "\040\011\041\021\042\010\043\037\044\030\045\005\047" +
    "\020\050\015\052\022\053\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\210\026\202\027\205\030" +
    "\204\001\001\000\006\025\221\027\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\006" +
    "\027\021\003\034\034\035\032\037\026\040\011\041\021" +
    "\042\010\043\037\044\030\045\005\047\020\050\015\052" +
    "\022\053\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\003\165\004\164\006\163\010\212\011\153\012" +
    "\160\013\166\014\172\015\156\016\170\017\150\020\173" +
    "\021\003\022\147\023\151\034\034\035\032\037\026\040" +
    "\011\041\021\042\010\043\037\044\030\045\005\047\020" +
    "\050\015\052\022\053\174\001\001\000\070\003\165\004" +
    "\164\006\163\011\213\012\160\013\166\014\172\015\156" +
    "\016\170\017\150\020\173\021\003\022\147\023\151\034" +
    "\034\035\032\037\026\040\011\041\021\042\010\043\037" +
    "\044\030\045\005\047\020\050\015\052\022\053\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\072\003\165" +
    "\004\164\006\163\010\216\011\153\012\160\013\166\014" +
    "\172\015\156\016\170\017\150\020\173\021\003\022\147" +
    "\023\151\034\034\035\032\037\026\040\011\041\021\042" +
    "\010\043\037\044\030\045\005\047\020\050\015\052\022" +
    "\053\174\001\001\000\070\003\165\004\164\006\163\011" +
    "\213\012\160\013\166\014\172\015\156\016\170\017\150" +
    "\020\173\021\003\022\147\023\151\034\034\035\032\037" +
    "\026\040\011\041\021\042\010\043\037\044\030\045\005" +
    "\047\020\050\015\052\022\053\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\006\027\021\003\034\034\035" +
    "\032\037\026\040\011\041\021\042\010\043\037\044\030" +
    "\045\005\047\020\050\015\052\022\053\226\001\001\000" +
    "\042\005\230\006\027\021\003\034\034\035\032\037\026" +
    "\040\011\041\021\042\010\043\037\044\030\045\005\047" +
    "\020\050\015\052\022\053\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\006\027\021\003\034\034\035\032" +
    "\037\026\040\011\041\021\042\010\043\037\044\030\045" +
    "\005\047\020\050\015\052\022\053\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\006\027\021\003\034" +
    "\034\035\032\037\026\040\011\041\021\042\010\043\037" +
    "\044\030\045\005\047\020\050\015\052\022\053\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\006\027\021" +
    "\003\034\034\035\032\037\026\040\011\041\021\042\010" +
    "\043\037\044\030\045\005\047\020\050\015\052\022\053" +
    "\245\001\001\000\002\001\001\000\040\006\027\021\003" +
    "\034\034\035\032\037\026\040\011\041\021\042\010\043" +
    "\037\044\030\045\005\047\020\050\015\052\022\053\247" +
    "\001\001\000\002\001\001\000\004\031\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\255\001\001\000\002\001\001\000\040\006\027\021" +
    "\003\034\034\035\032\037\026\040\011\041\021\042\010" +
    "\043\037\044\030\045\005\047\020\050\015\052\022\053" +
    "\257\001\001\000\002\001\001\000\004\007\261\001\001" +
    "\000\002\001\001\000\040\006\027\021\003\034\034\035" +
    "\032\037\026\040\011\041\021\042\010\043\037\044\030" +
    "\045\005\047\020\050\015\052\022\053\263\001\001\000" +
    "\002\001\001\000\004\007\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\006\027" +
    "\021\003\034\034\035\032\037\026\040\011\041\021\042" +
    "\010\043\037\044\030\045\005\047\020\050\015\052\022" +
    "\053\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\006\027\021\003\034" +
    "\034\035\032\037\026\040\011\041\021\042\010\043\037" +
    "\044\030\045\005\047\020\050\015\052\022\053\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public objetoBase raiz;

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NUMERO ::= numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Numero num = new Numero(a); RESULT= num;
              CUP$Parser$result = new java_cup.runtime.Symbol(34/*NUMERO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // BOOLEAN ::= falso 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Booleano b = new Booleano(a);RESULT= b;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*BOOLEAN*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // BOOLEAN ::= verdadero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Booleano b = new Booleano(a);RESULT= b;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*BOOLEAN*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CADENA ::= cadena 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Cadena c= new Cadena(a); RESULT= c;
              CUP$Parser$result = new java_cup.runtime.Symbol(35/*CADENA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DATETIME ::= DATE numero dosPuntos numero dosPuntos numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		DateTime dt = new DateTime(a,b,c,d); RESULT= dt;
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*DATETIME*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DATE ::= numero division numero division numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Datee d = new Datee(a,b,c); RESULT=d;
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*DATE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= ELEMENTO_EXPRESION 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= e;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= EXPRESION punto ELEMENTO_EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ELEMENTO_EXPRESION ::= atexto 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ELEMENTO_EXPRESION ::= conteo 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ELEMENTO_EXPRESION ::= comillaSimple DATETIME comillaSimple 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ELEMENTO_EXPRESION ::= comillaSimple DATE comillaSimple 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ELEMENTO_EXPRESION ::= POS_VECTOR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ELEMENTO_EXPRESION ::= UNARIO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ELEMENTO_EXPRESION ::= alineadoEtiqueta 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ELEMENTO_EXPRESION ::= anchoEtiqueta 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ELEMENTO_EXPRESION ::= altoEtiqueta 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELEMENTO_EXPRESION ::= grupoEtiqueta 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ELEMENTO_EXPRESION ::= idEtiqueta 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELEMENTO_EXPRESION ::= conteoVector 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ELEMENTO_EXPRESION ::= cadenaVector 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELEMENTO_EXPRESION ::= OBTENER 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ELEMENTO_EXPRESION ::= EXP_RELACIONAL 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ELEMENTO_EXPRESION ::= EXP_LOGICA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ELEMENTO_EXPRESION ::= EXP_ARITMETICA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT = a;
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ELEMENTO_EXPRESION ::= abrePar EXPRESION cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELEMENTO_EXPRESION ::= SET_ELEMENTO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELEMENTO_EXPRESION ::= OBSERVADOR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ELEMENTO_EXPRESION ::= LLAMADA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELEMENTO_EXPRESION ::= ID 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELEMENTO_EXPRESION ::= BOOLEAN 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ELEMENTO_EXPRESION ::= CADENA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ELEMENTO_EXPRESION ::= NUMERO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(33/*ELEMENTO_EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CADENA_VECTOR ::= id punto atexto 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(36/*CADENA_VECTOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP_LOGICA ::= ELEMENTO_EXPRESION SIMB_LOGICA ELEMENTO_EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(32/*EXP_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP_RELACIONAL ::= ELEMENTO_EXPRESION SIMB_RELACIONAL ELEMENTO_EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(31/*EXP_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP_ARITMETICA ::= ELEMENTO_EXPRESION SIMB_ARITMETICO ELEMENTO_EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Aritmetica ar= new Aritmetica(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(30/*EXP_ARITMETICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIMB_LOGICA ::= not 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(44/*SIMB_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIMB_LOGICA ::= or 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(44/*SIMB_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SIMB_LOGICA ::= and 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(44/*SIMB_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIMB_RELACIONAL ::= igualIgual 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIMB_RELACIONAL ::= distintoA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIMB_RELACIONAL ::= mayorIgual 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIMB_RELACIONAL ::= menorIgual 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SIMB_RELACIONAL ::= mayor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SIMB_RELACIONAL ::= menor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SIMB_ARITMETICO ::= residuo 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SIMB_ARITMETICO ::= potencia 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SIMB_ARITMETICO ::= division 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SIMB_ARITMETICO ::= multiplicacion 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SIMB_ARITMETICO ::= menos 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SIMB_ARITMETICO ::= mas 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "+";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // UNARIO ::= ELEMENTO_EXPRESION menosMenos 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(29/*UNARIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // UNARIO ::= ELEMENTO_EXPRESION masMas 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(29/*UNARIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ID ::= id 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Id g = new Id(a); RESULT=g;
              CUP$Parser$result = new java_cup.runtime.Symbol(38/*ID*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LLAMADA ::= id abrePar cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(15/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LLAMADA ::= id abrePar LISTA_EXPRESIONES cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(15/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OBSERVADOR ::= observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OBSERVADOR ::= observador abrePar TIPOS_EVENTOS coma LLAMADA CUERPO cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS_EVENTOS ::= cliqueado 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS_EVENTOS ::= modificado 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS_EVENTOS ::= listo 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SET_ELEMENTO ::= setelemento abrePar cadena coma cadena cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(27/*SET_ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OBTENER ::= documento punto obtener abrePar cadena cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(26/*OBTENER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MENSAJE ::= mensaje abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(16/*MENSAJE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_ID ::= LISTA_ID coma id 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(25/*LISTA_ID*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_ID ::= id 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(25/*LISTA_ID*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= funcion id abrePar cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(24/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= funcion id abrePar LISTA_ID cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(24/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RETORNAR ::= retornar EXPRESION puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IMPRIMIR ::= imprimir abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(13/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DETENER ::= detener puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(12/*DETENER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MIENTRAS ::= mientras abrePar EXPRESION cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(11/*MIENTRAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARA ::= para abrePar id dosPuntos EXPRESION puntoComa EXPRESION puntoComa OPERADOR_PARA cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADOR_PARA ::= menosMenos 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(23/*OPERADOR_PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADOR_PARA ::= masMas 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(23/*OPERADOR_PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SELECCIONA ::= selecciona abrePar EXPRESION cierraPar abreLlave CUERPO_SELECCIONA cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(9/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SELECCIONA ::= selecciona abrePar EXPRESION cierraPar abreLlave cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(9/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_SELECCIONA ::= DEFECTO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_SELECCIONA ::= LISTA_CASOS DEFECTO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_SELECCIONA ::= LISTA_CASOS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFECTO ::= defecto dosPuntos SENTENCIAS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(21/*DEFECTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_CASOS ::= LISTA_CASOS CASO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_CASOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_CASOS ::= CASO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_CASOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASO ::= caso EXPRESION dosPuntos SENTENCIAS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(19/*CASO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= SI SINO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= SI 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SINO ::= sino CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(18/*SINO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SI ::= si abrePar EXPRESION cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*SI*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= MENSAJE 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= RETORNAR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= DETENER 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= PARA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SELECCIONA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= abreLlave SENTENCIAS cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= abreLlave cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // POS_VECTOR ::= id abreLlave EXPRESION cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*POS_VECTOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES coma EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(3/*LISTA_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(3/*LISTA_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= POS_VECTOR dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ASIGNACION ::= id dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ASIGNACION ::= id dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= dimv ASIGNACION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= dimv id abreLlave EXPRESION cierraLlave puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACION ::= dimv id puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		parser.raiz= (objetoBase)a; System.out.println(a);
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

