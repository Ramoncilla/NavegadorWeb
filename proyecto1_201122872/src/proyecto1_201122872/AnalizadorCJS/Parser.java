
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Mar 15 20:57:23 CST 2018
//----------------------------------------------------

package proyecto1_201122872.AnalizadorCJS;

import proyecto1_201122872.AnalizadorCJS.simbolosCJS;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;
import CJS.ARBOL.EXPRESION.*;
import CJS.objetoBase;
import CJS.TablaSimbolos.*;
import CJS.ARBOL.INSTRUCCIONES.*;
import CJS.ESTRUCURAS_CONTROL.*;
import Errores.ErrorS;
import Funciones.*;
import static proyecto1_201122872.Proyecto1_201122872.paginaActual;

/** CUP v0.10k generated parser.
  * @version Thu Mar 15 20:57:23 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\065\003\000\002\065" +
    "\003\000\002\003\005\000\002\003\007\000\002\003\010" +
    "\000\002\003\011\000\002\003\014\000\002\004\006\000" +
    "\002\004\011\000\002\004\005\000\002\004\005\000\002" +
    "\004\010\000\002\005\003\000\002\005\005\000\002\007" +
    "\004\000\002\007\005\000\002\010\003\000\002\010\004" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\004\000\002\012\011\000\002\012\007\000" +
    "\002\025\006\000\002\026\003\000\002\026\004\000\002" +
    "\027\005\000\002\030\003\000\002\030\004\000\002\030" +
    "\003\000\002\013\010\000\002\013\011\000\002\031\003" +
    "\000\002\031\003\000\002\014\015\000\002\015\007\000" +
    "\002\016\004\000\002\017\007\000\002\020\005\000\002" +
    "\032\010\000\002\032\007\000\002\073\006\000\002\033" +
    "\003\000\002\033\005\000\002\022\007\000\002\072\003" +
    "\000\002\072\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\034\010\000\002\035\013\000\002" +
    "\052\013\000\002\052\013\000\002\052\013\000\002\052" +
    "\013\000\002\021\006\000\002\021\005\000\002\037\004" +
    "\000\002\037\004\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\056\003\000\002\056\003\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\004\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\005\000\002\053\005\000" +
    "\002\053\004\000\002\053\005\000\002\053\005\000\002" +
    "\053\003\000\002\006\006\000\002\063\007\000\002\064" +
    "\010\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\056\003\030\004\005\007\057\013\021\017" +
    "\056\020\027\021\022\022\017\023\006\024\046\025\033" +
    "\030\032\031\043\041\025\056\044\057\040\062\037\063" +
    "\060\064\023\067\052\070\051\071\042\001\002\000\054" +
    "\006\uffa6\010\uffa6\011\uffa6\012\uffa6\026\uffa6\040\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\065" +
    "\uffa6\066\uffa6\001\002\000\004\062\351\001\002\000\004" +
    "\007\345\001\002\000\064\002\uffe3\004\uffe3\006\uffe3\007" +
    "\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\030\uffe3\031\uffe3\041" +
    "\uffe3\056\uffe3\057\uffe3\062\uffe3\063\uffe3\064\uffe3\067\uffe3" +
    "\070\uffe3\071\uffe3\001\002\000\064\002\uffe5\004\uffe5\006" +
    "\uffe5\007\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\030\uffe5\031" +
    "\uffe5\041\uffe5\056\uffe5\057\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\067\uffe5\070\uffe5\071\uffe5\001\002\000\064\002\uffe8\004" +
    "\uffe8\006\uffe8\007\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\030" +
    "\uffe8\031\uffe8\041\uffe8\056\uffe8\057\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\067\uffe8\070\uffe8\071\uffe8\001\002\000\064\002" +
    "\uffe2\004\uffe2\006\uffe2\007\uffe2\013\uffe2\015\uffe2\016\uffe2" +
    "\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\030\uffe2\031\uffe2\041\uffe2\056\uffe2\057\uffe2\062\uffe2" +
    "\063\uffe2\064\uffe2\067\uffe2\070\uffe2\071\uffe2\001\002\000" +
    "\064\002\ufff0\004\ufff0\006\ufff0\007\ufff0\013\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\030\ufff0\031\ufff0\041\ufff0\056\ufff0\057\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\067\ufff0\070\ufff0\071\ufff0\001" +
    "\002\000\044\027\uffc7\040\uffa7\041\uffa7\042\uffa7\043\uffa7" +
    "\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\065\uffa7\066\uffa7\001\002" +
    "\000\004\027\323\001\002\000\056\002\000\004\005\007" +
    "\057\013\021\017\056\020\027\021\022\022\017\023\006" +
    "\024\046\025\033\030\032\031\043\041\025\056\044\057" +
    "\040\062\037\063\060\064\023\067\052\070\051\071\042" +
    "\001\002\000\004\012\322\001\002\000\064\002\uffe7\004" +
    "\uffe7\006\uffe7\007\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\030" +
    "\uffe7\031\uffe7\041\uffe7\056\uffe7\057\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\067\uffe7\070\uffe7\071\uffe7\001\002\000\004\007" +
    "\314\001\002\000\004\007\310\001\002\000\054\006\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\026\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\065\uffa3\066" +
    "\uffa3\001\002\000\064\002\uffee\004\uffee\006\uffee\007\uffee" +
    "\013\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\030\uffee\031\uffee\041\uffee" +
    "\056\uffee\057\uffee\062\uffee\063\uffee\064\uffee\067\uffee\070" +
    "\uffee\071\uffee\001\002\000\030\007\057\031\064\041\025" +
    "\056\044\057\040\062\061\063\060\064\023\067\052\070" +
    "\051\071\042\001\002\000\054\006\uffa2\010\uffa2\011\uffa2" +
    "\012\uffa2\026\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\065\uffa2\066\uffa2\001\002\000" +
    "\004\007\273\001\002\000\004\002\uffff\001\002\000\054" +
    "\006\uffa4\010\uffa4\011\uffa4\012\uffa4\026\uffa4\040\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\065" +
    "\uffa4\066\uffa4\001\002\000\004\007\267\001\002\000\004" +
    "\062\255\001\002\000\064\002\uffec\004\uffec\006\uffec\007" +
    "\uffec\013\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\030\uffec\031\uffec\041" +
    "\uffec\056\uffec\057\uffec\062\uffec\063\uffec\064\uffec\067\uffec" +
    "\070\uffec\071\uffec\001\002\000\064\002\uffed\004\uffed\006" +
    "\uffed\007\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\030\uffed\031" +
    "\uffed\041\uffed\056\uffed\057\uffed\062\uffed\063\uffed\064\uffed" +
    "\067\uffed\070\uffed\071\uffed\001\002\000\064\002\uffeb\004" +
    "\uffeb\006\uffeb\007\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\030" +
    "\uffeb\031\uffeb\041\uffeb\056\uffeb\057\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\067\uffeb\070\uffeb\071\uffeb\001\002\000\052\005" +
    "\241\007\123\011\240\027\uffc8\040\uffa5\041\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\065\uffa5\066\uffa5" +
    "\001\002\000\054\006\uff96\010\uff96\011\uff96\012\uff96\026" +
    "\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96" +
    "\046\uff96\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054" +
    "\uff96\055\uff96\065\uff96\066\uff96\001\002\000\064\002\uffe6" +
    "\004\uffe6\006\uffe6\007\uffe6\013\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\030\uffe6\031\uffe6\041\uffe6\056\uffe6\057\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\067\uffe6\070\uffe6\071\uffe6\001\002\000\054" +
    "\006\uffa0\010\uffa0\011\uffa0\012\uffa0\026\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\065" +
    "\uffa0\066\uffa0\001\002\000\004\027\211\001\002\000\030" +
    "\007\057\031\064\041\025\056\044\057\040\062\061\063" +
    "\060\064\023\067\052\070\051\071\042\001\002\000\044" +
    "\012\207\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\065\uff9a\066\uff9a\001\002\000\030\007" +
    "\057\031\064\041\025\056\044\057\040\062\061\063\060" +
    "\064\023\067\052\070\051\071\042\001\002\000\064\002" +
    "\uffea\004\uffea\006\uffea\007\uffea\013\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\030\uffea\031\uffea\041\uffea\056\uffea\057\uffea\062\uffea" +
    "\063\uffea\064\uffea\067\uffea\070\uffea\071\uffea\001\002\000" +
    "\064\002\uffe4\004\uffe4\006\uffe4\007\uffe4\013\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\030\uffe4\031\uffe4\041\uffe4\056\uffe4\057\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\067\uffe4\070\uffe4\071\uffe4\001" +
    "\002\000\004\007\203\001\002\000\004\064\165\001\002" +
    "\000\004\002\164\001\002\000\064\002\uffe9\004\uffe9\006" +
    "\uffe9\007\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\030\uffe9\031" +
    "\uffe9\041\uffe9\056\uffe9\057\uffe9\062\uffe9\063\uffe9\064\uffe9" +
    "\067\uffe9\070\uffe9\071\uffe9\001\002\000\042\040\105\041" +
    "\075\042\074\043\101\044\102\045\106\046\077\047\111" +
    "\050\071\051\104\052\070\053\066\054\107\055\073\065" +
    "\161\066\160\001\002\000\004\007\134\001\002\000\030" +
    "\007\057\031\064\041\025\056\044\057\040\062\061\063" +
    "\060\064\023\067\052\070\051\071\042\001\002\000\054" +
    "\006\uffa1\010\uffa1\011\uffa1\012\uffa1\026\uffa1\040\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\065" +
    "\uffa1\066\uffa1\001\002\000\060\005\122\006\uffa5\007\123" +
    "\010\uffa5\011\uffa5\012\uffa5\026\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\065\uffa5\066" +
    "\uffa5\001\002\000\054\006\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\026\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\065\uffa7\066\uffa7\001\002\000\054\006" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\026\uff9a\040\uff9a\041\uff9a" +
    "\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050" +
    "\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\065\uff9a" +
    "\066\uff9a\001\002\000\004\027\115\001\002\000\044\010" +
    "\067\040\105\041\075\042\074\043\101\044\102\045\106" +
    "\046\077\047\111\050\071\051\104\052\070\053\066\054" +
    "\107\055\073\065\076\066\072\001\002\000\030\007\uffaf" +
    "\031\uffaf\041\uffaf\056\uffaf\057\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\067\uffaf\070\uffaf\071\uffaf\001\002\000\054\006\uff9e" +
    "\010\uff9e\011\uff9e\012\uff9e\026\uff9e\040\uff9e\041\uff9e\042" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\065\uff9e\066" +
    "\uff9e\001\002\000\030\007\uffae\031\uffae\041\uffae\056\uffae" +
    "\057\uffae\062\uffae\063\uffae\064\uffae\067\uffae\070\uffae\071" +
    "\uffae\001\002\000\030\007\uffb1\031\uffb1\041\uffb1\056\uffb1" +
    "\057\uffb1\062\uffb1\063\uffb1\064\uffb1\067\uffb1\070\uffb1\071" +
    "\uffb1\001\002\000\054\006\uffba\010\uffba\011\uffba\012\uffba" +
    "\026\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba" +
    "\054\uffba\055\uffba\065\uffba\066\uffba\001\002\000\030\007" +
    "\uffac\031\uffac\041\uffac\056\uffac\057\uffac\062\uffac\063\uffac" +
    "\064\uffac\067\uffac\070\uffac\071\uffac\001\002\000\030\007" +
    "\uffb7\031\uffb7\041\uffb7\056\uffb7\057\uffb7\062\uffb7\063\uffb7" +
    "\064\uffb7\067\uffb7\070\uffb7\071\uffb7\001\002\000\030\007" +
    "\uffb8\031\uffb8\041\uffb8\056\uffb8\057\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\067\uffb8\070\uffb8\071\uffb8\001\002\000\054\006" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\026\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\065\uffbb" +
    "\066\uffbb\001\002\000\030\007\uffb3\031\uffb3\041\uffb3\056" +
    "\uffb3\057\uffb3\062\uffb3\063\uffb3\064\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\001\002\000\030\007\057\031\064\041\025\056" +
    "\044\057\040\062\061\063\060\064\023\067\052\070\051" +
    "\071\042\001\002\000\030\007\uffb6\031\uffb6\041\uffb6\056" +
    "\uffb6\057\uffb6\062\uffb6\063\uffb6\064\uffb6\067\uffb6\070\uffb6" +
    "\071\uffb6\001\002\000\030\007\uffb5\031\uffb5\041\uffb5\056" +
    "\uffb5\057\uffb5\062\uffb5\063\uffb5\064\uffb5\067\uffb5\070\uffb5" +
    "\071\uffb5\001\002\000\030\007\057\031\064\041\025\056" +
    "\044\057\040\062\061\063\060\064\023\067\052\070\051" +
    "\071\042\001\002\000\030\007\uffb0\031\uffb0\041\uffb0\056" +
    "\uffb0\057\uffb0\062\uffb0\063\uffb0\064\uffb0\067\uffb0\070\uffb0" +
    "\071\uffb0\001\002\000\030\007\uffb9\031\uffb9\041\uffb9\056" +
    "\uffb9\057\uffb9\062\uffb9\063\uffb9\064\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\001\002\000\030\007\uffb4\031\uffb4\041\uffb4\056" +
    "\uffb4\057\uffb4\062\uffb4\063\uffb4\064\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\001\002\000\030\007\uffad\031\uffad\041\uffad\056" +
    "\uffad\057\uffad\062\uffad\063\uffad\064\uffad\067\uffad\070\uffad" +
    "\071\uffad\001\002\000\030\007\057\031\064\041\025\056" +
    "\044\057\040\062\061\063\060\064\023\067\052\070\051" +
    "\071\042\001\002\000\030\007\uffb2\031\uffb2\041\uffb2\056" +
    "\uffb2\057\uffb2\062\uffb2\063\uffb2\064\uffb2\067\uffb2\070\uffb2" +
    "\071\uffb2\001\002\000\054\006\uffab\010\uffab\011\uffab\012" +
    "\uffab\026\uffab\040\105\041\075\042\074\043\101\044\102" +
    "\045\106\046\077\047\111\050\071\051\104\052\070\053" +
    "\066\054\107\055\073\065\076\066\072\001\002\000\054" +
    "\006\uffa9\010\uffa9\011\uffa9\012\uffa9\026\uffa9\040\105\041" +
    "\075\042\074\043\101\044\102\045\106\046\077\047\111" +
    "\050\071\051\104\052\070\053\066\054\107\055\073\065" +
    "\076\066\072\001\002\000\054\006\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\026\uffaa\040\105\041\075\042\074\043\101\044" +
    "\102\045\106\046\077\047\111\050\071\051\104\052\070" +
    "\053\066\054\107\055\073\065\076\066\072\001\002\000" +
    "\004\032\116\001\002\000\004\007\117\001\002\000\030" +
    "\007\057\031\064\041\025\056\044\057\040\062\061\063" +
    "\060\064\023\067\052\070\051\071\042\001\002\000\044" +
    "\010\121\040\105\041\075\042\074\043\101\044\102\045" +
    "\106\046\077\047\111\050\071\051\104\052\070\053\066" +
    "\054\107\055\073\065\076\066\072\001\002\000\056\006" +
    "\uffc3\010\uffc3\011\uffc3\012\uffc3\026\uffc3\027\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\065\uffc3\066\uffc3\001\002\000\030\007\057\031\064\041" +
    "\025\056\044\057\040\062\061\063\060\064\023\067\052" +
    "\070\051\071\042\001\002\000\032\007\057\010\124\031" +
    "\064\041\025\056\044\057\040\062\061\063\060\064\023" +
    "\067\052\070\051\071\042\001\002\000\054\006\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\026\uffbc\040\uffbc\041\uffbc\042\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\065\uffbc\066\uffbc" +
    "\001\002\000\006\010\130\026\127\001\002\000\050\006" +
    "\ufff4\010\ufff4\026\ufff4\040\105\041\075\042\074\043\101" +
    "\044\102\045\106\046\077\047\111\050\071\051\104\052" +
    "\070\053\066\054\107\055\073\065\076\066\072\001\002" +
    "\000\030\007\057\031\064\041\025\056\044\057\040\062" +
    "\061\063\060\064\023\067\052\070\051\071\042\001\002" +
    "\000\054\006\uffbd\010\uffbd\011\uffbd\012\uffbd\026\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\065\uffbd\066\uffbd\001\002\000\050\006\ufff3\010\ufff3" +
    "\026\ufff3\040\105\041\075\042\074\043\101\044\102\045" +
    "\106\046\077\047\111\050\071\051\104\052\070\053\066" +
    "\054\107\055\073\065\076\066\072\001\002\000\044\006" +
    "\133\040\105\041\075\042\074\043\101\044\102\045\106" +
    "\046\077\047\111\050\071\051\104\052\070\053\066\054" +
    "\107\055\073\065\076\066\072\001\002\000\054\006\uff99" +
    "\010\uff99\011\uff99\012\uff99\026\uff99\040\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\065\uff99\066" +
    "\uff99\001\002\000\030\007\057\031\064\041\025\056\044" +
    "\057\040\062\061\063\060\064\023\067\052\070\051\071" +
    "\042\001\002\000\044\010\136\040\105\041\075\042\074" +
    "\043\101\044\102\045\106\046\077\047\111\050\071\051" +
    "\104\052\070\053\066\054\107\055\073\065\076\066\072" +
    "\001\002\000\004\005\137\001\002\000\010\006\141\015" +
    "\144\016\145\001\002\000\010\006\uffda\015\144\016\145" +
    "\001\002\000\064\002\uffd7\004\uffd7\006\uffd7\007\uffd7\013" +
    "\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\030\uffd7\031\uffd7\041\uffd7\056" +
    "\uffd7\057\uffd7\062\uffd7\063\uffd7\064\uffd7\067\uffd7\070\uffd7" +
    "\071\uffd7\001\002\000\004\006\155\001\002\000\004\006" +
    "\uffd8\001\002\000\030\007\057\031\064\041\025\056\044" +
    "\057\040\062\061\063\060\064\023\067\052\070\051\071" +
    "\042\001\002\000\004\011\147\001\002\000\010\006\uffdd" +
    "\015\uffdd\016\uffdd\001\002\000\054\004\005\007\057\013" +
    "\021\017\056\020\027\021\022\022\017\023\006\024\046" +
    "\025\033\030\032\031\043\041\025\056\044\057\040\062" +
    "\037\063\060\064\023\067\052\070\051\071\042\001\002" +
    "\000\056\004\005\006\uffdb\007\057\013\021\017\056\020" +
    "\027\021\022\022\017\023\006\024\046\025\033\030\032" +
    "\031\043\041\025\056\044\057\040\062\037\063\060\064" +
    "\023\067\052\070\051\071\042\001\002\000\064\002\uffef" +
    "\004\uffef\006\uffef\007\uffef\013\uffef\015\uffef\016\uffef\017" +
    "\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef" +
    "\030\uffef\031\uffef\041\uffef\056\uffef\057\uffef\062\uffef\063" +
    "\uffef\064\uffef\067\uffef\070\uffef\071\uffef\001\002\000\044" +
    "\011\153\040\105\041\075\042\074\043\101\044\102\045" +
    "\106\046\077\047\111\050\071\051\104\052\070\053\066" +
    "\054\107\055\073\065\076\066\072\001\002\000\054\004" +
    "\005\007\057\013\021\017\056\020\027\021\022\022\017" +
    "\023\006\024\046\025\033\030\032\031\043\041\025\056" +
    "\044\057\040\062\037\063\060\064\023\067\052\070\051" +
    "\071\042\001\002\000\062\004\005\006\uffde\007\057\013" +
    "\021\015\uffde\016\uffde\017\056\020\027\021\022\022\017" +
    "\023\006\024\046\025\033\030\032\031\043\041\025\056" +
    "\044\057\040\062\037\063\060\064\023\067\052\070\051" +
    "\071\042\001\002\000\064\002\uffd6\004\uffd6\006\uffd6\007" +
    "\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\030\uffd6\031\uffd6\041" +
    "\uffd6\056\uffd6\057\uffd6\062\uffd6\063\uffd6\064\uffd6\067\uffd6" +
    "\070\uffd6\071\uffd6\001\002\000\004\006\uffd9\001\002\000" +
    "\010\006\uffdc\015\uffdc\016\uffdc\001\002\000\044\012\163" +
    "\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\065\uffba\066\uffba\001\002\000\044\012\162\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\065\uffbb\066\uffbb\001\002\000\064\002\ufff7\004\ufff7" +
    "\006\ufff7\007\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\030\ufff7" +
    "\031\ufff7\041\ufff7\056\ufff7\057\ufff7\062\ufff7\063\ufff7\064" +
    "\ufff7\067\ufff7\070\ufff7\071\ufff7\001\002\000\064\002\ufff6" +
    "\004\ufff6\006\ufff6\007\ufff6\013\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\030\ufff6\031\ufff6\041\ufff6\056\ufff6\057\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\067\ufff6\070\ufff6\071\ufff6\001\002\000\004" +
    "\002\001\001\002\000\004\043\177\001\002\000\004\067" +
    "\176\001\002\000\006\064\170\067\171\001\002\000\004" +
    "\011\172\001\002\000\054\006\uff9c\010\uff9c\011\uff9c\012" +
    "\uff9c\026\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\065\uff9c\066\uff9c\001\002\000\004" +
    "\064\173\001\002\000\004\011\174\001\002\000\004\064" +
    "\175\001\002\000\004\067\uff97\001\002\000\054\006\uff9b" +
    "\010\uff9b\011\uff9b\012\uff9b\026\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\065\uff9b\066" +
    "\uff9b\001\002\000\004\064\200\001\002\000\004\043\201" +
    "\001\002\000\004\064\202\001\002\000\006\064\uff98\067" +
    "\uff98\001\002\000\004\010\204\001\002\000\054\006\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\026\uff9f\040\uff9f\041\uff9f\042" +
    "\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f" +
    "\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\065\uff9f\066" +
    "\uff9f\001\002\000\044\012\206\040\105\041\075\042\074" +
    "\043\101\044\102\045\106\046\077\047\111\050\071\051" +
    "\104\052\070\053\066\054\107\055\073\065\076\066\072" +
    "\001\002\000\064\002\uffcf\004\uffcf\006\uffcf\007\uffcf\013" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\030\uffcf\031\uffcf\041\uffcf\056" +
    "\uffcf\057\uffcf\062\uffcf\063\uffcf\064\uffcf\067\uffcf\070\uffcf" +
    "\071\uffcf\001\002\000\064\002\uffe1\004\uffe1\006\uffe1\007" +
    "\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\023\uffe1\024\uffe1\025\uffe1\030\uffe1\031\uffe1\041" +
    "\uffe1\056\uffe1\057\uffe1\062\uffe1\063\uffe1\064\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\001\002\000\054\006\uffa8\010\uffa8\011" +
    "\uffa8\012\uffa8\026\uffa8\040\105\041\075\042\074\043\101" +
    "\044\102\045\106\046\077\047\111\050\071\051\104\052" +
    "\070\053\066\054\uffa8\055\uffa8\065\076\066\072\001\002" +
    "\000\006\032\116\037\212\001\002\000\004\007\213\001" +
    "\002\000\010\034\215\035\216\036\214\001\002\000\004" +
    "\026\uffc4\001\002\000\004\026\uffc6\001\002\000\004\026" +
    "\uffc5\001\002\000\004\026\220\001\002\000\006\025\222" +
    "\062\223\001\002\000\004\010\236\001\002\000\004\007" +
    "\227\001\002\000\004\007\123\001\002\000\004\010\225" +
    "\001\002\000\004\012\226\001\002\000\064\002\uffbe\004" +
    "\uffbe\006\uffbe\007\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\030" +
    "\uffbe\031\uffbe\041\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe" +
    "\064\uffbe\067\uffbe\070\uffbe\071\uffbe\001\002\000\004\010" +
    "\230\001\002\000\004\005\231\001\002\000\056\004\005" +
    "\006\233\007\057\013\021\017\056\020\027\021\022\022" +
    "\017\023\006\024\046\025\033\030\032\031\043\041\025" +
    "\056\044\057\040\062\037\063\060\064\023\067\052\070" +
    "\051\071\042\001\002\000\004\010\uffcc\001\002\000\070" +
    "\002\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\030\ufff2\031\ufff2\041\ufff2\056" +
    "\ufff2\057\ufff2\062\ufff2\063\ufff2\064\ufff2\067\ufff2\070\ufff2" +
    "\071\ufff2\001\002\000\056\004\005\006\235\007\057\013" +
    "\021\017\056\020\027\021\022\022\017\023\006\024\046" +
    "\025\033\030\032\031\043\041\025\056\044\057\040\062" +
    "\037\063\060\064\023\067\052\070\051\071\042\001\002" +
    "\000\070\002\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\030\ufff1\031\ufff1\041" +
    "\ufff1\056\ufff1\057\ufff1\062\ufff1\063\ufff1\064\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\001\002\000\004\012\237\001\002\000" +
    "\064\002\uffc0\004\uffc0\006\uffc0\007\uffc0\013\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\030\uffc0\031\uffc0\041\uffc0\056\uffc0\057\uffc0" +
    "\062\uffc0\063\uffc0\064\uffc0\067\uffc0\070\uffc0\071\uffc0\001" +
    "\002\000\032\005\247\007\057\031\064\041\025\056\044" +
    "\057\040\062\061\063\060\064\023\067\052\070\051\071" +
    "\042\001\002\000\030\007\057\031\064\041\025\056\044" +
    "\057\040\062\061\063\060\064\023\067\052\070\051\071" +
    "\042\001\002\000\044\006\243\040\105\041\075\042\074" +
    "\043\101\044\102\045\106\046\077\047\111\050\071\051" +
    "\104\052\070\053\066\054\107\055\073\065\076\066\072" +
    "\001\002\000\044\011\244\040\uff99\041\uff99\042\uff99\043" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\055\uff99\065\uff99\066\uff99\001" +
    "\002\000\030\007\057\031\064\041\025\056\044\057\040" +
    "\062\061\063\060\064\023\067\052\070\051\071\042\001" +
    "\002\000\044\012\246\040\105\041\075\042\074\043\101" +
    "\044\102\045\106\046\077\047\111\050\071\051\104\052" +
    "\070\053\066\054\107\055\073\065\076\066\072\001\002" +
    "\000\064\002\ufff8\004\ufff8\006\ufff8\007\ufff8\013\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8" +
    "\024\ufff8\025\ufff8\030\ufff8\031\ufff8\041\ufff8\056\ufff8\057" +
    "\ufff8\062\ufff8\063\ufff8\064\ufff8\067\ufff8\070\ufff8\071\ufff8" +
    "\001\002\000\030\007\057\031\064\041\025\056\044\057" +
    "\040\062\061\063\060\064\023\067\052\070\051\071\042" +
    "\001\002\000\044\012\251\040\105\041\075\042\074\043" +
    "\101\044\102\045\106\046\077\047\111\050\071\051\104" +
    "\052\070\053\066\054\107\055\073\065\076\066\072\001" +
    "\002\000\064\002\ufff9\004\ufff9\006\ufff9\007\ufff9\013\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\025\ufff9\030\ufff9\031\ufff9\041\ufff9\056\ufff9" +
    "\057\ufff9\062\ufff9\063\ufff9\064\ufff9\067\ufff9\070\ufff9\071" +
    "\ufff9\001\002\000\006\006\253\026\127\001\002\000\004" +
    "\012\254\001\002\000\064\002\ufff5\004\ufff5\006\ufff5\007" +
    "\ufff5\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\024\ufff5\025\ufff5\030\ufff5\031\ufff5\041" +
    "\ufff5\056\ufff5\057\ufff5\062\ufff5\063\ufff5\064\ufff5\067\ufff5" +
    "\070\ufff5\071\ufff5\001\002\000\004\007\256\001\002\000" +
    "\006\010\260\062\261\001\002\000\006\010\264\026\263" +
    "\001\002\000\004\005\231\001\002\000\006\010\uffcb\026" +
    "\uffcb\001\002\000\064\002\uffcd\004\uffcd\006\uffcd\007\uffcd" +
    "\013\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022" +
    "\uffcd\023\uffcd\024\uffcd\025\uffcd\030\uffcd\031\uffcd\041\uffcd" +
    "\056\uffcd\057\uffcd\062\uffcd\063\uffcd\064\uffcd\067\uffcd\070" +
    "\uffcd\071\uffcd\001\002\000\004\062\266\001\002\000\004" +
    "\005\231\001\002\000\064\002\uffce\004\uffce\006\uffce\007" +
    "\uffce\013\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\030\uffce\031\uffce\041" +
    "\uffce\056\uffce\057\uffce\062\uffce\063\uffce\064\uffce\067\uffce" +
    "\070\uffce\071\uffce\001\002\000\006\010\uffca\026\uffca\001" +
    "\002\000\030\007\057\031\064\041\025\056\044\057\040" +
    "\062\061\063\060\064\023\067\052\070\051\071\042\001" +
    "\002\000\044\010\271\040\105\041\075\042\074\043\101" +
    "\044\102\045\106\046\077\047\111\050\071\051\104\052" +
    "\070\053\066\054\107\055\073\065\076\066\072\001\002" +
    "\000\004\012\272\001\002\000\064\002\uffc9\004\uffc9\006" +
    "\uffc9\007\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\030\uffc9\031" +
    "\uffc9\041\uffc9\056\uffc9\057\uffc9\062\uffc9\063\uffc9\064\uffc9" +
    "\067\uffc9\070\uffc9\071\uffc9\001\002\000\004\062\274\001" +
    "\002\000\004\011\275\001\002\000\030\007\057\031\064" +
    "\041\025\056\044\057\040\062\061\063\060\064\023\067" +
    "\052\070\051\071\042\001\002\000\044\012\277\040\105" +
    "\041\075\042\074\043\101\044\102\045\106\046\077\047" +
    "\111\050\071\051\104\052\070\053\066\054\107\055\073" +
    "\065\076\066\072\001\002\000\030\007\057\031\064\041" +
    "\025\056\044\057\040\062\061\063\060\064\023\067\052" +
    "\070\051\071\042\001\002\000\044\012\301\040\105\041" +
    "\075\042\074\043\101\044\102\045\106\046\077\047\111" +
    "\050\071\051\104\052\070\053\066\054\107\055\073\065" +
    "\076\066\072\001\002\000\006\065\304\066\303\001\002" +
    "\000\004\010\305\001\002\000\004\010\uffd4\001\002\000" +
    "\004\010\uffd5\001\002\000\004\005\231\001\002\000\064" +
    "\002\uffd3\004\uffd3\006\uffd3\007\uffd3\013\uffd3\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\030\uffd3\031\uffd3\041\uffd3\056\uffd3\057\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\067\uffd3\070\uffd3\071\uffd3\001\002" +
    "\000\054\006\uff9d\010\uff9d\011\uff9d\012\uff9d\026\uff9d\040" +
    "\uff9d\041\uff9d\042\074\043\101\044\102\045\106\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055" +
    "\uff9d\065\076\066\072\001\002\000\030\007\057\031\064" +
    "\041\025\056\044\057\040\062\061\063\060\064\023\067" +
    "\052\070\051\071\042\001\002\000\044\010\312\040\105" +
    "\041\075\042\074\043\101\044\102\045\106\046\077\047" +
    "\111\050\071\051\104\052\070\053\066\054\107\055\073" +
    "\065\076\066\072\001\002\000\004\005\231\001\002\000" +
    "\064\002\uffd2\004\uffd2\006\uffd2\007\uffd2\013\uffd2\015\uffd2" +
    "\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\025\uffd2\030\uffd2\031\uffd2\041\uffd2\056\uffd2\057\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\067\uffd2\070\uffd2\071\uffd2\001" +
    "\002\000\030\007\057\031\064\041\025\056\044\057\040" +
    "\062\061\063\060\064\023\067\052\070\051\071\042\001" +
    "\002\000\044\010\316\040\105\041\075\042\074\043\101" +
    "\044\102\045\106\046\077\047\111\050\071\051\104\052" +
    "\070\053\066\054\107\055\073\065\076\066\072\001\002" +
    "\000\004\005\231\001\002\000\066\002\uffdf\004\uffdf\006" +
    "\uffdf\007\uffdf\013\uffdf\014\320\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\030" +
    "\uffdf\031\uffdf\041\uffdf\056\uffdf\057\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\067\uffdf\070\uffdf\071\uffdf\001\002\000\004\005" +
    "\231\001\002\000\064\002\uffe0\004\uffe0\006\uffe0\007\uffe0" +
    "\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\030\uffe0\031\uffe0\041\uffe0" +
    "\056\uffe0\057\uffe0\062\uffe0\063\uffe0\064\uffe0\067\uffe0\070" +
    "\uffe0\071\uffe0\001\002\000\064\002\uffd1\004\uffd1\006\uffd1" +
    "\007\uffd1\013\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\030\uffd1\031\uffd1" +
    "\041\uffd1\056\uffd1\057\uffd1\062\uffd1\063\uffd1\064\uffd1\067" +
    "\uffd1\070\uffd1\071\uffd1\001\002\000\006\033\324\037\325" +
    "\001\002\000\004\007\337\001\002\000\004\007\326\001" +
    "\002\000\010\034\215\035\216\036\214\001\002\000\004" +
    "\026\330\001\002\000\006\025\222\062\223\001\002\000" +
    "\004\010\335\001\002\000\004\010\333\001\002\000\004" +
    "\012\334\001\002\000\064\002\uffbf\004\uffbf\006\uffbf\007" +
    "\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\030\uffbf\031\uffbf\041" +
    "\uffbf\056\uffbf\057\uffbf\062\uffbf\063\uffbf\064\uffbf\067\uffbf" +
    "\070\uffbf\071\uffbf\001\002\000\004\012\336\001\002\000" +
    "\064\002\uffc1\004\uffc1\006\uffc1\007\uffc1\013\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\030\uffc1\031\uffc1\041\uffc1\056\uffc1\057\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\067\uffc1\070\uffc1\071\uffc1\001" +
    "\002\000\030\007\057\031\064\041\025\056\044\057\040" +
    "\062\061\063\060\064\023\067\052\070\051\071\042\001" +
    "\002\000\044\026\341\040\105\041\075\042\074\043\101" +
    "\044\102\045\106\046\077\047\111\050\071\051\104\052" +
    "\070\053\066\054\107\055\073\065\076\066\072\001\002" +
    "\000\030\007\057\031\064\041\025\056\044\057\040\062" +
    "\061\063\060\064\023\067\052\070\051\071\042\001\002" +
    "\000\044\010\343\040\105\041\075\042\074\043\101\044" +
    "\102\045\106\046\077\047\111\050\071\051\104\052\070" +
    "\053\066\054\107\055\073\065\076\066\072\001\002\000" +
    "\004\012\344\001\002\000\064\002\uffc2\004\uffc2\006\uffc2" +
    "\007\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\030\uffc2\031\uffc2" +
    "\041\uffc2\056\uffc2\057\uffc2\062\uffc2\063\uffc2\064\uffc2\067" +
    "\uffc2\070\uffc2\071\uffc2\001\002\000\030\007\057\031\064" +
    "\041\025\056\044\057\040\062\061\063\060\064\023\067" +
    "\052\070\051\071\042\001\002\000\044\010\347\040\105" +
    "\041\075\042\074\043\101\044\102\045\106\046\077\047" +
    "\111\050\071\051\104\052\070\053\066\054\107\055\073" +
    "\065\076\066\072\001\002\000\004\012\350\001\002\000" +
    "\064\002\uffd0\004\uffd0\006\uffd0\007\uffd0\013\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\030\uffd0\031\uffd0\041\uffd0\056\uffd0\057\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\067\uffd0\070\uffd0\071\uffd0\001" +
    "\002\000\010\005\354\011\352\012\353\001\002\000\032" +
    "\005\365\007\057\031\064\041\025\056\044\057\040\062" +
    "\061\063\060\064\023\067\052\070\051\071\042\001\002" +
    "\000\064\002\ufffe\004\ufffe\006\ufffe\007\ufffe\013\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe" +
    "\024\ufffe\025\ufffe\030\ufffe\031\ufffe\041\ufffe\056\ufffe\057" +
    "\ufffe\062\ufffe\063\ufffe\064\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\001\002\000\030\007\057\031\064\041\025\056\044\057" +
    "\040\062\061\063\060\064\023\067\052\070\051\071\042" +
    "\001\002\000\044\006\356\040\105\041\075\042\074\043" +
    "\101\044\102\045\106\046\077\047\111\050\071\051\104" +
    "\052\070\053\066\054\107\055\073\065\076\066\072\001" +
    "\002\000\006\011\357\012\360\001\002\000\004\005\361" +
    "\001\002\000\064\002\ufffc\004\ufffc\006\ufffc\007\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\030\ufffc\031\ufffc\041\ufffc\056" +
    "\ufffc\057\ufffc\062\ufffc\063\ufffc\064\ufffc\067\ufffc\070\ufffc" +
    "\071\ufffc\001\002\000\030\007\057\031\064\041\025\056" +
    "\044\057\040\062\061\063\060\064\023\067\052\070\051" +
    "\071\042\001\002\000\006\006\363\026\127\001\002\000" +
    "\004\012\364\001\002\000\064\002\ufffa\004\ufffa\006\ufffa" +
    "\007\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa\030\ufffa\031\ufffa" +
    "\041\ufffa\056\ufffa\057\ufffa\062\ufffa\063\ufffa\064\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\001\002\000\030\007\057\031\064" +
    "\041\025\056\044\057\040\062\061\063\060\064\023\067" +
    "\052\070\051\071\042\001\002\000\044\012\367\040\105" +
    "\041\075\042\074\043\101\044\102\045\106\046\077\047" +
    "\111\050\071\051\104\052\070\053\066\054\107\055\073" +
    "\065\076\066\072\001\002\000\064\002\ufffd\004\ufffd\006" +
    "\ufffd\007\ufffd\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd" +
    "\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\030\ufffd\031" +
    "\ufffd\041\ufffd\056\ufffd\057\ufffd\062\ufffd\063\ufffd\064\ufffd" +
    "\067\ufffd\070\ufffd\071\ufffd\001\002\000\006\006\371\026" +
    "\127\001\002\000\004\012\372\001\002\000\064\002\ufffb" +
    "\004\ufffb\006\ufffb\007\ufffb\013\ufffb\015\ufffb\016\ufffb\017" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\030\ufffb\031\ufffb\041\ufffb\056\ufffb\057\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\067\ufffb\070\ufffb\071\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\370\000\060\003\034\004\033\006\030\010\015\011" +
    "\012\012\023\013\035\014\046\015\017\016\040\017\007" +
    "\020\047\021\044\022\006\032\011\034\013\035\053\037" +
    "\003\047\025\052\010\053\054\065\052\072\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\003\034\004\033\006\030\011\150\012\023" +
    "\013\035\014\046\015\017\016\040\017\007\020\047\021" +
    "\044\022\006\032\011\034\013\035\053\037\003\047\025" +
    "\052\010\053\054\072\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\030\021\062\034" +
    "\061\037\003\047\025\053\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\030\021\062\034\061\037\003\047\025\053" +
    "\207\001\001\000\002\001\001\000\016\006\030\021\062" +
    "\034\061\037\003\047\025\053\204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\063\166" +
    "\064\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\054\107\055\077\056\102\001\001\000\002\001\001" +
    "\000\016\006\030\021\062\034\061\037\003\047\025\053" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\107\055\077\056\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\030\021" +
    "\062\034\061\037\003\047\025\053\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\030\021\062\034" +
    "\061\037\003\047\025\053\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\030\021\062\034\061\037\003\047\025\053\111" +
    "\001\001\000\002\001\001\000\010\054\107\055\077\056" +
    "\102\001\001\000\010\054\107\055\077\056\102\001\001" +
    "\000\010\054\107\055\077\056\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\030\021\062\034\061" +
    "\037\003\047\025\053\117\001\001\000\010\054\107\055" +
    "\077\056\102\001\001\000\002\001\001\000\016\006\030" +
    "\021\062\034\061\037\003\047\025\053\131\001\001\000" +
    "\020\005\124\006\030\021\062\034\061\037\003\047\025" +
    "\053\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\054\107\055\077\056\102\001\001\000\016\006\030" +
    "\021\062\034\061\037\003\047\025\053\130\001\001\000" +
    "\002\001\001\000\010\054\107\055\077\056\102\001\001" +
    "\000\010\054\107\055\077\056\102\001\001\000\002\001" +
    "\001\000\016\006\030\021\062\034\061\037\003\047\025" +
    "\053\134\001\001\000\010\054\107\055\077\056\102\001" +
    "\001\000\002\001\001\000\012\025\145\026\137\027\142" +
    "\030\141\001\001\000\006\025\156\027\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\030\021\062\034\061\037\003\047\025\053\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\034" +
    "\004\033\006\030\010\147\011\012\012\023\013\035\014" +
    "\046\015\017\016\040\017\007\020\047\021\044\022\006" +
    "\032\011\034\013\035\053\037\003\047\025\052\010\053" +
    "\054\072\014\001\001\000\054\003\034\004\033\006\030" +
    "\011\150\012\023\013\035\014\046\015\017\016\040\017" +
    "\007\020\047\021\044\022\006\032\011\034\013\035\053" +
    "\037\003\047\025\052\010\053\054\072\014\001\001\000" +
    "\002\001\001\000\010\054\107\055\077\056\102\001\001" +
    "\000\056\003\034\004\033\006\030\010\153\011\012\012" +
    "\023\013\035\014\046\015\017\016\040\017\007\020\047" +
    "\021\044\022\006\032\011\034\013\035\053\037\003\047" +
    "\025\052\010\053\054\072\014\001\001\000\054\003\034" +
    "\004\033\006\030\011\150\012\023\013\035\014\046\015" +
    "\017\016\040\017\007\020\047\021\044\022\006\032\011" +
    "\034\013\035\053\037\003\047\025\052\010\053\054\072" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\054\107\055" +
    "\077\056\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\054\107\055\077\056\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\223\073\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\231\001\001\000\056\003\034\004\033\006\030\010" +
    "\233\011\012\012\023\013\035\014\046\015\017\016\040" +
    "\017\007\020\047\021\044\022\006\032\011\034\013\035" +
    "\053\037\003\047\025\052\010\053\054\072\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\003\034\004" +
    "\033\006\030\011\150\012\023\013\035\014\046\015\017" +
    "\016\040\017\007\020\047\021\044\022\006\032\011\034" +
    "\013\035\053\037\003\047\025\052\010\053\054\072\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\030\021\062\034\061\037\003\047\025" +
    "\053\247\001\001\000\016\006\030\021\062\034\061\037" +
    "\003\047\025\053\241\001\001\000\010\054\107\055\077" +
    "\056\102\001\001\000\002\001\001\000\016\006\030\021" +
    "\062\034\061\037\003\047\025\053\244\001\001\000\010" +
    "\054\107\055\077\056\102\001\001\000\002\001\001\000" +
    "\020\005\251\006\030\021\062\034\061\037\003\047\025" +
    "\053\125\001\001\000\010\054\107\055\077\056\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\256\001" +
    "\001\000\002\001\001\000\004\007\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\006\030\021\062\034\061\037\003\047\025\053\267\001" +
    "\001\000\010\054\107\055\077\056\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\030\021\062\034\061\037\003\047\025" +
    "\053\275\001\001\000\010\054\107\055\077\056\102\001" +
    "\001\000\016\006\030\021\062\034\061\037\003\047\025" +
    "\053\277\001\001\000\010\054\107\055\077\056\102\001" +
    "\001\000\004\031\301\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\305\001\001\000" +
    "\002\001\001\000\010\054\107\055\077\056\102\001\001" +
    "\000\016\006\030\021\062\034\061\037\003\047\025\053" +
    "\310\001\001\000\010\054\107\055\077\056\102\001\001" +
    "\000\004\007\312\001\001\000\002\001\001\000\016\006" +
    "\030\021\062\034\061\037\003\047\025\053\314\001\001" +
    "\000\010\054\107\055\077\056\102\001\001\000\004\007" +
    "\316\001\001\000\002\001\001\000\004\007\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\326\001\001" +
    "\000\002\001\001\000\006\021\331\073\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\006" +
    "\030\021\062\034\061\037\003\047\025\053\337\001\001" +
    "\000\010\054\107\055\077\056\102\001\001\000\016\006" +
    "\030\021\062\034\061\037\003\047\025\053\341\001\001" +
    "\000\010\054\107\055\077\056\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\030\021\062\034\061" +
    "\037\003\047\025\053\345\001\001\000\010\054\107\055" +
    "\077\056\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\030\021\062\034\061\037" +
    "\003\047\025\053\365\001\001\000\002\001\001\000\016" +
    "\006\030\021\062\034\061\037\003\047\025\053\354\001" +
    "\001\000\010\054\107\055\077\056\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\361\006\030\021\062\034\061\037\003\047\025\053\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\367\006\030\021\062\034\061\037\003" +
    "\047\025\053\125\001\001\000\010\054\107\055\077\056" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public objetoBase raiz;
	public List<objetoBase>listaSentencias;

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				ErrorS nuevo = new ErrorS(s.right,s.left,"Sintactico","El simbolo "+s.value+", no es valido");
paginaActual.erroresPagina.insertarError(nuevo);
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
				ErrorS nuevo = new ErrorS(s.right,s.left,"Sintactico","El simbolo "+s.value+", no es valido");
paginaActual.erroresPagina.insertarError(nuevo);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // BOOLEAN ::= valBool 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Booleano b = new Booleano(a);RESULT= b;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*BOOLEAN*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DATETIME ::= DATE numero dosPuntos numero dosPuntos numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		DateTime dt = new DateTime(a,b,c,d); RESULT= dt;
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*DATETIME*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DATE ::= numero division numero division numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Datee d = new Datee(a,b,c); RESULT=d;
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*DATE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // POS_VECTOR ::= id abreLlave EXPRESION cierraLlave 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new posVector(i,exp);
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*POS_VECTOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= LLAMADA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= comillaSimple DATETIME comillaSimple 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= comillaSimple DATE comillaSimple 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= menos EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Negativo g= new Negativo(a); RESULT= g;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= abrePar EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= cadenaVector abrePar cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new aTexto(a);
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= conteoVector 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= new Conteo(a);
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= cadena 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Cadena cad = new Cadena(a); RESULT = cad;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= BOOLEAN 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Numero n = new Numero(a); RESULT= n;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= POS_VECTOR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= id 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Id i= new Id(a); RESULT= i;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= UNARIO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= OBTENER 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= not EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		NOT n = new NOT(a); RESULT=n;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION SIMB_LOGICA EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Logica ar= new Logica(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION SIMB_RELACIONAL EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Relacional ar= new Relacional(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION SIMB_ARITMETICO EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Aritmetica ar= new Aritmetica(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SIMB_LOGICA ::= or 
            {
              Object RESULT = null;
		RESULT="||";
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*SIMB_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SIMB_LOGICA ::= and 
            {
              Object RESULT = null;
		RESULT="&&";
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*SIMB_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SIMB_RELACIONAL ::= igualIgual 
            {
              Object RESULT = null;
		RESULT= "==";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SIMB_RELACIONAL ::= distintoA 
            {
              Object RESULT = null;
		RESULT= "!=";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SIMB_RELACIONAL ::= mayorIgual 
            {
              Object RESULT = null;
		RESULT= ">=";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SIMB_RELACIONAL ::= menorIgual 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "<=";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SIMB_RELACIONAL ::= mayor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= ">";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIMB_RELACIONAL ::= menor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "<";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIMB_ARITMETICO ::= residuo 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "%";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIMB_ARITMETICO ::= potencia 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "^";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SIMB_ARITMETICO ::= division 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "/";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIMB_ARITMETICO ::= multiplicacion 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "*";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIMB_ARITMETICO ::= menos 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "-";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIMB_ARITMETICO ::= mas 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "+";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // UNARIO ::= EXPRESION menosMenos 
            {
              Object RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Unario(ex,"--");
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*UNARIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // UNARIO ::= EXPRESION masMas 
            {
              Object RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Unario(ex,"++");
              CUP$Parser$result = new java_cup.runtime.Symbol(29/*UNARIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LLAMADA ::= id abrePar cierraPar 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT= new Llamada(i,new ArrayList<objetoBase>());
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LLAMADA ::= id abrePar LISTA_EXPRESIONES cierraPar 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT= new Llamada(i,b);
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OBSERVADOR ::= documento punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new Observador(new objetoBase(),b,c,1);
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OBSERVADOR ::= ELEMENTO punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new Observador(a,b,c,2);
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OBSERVADOR ::= documento punto observador abrePar TIPOS_EVENTOS coma FUNCION2 cierraPar puntoComa 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new Observador(new objetoBase(),b,c,1);
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OBSERVADOR ::= ELEMENTO punto observador abrePar TIPOS_EVENTOS coma FUNCION2 cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new Observador(a,b,c,2);
              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SET_ELEMENTO ::= ELEMENTO punto setelemento abrePar EXPRESION coma EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT= new setElemento(a,b,c);
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*SET_ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OBTENER ::= documento punto obtener abrePar EXPRESION cierraPar 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Obtener(c);
              CUP$Parser$result = new java_cup.runtime.Symbol(26/*OBTENER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPOS_EVENTOS ::= cliqueado 
            {
              Object RESULT = null;
		RESULT="cliqueado";
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOS_EVENTOS ::= modificado 
            {
              Object RESULT = null;
		RESULT="modificado";
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOS_EVENTOS ::= listo 
            {
              Object RESULT = null;
		RESULT="listo";
              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELEMENTO ::= OBTENER 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELEMENTO ::= id 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= new Id(a);
              CUP$Parser$result = new java_cup.runtime.Symbol(56/*ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MENSAJE ::= mensaje abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Mensaje j = new Mensaje(a); RESULT= j;
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*MENSAJE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA_ID ::= LISTA_ID coma id 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<String> lista = (ArrayList<String>)l;;
				  lista.add(i.toString());
				  RESULT=lista;
				
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*LISTA_ID*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_ID ::= id 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<String> lista = new ArrayList<>();
				  lista.add(i.toString());
				  RESULT=lista;
				
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*LISTA_ID*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCION2 ::= funcion abrePar cierraPar CUERPO 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Funcion f= new Funcion("",new ArrayList<String>(),c);
												RESULT=f;
              CUP$Parser$result = new java_cup.runtime.Symbol(57/*FUNCION2*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCION ::= funcion id abrePar cierraPar CUERPO 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Funcion f= new Funcion(i,new ArrayList<String>(),c);
												RESULT=f;
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FUNCION ::= funcion id abrePar LISTA_ID cierraPar CUERPO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Funcion f= new Funcion(a,b,c);
												RESULT=f;
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // RETORNAR ::= retornar EXPRESION puntoComa 
            {
              Object RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Retornar(ex);
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMPRIMIR ::= imprimir abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Imprimir g = new Imprimir(a); RESULT=g;
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DETENER ::= detener puntoComa 
            {
              Object RESULT = null;
		Detener d = new Detener(); RESULT= d;
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*DETENER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MIENTRAS ::= mientras abrePar EXPRESION cierraPar CUERPO 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= new Mientras(e,c);
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*MIENTRAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARA ::= para abrePar id dosPuntos EXPRESION puntoComa EXPRESION puntoComa OPERADOR_PARA cierraPar CUERPO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 												  Declaracion s = new Declaracion(a);
												  Asignacion s2 = new Asignacion(a,b);
												  List<objetoBase> lista = new ArrayList<>();
												  lista.add(s);
												  lista.add(s2);
												  DeclaAsig h = new DeclaAsig(lista);
												  AsignaUnario u =  new AsignaUnario(new Id(a),op);
												  RESULT = new Para(h,exp,op,c,u);
												  

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERADOR_PARA ::= menosMenos 
            {
              Object RESULT = null;
		RESULT="--";
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*OPERADOR_PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERADOR_PARA ::= masMas 
            {
              Object RESULT = null;
		RESULT="++";
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*OPERADOR_PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SELECCIONA ::= selecciona abrePar EXPRESION cierraPar abreLlave CUERPO_SELECCIONA cierraLlave 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new Selecciona(e,c);
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SELECCIONA ::= selecciona abrePar EXPRESION cierraPar abreLlave cierraLlave 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT= new Selecciona(e, new CuerpoSelecciona());
              CUP$Parser$result = new java_cup.runtime.Symbol(9/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPO_SELECCIONA ::= DEFECTO 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		CuerpoSelecciona cuerpo = new CuerpoSelecciona();
						cuerpo.agregarDefecto(c);
						RESULT=cuerpo;
						
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPO_SELECCIONA ::= LISTA_CASOS DEFECTO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		CuerpoSelecciona cuerpo = (CuerpoSelecciona)a;
							  cuerpo.agregarDefecto(d);
							  RESULT=cuerpo;
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_SELECCIONA ::= LISTA_CASOS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DEFECTO ::= defecto dosPuntos SENTENCIAS 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= new CuerpoEstructuras(c);
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*DEFECTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_CASOS ::= LISTA_CASOS CASO 
            {
              Object RESULT = null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		CuerpoSelecciona cuerpo =(CuerpoSelecciona)lista;
						cuerpo.agregarCaso(c);
						RESULT=cuerpo;
						
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_CASOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_CASOS ::= CASO 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		CuerpoSelecciona cuerpo = new CuerpoSelecciona();
						cuerpo.agregarCaso(c);
						RESULT=cuerpo;
						
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_CASOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASO ::= caso EXPRESION dosPuntos SENTENCIAS 
            {
              Object RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT = new Caso(ex,new CuerpoEstructuras(c));
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*CASO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IF ::= si abrePar EXPRESION cierraPar CUERPO 
            {
              Object RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Si s = new Si(exp,v,new CuerpoEstructuras()); RESULT= s;
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IF ::= si abrePar EXPRESION cierraPar CUERPO sino CUERPO 
            {
              Object RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Si s = new Si(exp,v,f); RESULT= s;
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= LLAMADA puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= FUNCION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= MENSAJE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= RETORNAR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= DETENER 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= OBSERVADOR 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= SET_ELEMENTO 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= PARA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= SELECCIONA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= IF 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<objetoBase> lista = (ArrayList<objetoBase>)l;
									lista.add((objetoBase) a);
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<objetoBase> lista = new ArrayList<>();
							lista.add((objetoBase) a);
							RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= abreLlave SENTENCIAS cierraLlave 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new CuerpoEstructuras(s);
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= abreLlave cierraLlave 
            {
              Object RESULT = null;
		RESULT= new CuerpoEstructuras();
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES coma EXPRESION 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
											List<objetoBase>elementos= (ArrayList<objetoBase>)l;
											elementos.add((objetoBase)a);
											RESULT=elementos;
										 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*LISTA_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
									List<objetoBase> elementos= new ArrayList<>();
									elementos.add((objetoBase)a);
									RESULT= elementos;
								
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*LISTA_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ASIGNACION ::= id dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		asignaArreglo c = new asignaArreglo(a,b); RESULT=c; 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGNACION ::= EXPRESION menosMenos puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		AsignaUnario u =  new AsignaUnario(a,b); RESULT= u;
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= EXPRESION masMas puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		AsignaUnario u =  new AsignaUnario(a,b); RESULT= u;
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNACION ::= id abreLlave EXPRESION cierraLlave dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		AsignaPosArreglo h= new AsignaPosArreglo(a,b,c); RESULT= h;
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= id dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Asignacion g = new Asignacion(a,b); RESULT= g;
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECLARACION ::= dimv id abreLlave EXPRESION cierraLlave dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		DeclaArreglo simb = new DeclaArreglo(a,el);
		asignaArreglo c = new asignaArreglo(a,b);
		DeclaArregloNumAsigna g = new DeclaArregloNumAsigna(simb,c);
		RESULT = g;
	
	
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= dimv id dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		List<objetoBase> l = (ArrayList<objetoBase>)lista;
		Numero num = new Numero(l.size());
		DeclaArreglo d= new DeclaArreglo(a, num);
		asignaArreglo c = new asignaArreglo(a,lista);
		List<objetoBase> listado = new ArrayList<>();
		listado.add(d);
		listado.add(c);
		DeclaAsig h = new DeclaAsig(listado);
		RESULT= h;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= dimv id abreLlave EXPRESION cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 DeclaArreglo simb = new DeclaArreglo(a,el); RESULT= simb;
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= dimv id dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Declaracion s = new Declaracion(a);
												  Asignacion s2 = new Asignacion(a,b);
												  List<objetoBase> lista = new ArrayList<>();
												  lista.add(s);
												  lista.add(s2);
												  DeclaAsig h = new DeclaAsig(lista);
												  RESULT = h;
												  
													
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= dimv id puntoComa 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaracion s = new Declaracion(i); RESULT = s;
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(51/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		parser.listaSentencias= (ArrayList<objetoBase>)a; System.out.println(a);
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

