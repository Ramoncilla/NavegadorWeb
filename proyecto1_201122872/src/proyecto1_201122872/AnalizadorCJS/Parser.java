
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Feb 22 22:43:43 CST 2018
//----------------------------------------------------

package proyecto1_201122872.AnalizadorCJS;

import proyecto1_201122872.AnalizadorCJS.simbolosCJS;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;
import CJS.ARBOL.EXPRESION.*;
import CJS.objetoBase;
import CJS.TablaSimbolos.*;
import CJS.ARBOL.INSTRUCCIONES.*;

/** CUP v0.10k generated parser.
  * @version Thu Feb 22 22:43:43 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\065\003\000\002\003" +
    "\005\000\002\003\007\000\002\003\010\000\002\003\011" +
    "\000\002\003\014\000\002\004\006\000\002\004\006\000" +
    "\002\004\004\000\002\004\010\000\002\007\004\000\002" +
    "\007\005\000\002\010\003\000\002\010\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\023\007\000\002\024\004\000\002\012" +
    "\003\000\002\012\004\000\002\025\006\000\002\026\003" +
    "\000\002\026\004\000\002\027\005\000\002\030\003\000" +
    "\002\030\004\000\002\030\003\000\002\013\010\000\002" +
    "\013\011\000\002\031\003\000\002\031\003\000\002\014" +
    "\015\000\002\015\007\000\002\016\004\000\002\017\007" +
    "\000\002\020\005\000\002\032\010\000\002\032\007\000" +
    "\002\033\003\000\002\033\005\000\002\022\007\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\034" +
    "\010\000\002\035\010\000\002\052\014\000\002\052\013" +
    "\000\002\052\014\000\002\052\013\000\002\021\006\000" +
    "\002\021\005\000\002\037\004\000\002\037\004\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\056\003\000\002" +
    "\056\003\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\004\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\004\000\002\053\005\000\002\053\005\000\002\053\003" +
    "\000\002\005\003\000\002\005\005\000\002\006\006\000" +
    "\002\063\007\000\002\064\010\000\002\047\003\000\002" +
    "\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\052\004\005\007\053\013\016\017\052\020" +
    "\026\021\020\022\015\023\006\024\043\030\030\031\040" +
    "\033\037\041\023\056\041\057\025\060\035\063\034\064" +
    "\054\065\021\070\046\001\002\000\122\002\uffad\004\uffad" +
    "\006\uffad\007\uffad\012\306\013\uffad\015\uffad\016\uffad\017" +
    "\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\030\uffad" +
    "\031\uffad\033\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044" +
    "\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\063" +
    "\uffad\064\uffad\065\uffad\066\uffad\067\uffad\070\uffad\001\002" +
    "\000\004\063\264\001\002\000\004\007\260\001\002\000" +
    "\062\002\uffe8\004\uffe8\006\uffe8\007\uffe8\013\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\030\uffe8\031\uffe8\033\uffe8\041\uffe8\056\uffe8\057\uffe8" +
    "\060\uffe8\063\uffe8\064\uffe8\065\uffe8\070\uffe8\001\002\000" +
    "\062\002\uffeb\004\uffeb\006\uffeb\007\uffeb\013\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\030\uffeb\031\uffeb\033\uffeb\041\uffeb\056\uffeb\057\uffeb" +
    "\060\uffeb\063\uffeb\064\uffeb\065\uffeb\070\uffeb\001\002\000" +
    "\064\002\uffe5\004\uffe5\006\uffe5\007\uffe5\013\uffe5\014\255" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\030\uffe5\031\uffe5\033\uffe5\041\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\063\uffe5\064\uffe5\065\uffe5\070\uffe5\001" +
    "\002\000\062\002\ufff4\004\ufff4\006\ufff4\007\ufff4\013\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\030\ufff4\031\ufff4\033\ufff4\041\ufff4\056\ufff4" +
    "\057\ufff4\060\ufff4\063\ufff4\064\ufff4\065\ufff4\070\ufff4\001" +
    "\002\000\130\002\uffae\004\uffae\006\uffae\007\uffae\010\uffae" +
    "\011\uffae\012\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020" +
    "\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026\uffae\030\uffae" +
    "\031\uffae\033\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060\uffae\063" +
    "\uffae\064\uffae\065\uffae\066\uffae\067\uffae\070\uffae\001\002" +
    "\000\054\002\000\004\005\007\053\013\016\017\052\020" +
    "\026\021\020\022\015\023\006\024\043\030\030\031\040" +
    "\033\037\041\023\056\041\057\025\060\035\063\034\064" +
    "\054\065\021\070\046\001\002\000\004\012\254\001\002" +
    "\000\004\007\250\001\002\000\062\002\uffed\004\uffed\006" +
    "\uffed\007\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\030\uffed\031\uffed\033" +
    "\uffed\041\uffed\056\uffed\057\uffed\060\uffed\063\uffed\064\uffed" +
    "\065\uffed\070\uffed\001\002\000\004\007\244\001\002\000" +
    "\130\002\uffaa\004\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\030\uffaa\031\uffaa" +
    "\033\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\063\uffaa\064" +
    "\uffaa\065\uffaa\066\uffaa\067\uffaa\070\uffaa\001\002\000\062" +
    "\002\ufff2\004\ufff2\006\ufff2\007\ufff2\013\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\030\ufff2\031\ufff2\033\ufff2\041\ufff2\056\ufff2\057\ufff2\060" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\070\ufff2\001\002\000\030" +
    "\007\053\031\040\033\037\041\023\056\041\057\025\060" +
    "\035\063\055\064\054\065\021\070\046\001\002\000\130" +
    "\002\uffa9\004\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\026\uffa9\030\uffa9\031\uffa9\033" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\001\002\000\130\002" +
    "\uff9b\004\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\013\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\026\uff9b\030\uff9b\031\uff9b\033\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\001\002\000\004\007\223" +
    "\001\002\000\122\002\uffab\004\uffab\006\uffab\007\uffab\011" +
    "\220\013\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\030\uffab\031\uffab\033\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\063\uffab\064\uffab\065\uffab" +
    "\066\uffab\067\uffab\070\uffab\001\002\000\004\007\214\001" +
    "\002\000\062\002\ufff0\004\ufff0\006\ufff0\007\ufff0\013\ufff0" +
    "\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023" +
    "\ufff0\024\ufff0\030\ufff0\031\ufff0\033\ufff0\041\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\063\ufff0\064\ufff0\065\ufff0\070\ufff0\001" +
    "\002\000\062\002\uffef\004\uffef\006\uffef\007\uffef\013\uffef" +
    "\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\024\uffef\030\uffef\031\uffef\033\uffef\041\uffef\056\uffef" +
    "\057\uffef\060\uffef\063\uffef\064\uffef\065\uffef\070\uffef\001" +
    "\002\000\062\002\ufff1\004\ufff1\006\ufff1\007\ufff1\013\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\024\ufff1\030\ufff1\031\ufff1\033\ufff1\041\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\063\ufff1\064\ufff1\065\ufff1\070\ufff1\001" +
    "\002\000\126\002\uffac\004\uffac\005\111\006\uffac\007\112" +
    "\011\205\013\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\022\uffac\023\uffac\024\uffac\027\110\030\uffac\031\uffac" +
    "\033\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\063\uffac\064" +
    "\uffac\065\uffac\066\uffac\067\uffac\070\uffac\001\002\000\130" +
    "\002\uff9a\004\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\013\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\026\uff9a\030\uff9a\031\uff9a\033" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054" +
    "\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\063\uff9a\064\uff9a" +
    "\065\uff9a\066\uff9a\067\uff9a\070\uff9a\001\002\000\062\002" +
    "\uffec\004\uffec\006\uffec\007\uffec\013\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\030" +
    "\uffec\031\uffec\033\uffec\041\uffec\056\uffec\057\uffec\060\uffec" +
    "\063\uffec\064\uffec\065\uffec\070\uffec\001\002\000\004\007" +
    "\200\001\002\000\004\027\173\001\002\000\030\007\053" +
    "\031\040\033\037\041\023\056\041\057\025\060\035\063" +
    "\055\064\054\065\021\070\046\001\002\000\130\002\uffa1" +
    "\004\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013" +
    "\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\026\uffa1\030\uffa1\031\uffa1\033\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\066\uffa1\067\uffa1\070\uffa1\001\002\000\030\007\053\031" +
    "\040\033\037\041\023\056\041\057\025\060\035\063\055" +
    "\064\054\065\021\070\046\001\002\000\062\002\uffee\004" +
    "\uffee\006\uffee\007\uffee\013\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee\030\uffee\031" +
    "\uffee\033\uffee\041\uffee\056\uffee\057\uffee\060\uffee\063\uffee" +
    "\064\uffee\065\uffee\070\uffee\001\002\000\062\002\uffea\004" +
    "\uffea\006\uffea\007\uffea\013\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\030\uffea\031" +
    "\uffea\033\uffea\041\uffea\056\uffea\057\uffea\060\uffea\063\uffea" +
    "\064\uffea\065\uffea\070\uffea\001\002\000\004\065\152\001" +
    "\002\000\004\002\151\001\002\000\130\002\uffaf\004\uffaf" +
    "\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\026\uffaf\030\uffaf\031\uffaf\033\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\057\uffaf\060\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf" +
    "\067\uffaf\070\uffaf\001\002\000\120\002\uffe9\004\uffe9\006" +
    "\uffe9\007\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\030\uffe9\031\uffe9\033" +
    "\uffe9\040\101\041\070\042\067\043\074\044\075\045\100" +
    "\046\072\047\104\050\064\051\077\052\063\053\061\054" +
    "\103\055\066\056\uffe9\057\uffe9\060\uffe9\063\uffe9\064\uffe9" +
    "\065\uffe9\066\071\067\065\070\uffe9\001\002\000\004\007" +
    "\125\001\002\000\030\007\053\031\040\033\037\041\023" +
    "\056\041\057\025\060\035\063\055\064\054\065\021\070" +
    "\046\001\002\000\130\002\uffa8\004\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8" +
    "\030\uffa8\031\uffa8\033\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\001\002\000\134\002\uffac\004\uffac\005\111\006\uffac\007" +
    "\112\010\uffac\011\uffac\012\uffac\013\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026" +
    "\uffac\027\110\030\uffac\031\uffac\033\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067" +
    "\uffac\070\uffac\001\002\000\130\002\uffad\004\uffad\006\uffad" +
    "\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\015\uffad\016" +
    "\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\026\uffad\030\uffad\031\uffad\033\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\063\uffad\064\uffad\065\uffad\066\uffad\067\uffad" +
    "\070\uffad\001\002\000\130\002\uffab\004\uffab\006\uffab\007" +
    "\uffab\010\uffab\011\uffab\012\uffab\013\uffab\015\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\026" +
    "\uffab\030\uffab\031\uffab\033\uffab\040\uffab\041\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070" +
    "\uffab\001\002\000\044\010\062\040\101\041\070\042\067" +
    "\043\074\044\075\045\100\046\072\047\104\050\064\051" +
    "\077\052\063\053\061\054\103\055\066\066\071\067\065" +
    "\001\002\000\030\007\uffb7\031\uffb7\033\uffb7\041\uffb7\056" +
    "\uffb7\057\uffb7\060\uffb7\063\uffb7\064\uffb7\065\uffb7\070\uffb7" +
    "\001\002\000\130\002\uffa5\004\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\030" +
    "\uffa5\031\uffa5\033\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\001" +
    "\002\000\030\007\uffb6\031\uffb6\033\uffb6\041\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\063\uffb6\064\uffb6\065\uffb6\070\uffb6\001" +
    "\002\000\030\007\uffb9\031\uffb9\033\uffb9\041\uffb9\056\uffb9" +
    "\057\uffb9\060\uffb9\063\uffb9\064\uffb9\065\uffb9\070\uffb9\001" +
    "\002\000\130\002\uffc2\004\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026\uffc2\030\uffc2" +
    "\031\uffc2\033\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\001\002" +
    "\000\030\007\uffb4\031\uffb4\033\uffb4\041\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\063\uffb4\064\uffb4\065\uffb4\070\uffb4\001\002" +
    "\000\030\007\uffbf\031\uffbf\033\uffbf\041\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\063\uffbf\064\uffbf\065\uffbf\070\uffbf\001\002" +
    "\000\030\007\uffc0\031\uffc0\033\uffc0\041\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\063\uffc0\064\uffc0\065\uffc0\070\uffc0\001\002" +
    "\000\130\002\uffc3\004\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3\030\uffc3\031" +
    "\uffc3\033\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\063\uffc3" +
    "\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\001\002\000" +
    "\030\007\uffbb\031\uffbb\033\uffbb\041\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\063\uffbb\064\uffbb\065\uffbb\070\uffbb\001\002\000" +
    "\030\007\053\031\040\033\037\041\023\056\041\057\025" +
    "\060\035\063\055\064\054\065\021\070\046\001\002\000" +
    "\030\007\uffbe\031\uffbe\033\uffbe\041\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\063\uffbe\064\uffbe\065\uffbe\070\uffbe\001\002\000" +
    "\030\007\uffbd\031\uffbd\033\uffbd\041\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\063\uffbd\064\uffbd\065\uffbd\070\uffbd\001\002\000" +
    "\030\007\053\031\040\033\037\041\023\056\041\057\025" +
    "\060\035\063\055\064\054\065\021\070\046\001\002\000" +
    "\030\007\uffb8\031\uffb8\033\uffb8\041\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\063\uffb8\064\uffb8\065\uffb8\070\uffb8\001\002\000" +
    "\030\007\uffbc\031\uffbc\033\uffbc\041\uffbc\056\uffbc\057\uffbc" +
    "\060\uffbc\063\uffbc\064\uffbc\065\uffbc\070\uffbc\001\002\000" +
    "\030\007\uffc1\031\uffc1\033\uffc1\041\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\063\uffc1\064\uffc1\065\uffc1\070\uffc1\001\002\000" +
    "\030\007\053\031\040\033\037\041\023\056\041\057\025" +
    "\060\035\063\055\064\054\065\021\070\046\001\002\000" +
    "\030\007\uffb5\031\uffb5\033\uffb5\041\uffb5\056\uffb5\057\uffb5" +
    "\060\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\001\002\000" +
    "\030\007\uffba\031\uffba\033\uffba\041\uffba\056\uffba\057\uffba" +
    "\060\uffba\063\uffba\064\uffba\065\uffba\070\uffba\001\002\000" +
    "\130\002\uffb3\004\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\030\uffb3\031\uffb3" +
    "\033\uffb3\040\101\041\070\042\067\043\074\044\075\045" +
    "\100\046\072\047\104\050\064\051\077\052\063\053\061" +
    "\054\103\055\066\056\uffb3\057\uffb3\060\uffb3\063\uffb3\064" +
    "\uffb3\065\uffb3\066\071\067\065\070\uffb3\001\002\000\130" +
    "\002\uffb1\004\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012" +
    "\uffb1\013\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\026\uffb1\030\uffb1\031\uffb1\033" +
    "\uffb1\040\101\041\070\042\067\043\074\044\075\045\100" +
    "\046\072\047\104\050\064\051\077\052\063\053\061\054" +
    "\103\055\066\056\uffb1\057\uffb1\060\uffb1\063\uffb1\064\uffb1" +
    "\065\uffb1\066\071\067\065\070\uffb1\001\002\000\130\002" +
    "\uffb2\004\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\013\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\026\uffb2\030\uffb2\031\uffb2\033\uffb2" +
    "\040\101\041\070\042\067\043\074\044\075\045\100\046" +
    "\072\047\104\050\064\051\077\052\063\053\061\054\103" +
    "\055\066\056\uffb2\057\uffb2\060\uffb2\063\uffb2\064\uffb2\065" +
    "\uffb2\066\071\067\065\070\uffb2\001\002\000\006\061\124" +
    "\062\123\001\002\000\030\007\053\031\040\033\037\041" +
    "\023\056\041\057\025\060\035\063\055\064\054\065\021" +
    "\070\046\001\002\000\032\007\053\010\113\031\040\033" +
    "\037\041\023\056\041\057\025\060\035\063\055\064\054" +
    "\065\021\070\046\001\002\000\130\002\uffc4\004\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\026\uffc4\030\uffc4\031\uffc4\033\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\001\002\000\006\010\117\026\116\001\002" +
    "\000\050\006\uffa0\010\uffa0\026\uffa0\040\101\041\070\042" +
    "\067\043\074\044\075\045\100\046\072\047\104\050\064" +
    "\051\077\052\063\053\061\054\103\055\066\066\071\067" +
    "\065\001\002\000\030\007\053\031\040\033\037\041\023" +
    "\056\041\057\025\060\035\063\055\064\054\065\021\070" +
    "\046\001\002\000\130\002\uffc5\004\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\026\uffc5" +
    "\030\uffc5\031\uffc5\033\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5" +
    "\001\002\000\050\006\uff9f\010\uff9f\026\uff9f\040\101\041" +
    "\070\042\067\043\074\044\075\045\100\046\072\047\104" +
    "\050\064\051\077\052\063\053\061\054\103\055\066\066" +
    "\071\067\065\001\002\000\044\006\122\040\101\041\070" +
    "\042\067\043\074\044\075\045\100\046\072\047\104\050" +
    "\064\051\077\052\063\053\061\054\103\055\066\066\071" +
    "\067\065\001\002\000\130\002\uff9e\004\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e\015\uff9e\016\uff9e" +
    "\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\026" +
    "\uff9e\030\uff9e\031\uff9e\033\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e" +
    "\060\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070" +
    "\uff9e\001\002\000\130\002\uffa7\004\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7" +
    "\030\uffa7\031\uffa7\033\uffa7\040\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060" +
    "\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7" +
    "\001\002\000\130\002\uffa6\004\uffa6\006\uffa6\007\uffa6\010" +
    "\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\030" +
    "\uffa6\031\uffa6\033\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6" +
    "\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070\uffa6\001" +
    "\002\000\030\007\053\031\040\033\037\041\023\056\041" +
    "\057\025\060\035\063\055\064\054\065\021\070\046\001" +
    "\002\000\044\010\127\040\101\041\070\042\067\043\074" +
    "\044\075\045\100\046\072\047\104\050\064\051\077\052" +
    "\063\053\061\054\103\055\066\066\071\067\065\001\002" +
    "\000\004\005\130\001\002\000\010\006\132\015\135\016" +
    "\136\001\002\000\010\006\uffdf\015\135\016\136\001\002" +
    "\000\062\002\uffdc\004\uffdc\006\uffdc\007\uffdc\013\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\030\uffdc\031\uffdc\033\uffdc\041\uffdc\056\uffdc\057" +
    "\uffdc\060\uffdc\063\uffdc\064\uffdc\065\uffdc\070\uffdc\001\002" +
    "\000\004\006\146\001\002\000\004\006\uffdd\001\002\000" +
    "\030\007\053\031\040\033\037\041\023\056\041\057\025" +
    "\060\035\063\055\064\054\065\021\070\046\001\002\000" +
    "\004\011\140\001\002\000\010\006\uffe2\015\uffe2\016\uffe2" +
    "\001\002\000\052\004\005\007\053\013\016\017\052\020" +
    "\026\021\020\022\015\023\006\024\043\030\030\031\040" +
    "\033\037\041\023\056\041\057\025\060\035\063\034\064" +
    "\054\065\021\070\046\001\002\000\054\004\005\006\uffe0" +
    "\007\053\013\016\017\052\020\026\021\020\022\015\023" +
    "\006\024\043\030\030\031\040\033\037\041\023\056\041" +
    "\057\025\060\035\063\034\064\054\065\021\070\046\001" +
    "\002\000\062\002\ufff3\004\ufff3\006\ufff3\007\ufff3\013\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\030\ufff3\031\ufff3\033\ufff3\041\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\063\ufff3\064\ufff3\065\ufff3\070\ufff3\001" +
    "\002\000\044\011\144\040\101\041\070\042\067\043\074" +
    "\044\075\045\100\046\072\047\104\050\064\051\077\052" +
    "\063\053\061\054\103\055\066\066\071\067\065\001\002" +
    "\000\052\004\005\007\053\013\016\017\052\020\026\021" +
    "\020\022\015\023\006\024\043\030\030\031\040\033\037" +
    "\041\023\056\041\057\025\060\035\063\034\064\054\065" +
    "\021\070\046\001\002\000\060\004\005\006\uffe3\007\053" +
    "\013\016\015\uffe3\016\uffe3\017\052\020\026\021\020\022" +
    "\015\023\006\024\043\030\030\031\040\033\037\041\023" +
    "\056\041\057\025\060\035\063\034\064\054\065\021\070" +
    "\046\001\002\000\062\002\uffdb\004\uffdb\006\uffdb\007\uffdb" +
    "\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\030\uffdb\031\uffdb\033\uffdb\041\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\063\uffdb\064\uffdb\065\uffdb\070" +
    "\uffdb\001\002\000\004\006\uffde\001\002\000\010\006\uffe1" +
    "\015\uffe1\016\uffe1\001\002\000\004\002\001\001\002\000" +
    "\004\043\164\001\002\000\004\070\163\001\002\000\006" +
    "\065\155\070\156\001\002\000\004\011\157\001\002\000" +
    "\130\002\uffa3\004\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\030\uffa3\031\uffa3" +
    "\033\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\063\uffa3\064" +
    "\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3\001\002\000\004" +
    "\065\160\001\002\000\004\011\161\001\002\000\004\065" +
    "\162\001\002\000\004\070\uff9c\001\002\000\130\002\uffa2" +
    "\004\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\026\uffa2\030\uffa2\031\uffa2\033\uffa2\040" +
    "\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2" +
    "\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\060\uffa2\063\uffa2\064\uffa2\065\uffa2" +
    "\066\uffa2\067\uffa2\070\uffa2\001\002\000\004\065\165\001" +
    "\002\000\004\043\166\001\002\000\004\065\167\001\002" +
    "\000\006\065\uff9d\070\uff9d\001\002\000\044\012\171\040" +
    "\101\041\070\042\067\043\074\044\075\045\100\046\072" +
    "\047\104\050\064\051\077\052\063\053\061\054\103\055" +
    "\066\066\071\067\065\001\002\000\062\002\uffd4\004\uffd4" +
    "\006\uffd4\007\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\030\uffd4\031\uffd4" +
    "\033\uffd4\041\uffd4\056\uffd4\057\uffd4\060\uffd4\063\uffd4\064" +
    "\uffd4\065\uffd4\070\uffd4\001\002\000\130\002\uffb0\004\uffb0" +
    "\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\026\uffb0\030\uffb0\031\uffb0\033\uffb0\040\101\041" +
    "\070\042\067\043\074\044\075\045\100\046\072\047\104" +
    "\050\064\051\077\052\063\053\061\054\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\063\uffb0\064\uffb0\065\uffb0\066\071" +
    "\067\065\070\uffb0\001\002\000\004\032\174\001\002\000" +
    "\004\007\175\001\002\000\004\064\176\001\002\000\004" +
    "\010\177\001\002\000\130\002\uffcb\004\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026" +
    "\uffcb\030\uffcb\031\uffcb\033\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070" +
    "\uffcb\001\002\000\004\064\201\001\002\000\004\026\202" +
    "\001\002\000\004\064\203\001\002\000\004\010\204\001" +
    "\002\000\130\002\uffca\004\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\030\uffca" +
    "\031\uffca\033\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca\063" +
    "\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\001\002" +
    "\000\032\005\206\007\053\031\040\033\037\041\023\056" +
    "\041\057\025\060\035\063\055\064\054\065\021\070\046" +
    "\001\002\000\030\007\053\031\040\033\037\041\023\056" +
    "\041\057\025\060\035\063\055\064\054\065\021\070\046" +
    "\001\002\000\044\012\210\040\101\041\070\042\067\043" +
    "\074\044\075\045\100\046\072\047\104\050\064\051\077" +
    "\052\063\053\061\054\103\055\066\066\071\067\065\001" +
    "\002\000\062\002\ufffa\004\ufffa\006\ufffa\007\ufffa\013\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\030\ufffa\031\ufffa\033\ufffa\041\ufffa\056\ufffa" +
    "\057\ufffa\060\ufffa\063\ufffa\064\ufffa\065\ufffa\070\ufffa\001" +
    "\002\000\006\006\212\026\116\001\002\000\004\012\213" +
    "\001\002\000\062\002\ufff7\004\ufff7\006\ufff7\007\ufff7\013" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\030\ufff7\031\ufff7\033\ufff7\041\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\063\ufff7\064\ufff7\065\ufff7\070\ufff7" +
    "\001\002\000\030\007\053\031\040\033\037\041\023\056" +
    "\041\057\025\060\035\063\055\064\054\065\021\070\046" +
    "\001\002\000\044\010\216\040\101\041\070\042\067\043" +
    "\074\044\075\045\100\046\072\047\104\050\064\051\077" +
    "\052\063\053\061\054\103\055\066\066\071\067\065\001" +
    "\002\000\004\012\217\001\002\000\062\002\uffcf\004\uffcf" +
    "\006\uffcf\007\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\030\uffcf\031\uffcf" +
    "\033\uffcf\041\uffcf\056\uffcf\057\uffcf\060\uffcf\063\uffcf\064" +
    "\uffcf\065\uffcf\070\uffcf\001\002\000\030\007\053\031\040" +
    "\033\037\041\023\056\041\057\025\060\035\063\055\064" +
    "\054\065\021\070\046\001\002\000\044\012\222\040\101" +
    "\041\070\042\067\043\074\044\075\045\100\046\072\047" +
    "\104\050\064\051\077\052\063\053\061\054\103\055\066" +
    "\066\071\067\065\001\002\000\062\002\ufff9\004\ufff9\006" +
    "\ufff9\007\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\030\ufff9\031\ufff9\033" +
    "\ufff9\041\ufff9\056\ufff9\057\ufff9\060\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\070\ufff9\001\002\000\004\063\224\001\002\000" +
    "\004\011\225\001\002\000\030\007\053\031\040\033\037" +
    "\041\023\056\041\057\025\060\035\063\055\064\054\065" +
    "\021\070\046\001\002\000\044\012\227\040\101\041\070" +
    "\042\067\043\074\044\075\045\100\046\072\047\104\050" +
    "\064\051\077\052\063\053\061\054\103\055\066\066\071" +
    "\067\065\001\002\000\030\007\053\031\040\033\037\041" +
    "\023\056\041\057\025\060\035\063\055\064\054\065\021" +
    "\070\046\001\002\000\044\012\231\040\101\041\070\042" +
    "\067\043\074\044\075\045\100\046\072\047\104\050\064" +
    "\051\077\052\063\053\061\054\103\055\066\066\071\067" +
    "\065\001\002\000\006\066\234\067\233\001\002\000\004" +
    "\010\235\001\002\000\004\010\uffd9\001\002\000\004\010" +
    "\uffda\001\002\000\004\005\236\001\002\000\054\004\005" +
    "\006\240\007\053\013\016\017\052\020\026\021\020\022" +
    "\015\023\006\024\043\030\030\031\040\033\037\041\023" +
    "\056\041\057\025\060\035\063\034\064\054\065\021\070" +
    "\046\001\002\000\062\002\uffd8\004\uffd8\006\uffd8\007\uffd8" +
    "\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\030\uffd8\031\uffd8\033\uffd8\041\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\063\uffd8\064\uffd8\065\uffd8\070" +
    "\uffd8\001\002\000\064\002\ufff6\004\ufff6\006\ufff6\007\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\030\ufff6\031\ufff6\033\ufff6" +
    "\041\ufff6\056\ufff6\057\ufff6\060\ufff6\063\ufff6\064\ufff6\065" +
    "\ufff6\070\ufff6\001\002\000\054\004\005\006\242\007\053" +
    "\013\016\017\052\020\026\021\020\022\015\023\006\024" +
    "\043\030\030\031\040\033\037\041\023\056\041\057\025" +
    "\060\035\063\034\064\054\065\021\070\046\001\002\000" +
    "\064\002\ufff5\004\ufff5\006\ufff5\007\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\030\ufff5\031\ufff5\033\ufff5\041\ufff5\056\ufff5" +
    "\057\ufff5\060\ufff5\063\ufff5\064\ufff5\065\ufff5\070\ufff5\001" +
    "\002\000\130\002\uffa4\004\uffa4\006\uffa4\007\uffa4\010\uffa4" +
    "\011\uffa4\012\uffa4\013\uffa4\015\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\030\uffa4" +
    "\031\uffa4\033\uffa4\040\uffa4\041\uffa4\042\067\043\074\044" +
    "\075\045\100\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\063" +
    "\uffa4\064\uffa4\065\uffa4\066\071\067\065\070\uffa4\001\002" +
    "\000\030\007\053\031\040\033\037\041\023\056\041\057" +
    "\025\060\035\063\055\064\054\065\021\070\046\001\002" +
    "\000\044\010\246\040\101\041\070\042\067\043\074\044" +
    "\075\045\100\046\072\047\104\050\064\051\077\052\063" +
    "\053\061\054\103\055\066\066\071\067\065\001\002\000" +
    "\004\005\236\001\002\000\062\002\uffd7\004\uffd7\006\uffd7" +
    "\007\uffd7\013\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\030\uffd7\031\uffd7\033\uffd7" +
    "\041\uffd7\056\uffd7\057\uffd7\060\uffd7\063\uffd7\064\uffd7\065" +
    "\uffd7\070\uffd7\001\002\000\030\007\053\031\040\033\037" +
    "\041\023\056\041\057\025\060\035\063\055\064\054\065" +
    "\021\070\046\001\002\000\044\010\252\040\101\041\070" +
    "\042\067\043\074\044\075\045\100\046\072\047\104\050" +
    "\064\051\077\052\063\053\061\054\103\055\066\066\071" +
    "\067\065\001\002\000\004\005\236\001\002\000\064\002" +
    "\uffe7\004\uffe7\006\uffe7\007\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\030\uffe7\031\uffe7\033\uffe7\041\uffe7\056\uffe7\057\uffe7" +
    "\060\uffe7\063\uffe7\064\uffe7\065\uffe7\070\uffe7\001\002\000" +
    "\062\002\uffd6\004\uffd6\006\uffd6\007\uffd6\013\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\030\uffd6\031\uffd6\033\uffd6\041\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\063\uffd6\064\uffd6\065\uffd6\070\uffd6\001\002\000" +
    "\004\005\236\001\002\000\062\002\uffe4\004\uffe4\006\uffe4" +
    "\007\uffe4\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\030\uffe4\031\uffe4\033\uffe4" +
    "\041\uffe4\056\uffe4\057\uffe4\060\uffe4\063\uffe4\064\uffe4\065" +
    "\uffe4\070\uffe4\001\002\000\062\002\uffe6\004\uffe6\006\uffe6" +
    "\007\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\030\uffe6\031\uffe6\033\uffe6" +
    "\041\uffe6\056\uffe6\057\uffe6\060\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\070\uffe6\001\002\000\030\007\053\031\040\033\037" +
    "\041\023\056\041\057\025\060\035\063\055\064\054\065" +
    "\021\070\046\001\002\000\044\010\262\040\101\041\070" +
    "\042\067\043\074\044\075\045\100\046\072\047\104\050" +
    "\064\051\077\052\063\053\061\054\103\055\066\066\071" +
    "\067\065\001\002\000\004\012\263\001\002\000\062\002" +
    "\uffd5\004\uffd5\006\uffd5\007\uffd5\013\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\030" +
    "\uffd5\031\uffd5\033\uffd5\041\uffd5\056\uffd5\057\uffd5\060\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\070\uffd5\001\002\000\010\005" +
    "\267\011\265\012\266\001\002\000\032\005\300\007\053" +
    "\031\040\033\037\041\023\056\041\057\025\060\035\063" +
    "\055\064\054\065\021\070\046\001\002\000\062\002\uffff" +
    "\004\uffff\006\uffff\007\uffff\013\uffff\015\uffff\016\uffff\017" +
    "\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024\uffff\030\uffff" +
    "\031\uffff\033\uffff\041\uffff\056\uffff\057\uffff\060\uffff\063" +
    "\uffff\064\uffff\065\uffff\070\uffff\001\002\000\030\007\053" +
    "\031\040\033\037\041\023\056\041\057\025\060\035\063" +
    "\055\064\054\065\021\070\046\001\002\000\044\006\271" +
    "\040\101\041\070\042\067\043\074\044\075\045\100\046" +
    "\072\047\104\050\064\051\077\052\063\053\061\054\103" +
    "\055\066\066\071\067\065\001\002\000\006\011\272\012" +
    "\273\001\002\000\004\005\274\001\002\000\062\002\ufffd" +
    "\004\ufffd\006\ufffd\007\ufffd\013\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\030\ufffd" +
    "\031\ufffd\033\ufffd\041\ufffd\056\ufffd\057\ufffd\060\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\070\ufffd\001\002\000\030\007\053" +
    "\031\040\033\037\041\023\056\041\057\025\060\035\063" +
    "\055\064\054\065\021\070\046\001\002\000\006\006\276" +
    "\026\116\001\002\000\004\012\277\001\002\000\062\002" +
    "\ufffb\004\ufffb\006\ufffb\007\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\030" +
    "\ufffb\031\ufffb\033\ufffb\041\ufffb\056\ufffb\057\ufffb\060\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\070\ufffb\001\002\000\030\007" +
    "\053\031\040\033\037\041\023\056\041\057\025\060\035" +
    "\063\055\064\054\065\021\070\046\001\002\000\044\012" +
    "\302\040\101\041\070\042\067\043\074\044\075\045\100" +
    "\046\072\047\104\050\064\051\077\052\063\053\061\054" +
    "\103\055\066\066\071\067\065\001\002\000\062\002\ufffe" +
    "\004\ufffe\006\ufffe\007\ufffe\013\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\030\ufffe" +
    "\031\ufffe\033\ufffe\041\ufffe\056\ufffe\057\ufffe\060\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\070\ufffe\001\002\000\006\006\304" +
    "\026\116\001\002\000\004\012\305\001\002\000\062\002" +
    "\ufffc\004\ufffc\006\ufffc\007\ufffc\013\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\030" +
    "\ufffc\031\ufffc\033\ufffc\041\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\063\ufffc\064\ufffc\065\ufffc\070\ufffc\001\002\000\062\002" +
    "\ufff8\004\ufff8\006\ufff8\007\ufff8\013\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\030" +
    "\ufff8\031\ufff8\033\ufff8\041\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\063\ufff8\064\ufff8\065\ufff8\070\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\054\003\032\004\030\006\026\010\013\011" +
    "\011\012\021\013\031\014\043\015\016\016\035\017\007" +
    "\020\044\021\041\022\006\023\010\034\012\035\047\037" +
    "\003\047\023\053\050\065\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\255\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\032\004\030\006\026\011" +
    "\141\012\021\013\031\014\043\015\016\016\035\017\007" +
    "\020\044\021\041\022\006\023\010\034\012\035\047\037" +
    "\003\047\023\053\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\056\021\041\034\012" +
    "\035\047\037\055\047\023\053\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\056\021\041\034\012\035\047\037\055\047\023\053\171" +
    "\001\001\000\002\001\001\000\020\006\056\021\041\034" +
    "\012\035\047\037\055\047\023\053\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\063\153\064\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\054\101" +
    "\055\072\056\075\001\001\000\002\001\001\000\020\006" +
    "\056\021\041\034\012\035\047\037\055\047\023\053\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\054\101\055\072\056\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\056\021\041\034\012\035\047" +
    "\037\055\047\023\053\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\056\021\041\034\012\035\047" +
    "\037\055\047\023\053\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\056\021\041" +
    "\034\012\035\047\037\055\047\023\053\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\054\101\055\072" +
    "\056\075\001\001\000\010\054\101\055\072\056\075\001" +
    "\001\000\010\054\101\055\072\056\075\001\001\000\002" +
    "\001\001\000\020\006\056\021\041\034\012\035\047\037" +
    "\055\047\023\053\120\001\001\000\022\005\113\006\056" +
    "\021\041\034\012\035\047\037\055\047\023\053\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\054\101" +
    "\055\072\056\075\001\001\000\020\006\056\021\041\034" +
    "\012\035\047\037\055\047\023\053\117\001\001\000\002" +
    "\001\001\000\010\054\101\055\072\056\075\001\001\000" +
    "\010\054\101\055\072\056\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\056\021" +
    "\041\034\012\035\047\037\055\047\023\053\125\001\001" +
    "\000\010\054\101\055\072\056\075\001\001\000\002\001" +
    "\001\000\012\025\136\026\130\027\133\030\132\001\001" +
    "\000\006\025\147\027\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\056\021\041" +
    "\034\012\035\047\037\055\047\023\053\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\052\003\032\004\030" +
    "\006\026\010\140\011\011\012\021\013\031\014\043\015" +
    "\016\016\035\017\007\020\044\021\041\022\006\023\010" +
    "\034\012\035\047\037\003\047\023\053\050\001\001\000" +
    "\050\003\032\004\030\006\026\011\141\012\021\013\031" +
    "\014\043\015\016\016\035\017\007\020\044\021\041\022" +
    "\006\023\010\034\012\035\047\037\003\047\023\053\050" +
    "\001\001\000\002\001\001\000\010\054\101\055\072\056" +
    "\075\001\001\000\052\003\032\004\030\006\026\010\144" +
    "\011\011\012\021\013\031\014\043\015\016\016\035\017" +
    "\007\020\044\021\041\022\006\023\010\034\012\035\047" +
    "\037\003\047\023\053\050\001\001\000\050\003\032\004" +
    "\030\006\026\011\141\012\021\013\031\014\043\015\016" +
    "\016\035\017\007\020\044\021\041\022\006\023\010\034" +
    "\012\035\047\037\003\047\023\053\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\054\101\055\072\056\075" +
    "\001\001\000\002\001\001\000\010\054\101\055\072\056" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\056\021\041\034\012\035" +
    "\047\037\055\047\023\053\206\001\001\000\022\005\210" +
    "\006\056\021\041\034\012\035\047\037\055\047\023\053" +
    "\114\001\001\000\010\054\101\055\072\056\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\056\021\041\034\012\035\047" +
    "\037\055\047\023\053\214\001\001\000\010\054\101\055" +
    "\072\056\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\056\021\041\034\012\035\047\037\055\047" +
    "\023\053\220\001\001\000\010\054\101\055\072\056\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\056\021\041\034\012\035\047\037\055" +
    "\047\023\053\225\001\001\000\010\054\101\055\072\056" +
    "\075\001\001\000\020\006\056\021\041\034\012\035\047" +
    "\037\055\047\023\053\227\001\001\000\010\054\101\055" +
    "\072\056\075\001\001\000\004\031\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\236\001\001\000\052\003\032\004\030\006\026\010\240" +
    "\011\011\012\021\013\031\014\043\015\016\016\035\017" +
    "\007\020\044\021\041\022\006\023\010\034\012\035\047" +
    "\037\003\047\023\053\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\032\004\030\006\026\011\141" +
    "\012\021\013\031\014\043\015\016\016\035\017\007\020" +
    "\044\021\041\022\006\023\010\034\012\035\047\037\003" +
    "\047\023\053\050\001\001\000\002\001\001\000\010\054" +
    "\101\055\072\056\075\001\001\000\020\006\056\021\041" +
    "\034\012\035\047\037\055\047\023\053\244\001\001\000" +
    "\010\054\101\055\072\056\075\001\001\000\004\007\246" +
    "\001\001\000\002\001\001\000\020\006\056\021\041\034" +
    "\012\035\047\037\055\047\023\053\250\001\001\000\010" +
    "\054\101\055\072\056\075\001\001\000\004\007\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\056\021\041\034\012\035\047\037\055\047\023\053\260" +
    "\001\001\000\010\054\101\055\072\056\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\056\021\041\034\012\035\047\037\055\047\023\053" +
    "\300\001\001\000\002\001\001\000\020\006\056\021\041" +
    "\034\012\035\047\037\055\047\023\053\267\001\001\000" +
    "\010\054\101\055\072\056\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\274\006" +
    "\056\021\041\034\012\035\047\037\055\047\023\053\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\302\006\056\021\041\034\012\035\047" +
    "\037\055\047\023\053\114\001\001\000\010\054\101\055" +
    "\072\056\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public objetoBase raiz;
	public List<objetoBase>listaSentencias;

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BOOLEAN ::= falso 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Booleano b = new Booleano(a);RESULT= b;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*BOOLEAN*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // BOOLEAN ::= verdadero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Booleano b = new Booleano(a);RESULT= b;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*BOOLEAN*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DATETIME ::= DATE numero dosPuntos numero dosPuntos numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		DateTime dt = new DateTime(a,b,c,d); RESULT= dt;
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*DATETIME*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DATE ::= numero division numero division numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Datee d = new Datee(a,b,c); RESULT=d;
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*DATE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // POS_VECTOR ::= id abreLlave EXPRESION cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*POS_VECTOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES coma EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(3/*LISTA_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(3/*LISTA_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= LLAMADA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= comillaSimple DATETIME comillaSimple 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= comillaSimple DATE comillaSimple 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= menos EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Negativo g= new Negativo(a); RESULT= g;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= abrePar EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= id punto conteo 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= id punto atexto 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= cadena 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Cadena cad = new Cadena(a); RESULT = cad;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= BOOLEAN 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Numero n = new Numero(a); RESULT= n;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= POS_VECTOR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= id 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Id i= new Id(a); RESULT= i;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= UNARIO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= OBTENER 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= SET_ELEMENTO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= not EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		NOT n = new NOT(a); RESULT=n;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION SIMB_LOGICA EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Logica ar= new Logica(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION SIMB_RELACIONAL EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Relacional ar= new Relacional(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION SIMB_ARITMETICO EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Aritmetica ar= new Aritmetica(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIMB_LOGICA ::= or 
            {
              Object RESULT = null;
		RESULT="||";
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*SIMB_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIMB_LOGICA ::= and 
            {
              Object RESULT = null;
		RESULT="&&";
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*SIMB_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SIMB_RELACIONAL ::= igualIgual 
            {
              Object RESULT = null;
		RESULT= "==";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIMB_RELACIONAL ::= distintoA 
            {
              Object RESULT = null;
		RESULT= "!=";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIMB_RELACIONAL ::= mayorIgual 
            {
              Object RESULT = null;
		RESULT= ">=";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIMB_RELACIONAL ::= menorIgual 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "<=";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIMB_RELACIONAL ::= mayor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= ">";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SIMB_RELACIONAL ::= menor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "<";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SIMB_ARITMETICO ::= residuo 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "%";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SIMB_ARITMETICO ::= potencia 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "^";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SIMB_ARITMETICO ::= division 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "/";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SIMB_ARITMETICO ::= multiplicacion 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "*";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SIMB_ARITMETICO ::= menos 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "-";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SIMB_ARITMETICO ::= mas 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "+";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // UNARIO ::= EXPRESION menosMenos 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(29/*UNARIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // UNARIO ::= EXPRESION masMas 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(29/*UNARIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LLAMADA ::= id abrePar cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(15/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LLAMADA ::= id abrePar LISTA_EXPRESIONES cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(15/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OBSERVADOR ::= id punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OBSERVADOR ::= id punto observador abrePar TIPOS_EVENTOS coma LLAMADA CUERPO cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OBSERVADOR ::= documento punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OBSERVADOR ::= documento punto observador abrePar TIPOS_EVENTOS coma LLAMADA CUERPO cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SET_ELEMENTO ::= setelemento abrePar cadena coma cadena cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(27/*SET_ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OBTENER ::= documento punto obtener abrePar cadena cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(26/*OBTENER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TIPOS_EVENTOS ::= cliqueado 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TIPOS_EVENTOS ::= modificado 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TIPOS_EVENTOS ::= listo 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MENSAJE ::= mensaje abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(16/*MENSAJE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA_ID ::= LISTA_ID coma id 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(25/*LISTA_ID*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA_ID ::= id 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(25/*LISTA_ID*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FUNCION ::= funcion id abrePar cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(24/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= funcion id abrePar LISTA_ID cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(24/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RETORNAR ::= retornar EXPRESION puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IMPRIMIR ::= imprimir abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(13/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DETENER ::= detener puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(12/*DETENER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MIENTRAS ::= mientras abrePar EXPRESION cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(11/*MIENTRAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARA ::= para abrePar id dosPuntos EXPRESION puntoComa EXPRESION puntoComa OPERADOR_PARA cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADOR_PARA ::= menosMenos 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(23/*OPERADOR_PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADOR_PARA ::= masMas 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(23/*OPERADOR_PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SELECCIONA ::= selecciona abrePar EXPRESION cierraPar abreLlave CUERPO_SELECCIONA cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(9/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SELECCIONA ::= selecciona abrePar EXPRESION cierraPar abreLlave cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(9/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_SELECCIONA ::= DEFECTO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CUERPO_SELECCIONA ::= LISTA_CASOS DEFECTO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CUERPO_SELECCIONA ::= LISTA_CASOS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFECTO ::= defecto dosPuntos SENTENCIAS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(21/*DEFECTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_CASOS ::= LISTA_CASOS CASO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_CASOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_CASOS ::= CASO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_CASOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASO ::= caso EXPRESION dosPuntos SENTENCIAS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(19/*CASO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= SI SINO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= SI 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SINO ::= sino CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(18/*SINO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SI ::= si abrePar EXPRESION cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*SI*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= MENSAJE 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= RETORNAR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= DETENER 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= PARA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= SELECCIONA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= IF 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<objetoBase> lista = (ArrayList<objetoBase>)l;
									lista.add((objetoBase) a);
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<objetoBase> lista = new ArrayList<>();
							lista.add((objetoBase) a);
							RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= abreLlave SENTENCIAS cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= abreLlave cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= id dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNACION ::= UNARIO puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= POS_VECTOR dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= id dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Asignacion g = new Asignacion(a,b); RESULT= g;
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= dimv id abreLlave EXPRESION cierraLlave dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= dimv id dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= dimv id abreLlave EXPRESION cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 DeclaArreglo simb = new DeclaArreglo(a,el); RESULT= simb;
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= dimv id dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Declaracion s = new Declaracion(a);
												  Asignacion s2 = new Asignacion(a,b);
												  List<objetoBase> lista = new ArrayList<>();
												  lista.add(s);
												  lista.add(s2);
												  DeclaAsig h = new DeclaAsig(lista);
												  RESULT = h;
												  
													
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACION ::= dimv id puntoComa 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaracion s = new Declaracion(i); RESULT = s;
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		parser.listaSentencias= (ArrayList<objetoBase>)a; System.out.println(a);
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

