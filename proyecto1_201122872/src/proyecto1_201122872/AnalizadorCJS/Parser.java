
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Feb 25 07:24:02 CST 2018
//----------------------------------------------------

package proyecto1_201122872.AnalizadorCJS;

import proyecto1_201122872.AnalizadorCJS.simbolosCJS;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;
import CJS.ARBOL.EXPRESION.*;
import CJS.objetoBase;
import CJS.TablaSimbolos.*;
import CJS.ARBOL.INSTRUCCIONES.*;
import CJS.ESTRUCURAS_CONTROL.*;

/** CUP v0.10k generated parser.
  * @version Sun Feb 25 07:24:02 CST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\065\003\000\002\003" +
    "\005\000\002\003\007\000\002\003\010\000\002\003\011" +
    "\000\002\003\014\000\002\004\006\000\002\004\011\000" +
    "\002\004\005\000\002\004\005\000\002\004\010\000\002" +
    "\005\003\000\002\005\005\000\002\007\004\000\002\007" +
    "\005\000\002\010\003\000\002\010\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\023\007\000\002\024\004\000\002\012\003" +
    "\000\002\012\004\000\002\025\006\000\002\026\003\000" +
    "\002\026\004\000\002\027\005\000\002\030\003\000\002" +
    "\030\004\000\002\030\003\000\002\013\010\000\002\013" +
    "\011\000\002\031\003\000\002\031\003\000\002\014\015" +
    "\000\002\015\007\000\002\016\004\000\002\017\007\000" +
    "\002\020\005\000\002\032\010\000\002\032\007\000\002" +
    "\033\003\000\002\033\005\000\002\022\007\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\034\010" +
    "\000\002\035\010\000\002\052\014\000\002\052\013\000" +
    "\002\052\014\000\002\052\013\000\002\021\006\000\002" +
    "\021\005\000\002\037\004\000\002\037\004\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003\000\002\056\003\000\002\056" +
    "\003\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\004\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\005\000\002\053\005\000\002\053\005\000\002\053\004" +
    "\000\002\053\005\000\002\053\005\000\002\053\003\000" +
    "\002\006\006\000\002\063\007\000\002\064\010\000\002" +
    "\047\003\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\052\004\005\007\053\013\016\017\052\020" +
    "\026\021\020\022\015\023\006\024\043\030\030\031\040" +
    "\033\037\041\023\056\041\057\025\060\035\063\034\064" +
    "\054\065\021\070\046\001\002\000\130\002\uffaa\004\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa\015" +
    "\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\026\uffaa\030\uffaa\031\uffaa\033\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa" +
    "\067\uffaa\070\uffaa\001\002\000\004\063\271\001\002\000" +
    "\004\007\265\001\002\000\062\002\uffe5\004\uffe5\006\uffe5" +
    "\007\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\030\uffe5\031\uffe5\033\uffe5" +
    "\041\uffe5\056\uffe5\057\uffe5\060\uffe5\063\uffe5\064\uffe5\065" +
    "\uffe5\070\uffe5\001\002\000\062\002\uffe8\004\uffe8\006\uffe8" +
    "\007\uffe8\013\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\030\uffe8\031\uffe8\033\uffe8" +
    "\041\uffe8\056\uffe8\057\uffe8\060\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\070\uffe8\001\002\000\064\002\uffe2\004\uffe2\006\uffe2" +
    "\007\uffe2\013\uffe2\014\262\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\030\uffe2\031\uffe2" +
    "\033\uffe2\041\uffe2\056\uffe2\057\uffe2\060\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\070\uffe2\001\002\000\130\002\uffab\004\uffab" +
    "\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\022\uffab\023\uffab" +
    "\024\uffab\026\uffab\030\uffab\031\uffab\033\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\060\uffab\063\uffab\064\uffab\065\uffab\066\uffab" +
    "\067\uffab\070\uffab\001\002\000\054\002\000\004\005\007" +
    "\053\013\016\017\052\020\026\021\020\022\015\023\006" +
    "\024\043\030\030\031\040\033\037\041\023\056\041\057" +
    "\025\060\035\063\034\064\054\065\021\070\046\001\002" +
    "\000\062\002\ufff1\004\ufff1\006\ufff1\007\ufff1\013\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1" +
    "\024\ufff1\030\ufff1\031\ufff1\033\ufff1\041\ufff1\056\ufff1\057" +
    "\ufff1\060\ufff1\063\ufff1\064\ufff1\065\ufff1\070\ufff1\001\002" +
    "\000\004\012\261\001\002\000\004\007\255\001\002\000" +
    "\062\002\uffea\004\uffea\006\uffea\007\uffea\013\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024" +
    "\uffea\030\uffea\031\uffea\033\uffea\041\uffea\056\uffea\057\uffea" +
    "\060\uffea\063\uffea\064\uffea\065\uffea\070\uffea\001\002\000" +
    "\004\007\251\001\002\000\130\002\uffa7\004\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\015\uffa7\016" +
    "\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\026\uffa7\030\uffa7\031\uffa7\033\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057" +
    "\uffa7\060\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7" +
    "\070\uffa7\001\002\000\062\002\uffef\004\uffef\006\uffef\007" +
    "\uffef\013\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\030\uffef\031\uffef\033\uffef\041" +
    "\uffef\056\uffef\057\uffef\060\uffef\063\uffef\064\uffef\065\uffef" +
    "\070\uffef\001\002\000\030\007\053\031\040\033\037\041" +
    "\023\056\041\057\025\060\035\063\055\064\054\065\021" +
    "\070\046\001\002\000\130\002\uffa6\004\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026" +
    "\uffa6\030\uffa6\031\uffa6\033\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6" +
    "\060\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070" +
    "\uffa6\001\002\000\130\002\uff9a\004\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\015\uff9a\016\uff9a\017" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\026\uff9a" +
    "\030\uff9a\031\uff9a\033\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060" +
    "\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a" +
    "\001\002\000\004\007\230\001\002\000\130\002\uffa8\004" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\026\uffa8\030\uffa8\031\uffa8\033\uffa8\040\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\057\uffa8\060\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\070\uffa8\001\002\000\004\007\224\001\002" +
    "\000\062\002\uffed\004\uffed\006\uffed\007\uffed\013\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\030\uffed\031\uffed\033\uffed\041\uffed\056\uffed\057" +
    "\uffed\060\uffed\063\uffed\064\uffed\065\uffed\070\uffed\001\002" +
    "\000\062\002\uffee\004\uffee\006\uffee\007\uffee\013\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\030\uffee\031\uffee\033\uffee\041\uffee\056\uffee\057" +
    "\uffee\060\uffee\063\uffee\064\uffee\065\uffee\070\uffee\001\002" +
    "\000\062\002\uffec\004\uffec\006\uffec\007\uffec\013\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\030\uffec\031\uffec\033\uffec\041\uffec\056\uffec\057" +
    "\uffec\060\uffec\063\uffec\064\uffec\065\uffec\070\uffec\001\002" +
    "\000\126\002\uffa9\004\uffa9\005\210\006\uffa9\007\110\011" +
    "\207\013\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\027\106\030\uffa9\031\uffa9\033" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\063\uffa9\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\001\002\000\130\002" +
    "\uff99\004\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022" +
    "\uff99\023\uff99\024\uff99\026\uff99\030\uff99\031\uff99\033\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046" +
    "\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\056\uff99\057\uff99\060\uff99\063\uff99\064\uff99\065" +
    "\uff99\066\uff99\067\uff99\070\uff99\001\002\000\062\002\uffe9" +
    "\004\uffe9\006\uffe9\007\uffe9\013\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\030\uffe9" +
    "\031\uffe9\033\uffe9\041\uffe9\056\uffe9\057\uffe9\060\uffe9\063" +
    "\uffe9\064\uffe9\065\uffe9\070\uffe9\001\002\000\004\007\202" +
    "\001\002\000\004\027\175\001\002\000\030\007\053\031" +
    "\040\033\037\041\023\056\041\057\025\060\035\063\055" +
    "\064\054\065\021\070\046\001\002\000\130\002\uff9e\004" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013\uff9e" +
    "\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023" +
    "\uff9e\024\uff9e\026\uff9e\030\uff9e\031\uff9e\033\uff9e\040\uff9e" +
    "\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\063\uff9e\064\uff9e\065\uff9e\066" +
    "\uff9e\067\uff9e\070\uff9e\001\002\000\030\007\053\031\040" +
    "\033\037\041\023\056\041\057\025\060\035\063\055\064" +
    "\054\065\021\070\046\001\002\000\062\002\uffeb\004\uffeb" +
    "\006\uffeb\007\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\030\uffeb\031\uffeb" +
    "\033\uffeb\041\uffeb\056\uffeb\057\uffeb\060\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\070\uffeb\001\002\000\062\002\uffe7\004\uffe7" +
    "\006\uffe7\007\uffe7\013\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\030\uffe7\031\uffe7" +
    "\033\uffe7\041\uffe7\056\uffe7\057\uffe7\060\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\070\uffe7\001\002\000\004\065\154\001\002" +
    "\000\004\002\153\001\002\000\130\002\uffac\004\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\026\uffac\030\uffac\031\uffac\033\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac" +
    "\057\uffac\060\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067" +
    "\uffac\070\uffac\001\002\000\120\002\uffe6\004\uffe6\006\uffe6" +
    "\007\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\030\uffe6\031\uffe6\033\uffe6" +
    "\040\076\041\066\042\065\043\072\044\073\045\077\046" +
    "\070\047\102\050\062\051\075\052\061\053\057\054\100" +
    "\055\064\056\uffe6\057\uffe6\060\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\150\067\147\070\uffe6\001\002\000\004\007\123" +
    "\001\002\000\030\007\053\031\040\033\037\041\023\056" +
    "\041\057\025\060\035\063\055\064\054\065\021\070\046" +
    "\001\002\000\130\002\uffa5\004\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\030" +
    "\uffa5\031\uffa5\033\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5" +
    "\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\001" +
    "\002\000\134\002\uffa9\004\uffa9\005\107\006\uffa9\007\110" +
    "\010\uffa9\011\uffa9\012\uffa9\013\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\026\uffa9" +
    "\027\106\030\uffa9\031\uffa9\033\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057" +
    "\uffa9\060\uffa9\063\uffa9\064\uffa9\065\uffa9\066\uffa9\067\uffa9" +
    "\070\uffa9\001\002\000\044\010\060\040\076\041\066\042" +
    "\065\043\072\044\073\045\077\046\070\047\102\050\062" +
    "\051\075\052\061\053\057\054\100\055\064\066\067\067" +
    "\063\001\002\000\030\007\uffb4\031\uffb4\033\uffb4\041\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\063\uffb4\064\uffb4\065\uffb4\070" +
    "\uffb4\001\002\000\130\002\uffa2\004\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\011\uffa2\012\uffa2\013\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\026\uffa2" +
    "\030\uffa2\031\uffa2\033\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2" +
    "\001\002\000\030\007\uffb3\031\uffb3\033\uffb3\041\uffb3\056" +
    "\uffb3\057\uffb3\060\uffb3\063\uffb3\064\uffb3\065\uffb3\070\uffb3" +
    "\001\002\000\030\007\uffb6\031\uffb6\033\uffb6\041\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\063\uffb6\064\uffb6\065\uffb6\070\uffb6" +
    "\001\002\000\130\002\uffbf\004\uffbf\006\uffbf\007\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\026\uffbf\030" +
    "\uffbf\031\uffbf\033\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\001" +
    "\002\000\030\007\uffb1\031\uffb1\033\uffb1\041\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\063\uffb1\064\uffb1\065\uffb1\070\uffb1\001" +
    "\002\000\030\007\uffbc\031\uffbc\033\uffbc\041\uffbc\056\uffbc" +
    "\057\uffbc\060\uffbc\063\uffbc\064\uffbc\065\uffbc\070\uffbc\001" +
    "\002\000\030\007\uffbd\031\uffbd\033\uffbd\041\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\063\uffbd\064\uffbd\065\uffbd\070\uffbd\001" +
    "\002\000\130\002\uffc0\004\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\026\uffc0\030\uffc0" +
    "\031\uffc0\033\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\063" +
    "\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\001\002" +
    "\000\030\007\uffb8\031\uffb8\033\uffb8\041\uffb8\056\uffb8\057" +
    "\uffb8\060\uffb8\063\uffb8\064\uffb8\065\uffb8\070\uffb8\001\002" +
    "\000\030\007\053\031\040\033\037\041\023\056\041\057" +
    "\025\060\035\063\055\064\054\065\021\070\046\001\002" +
    "\000\030\007\uffbb\031\uffbb\033\uffbb\041\uffbb\056\uffbb\057" +
    "\uffbb\060\uffbb\063\uffbb\064\uffbb\065\uffbb\070\uffbb\001\002" +
    "\000\030\007\uffba\031\uffba\033\uffba\041\uffba\056\uffba\057" +
    "\uffba\060\uffba\063\uffba\064\uffba\065\uffba\070\uffba\001\002" +
    "\000\030\007\053\031\040\033\037\041\023\056\041\057" +
    "\025\060\035\063\055\064\054\065\021\070\046\001\002" +
    "\000\030\007\uffb5\031\uffb5\033\uffb5\041\uffb5\056\uffb5\057" +
    "\uffb5\060\uffb5\063\uffb5\064\uffb5\065\uffb5\070\uffb5\001\002" +
    "\000\030\007\uffbe\031\uffbe\033\uffbe\041\uffbe\056\uffbe\057" +
    "\uffbe\060\uffbe\063\uffbe\064\uffbe\065\uffbe\070\uffbe\001\002" +
    "\000\030\007\uffb9\031\uffb9\033\uffb9\041\uffb9\056\uffb9\057" +
    "\uffb9\060\uffb9\063\uffb9\064\uffb9\065\uffb9\070\uffb9\001\002" +
    "\000\030\007\uffb2\031\uffb2\033\uffb2\041\uffb2\056\uffb2\057" +
    "\uffb2\060\uffb2\063\uffb2\064\uffb2\065\uffb2\070\uffb2\001\002" +
    "\000\030\007\053\031\040\033\037\041\023\056\041\057" +
    "\025\060\035\063\055\064\054\065\021\070\046\001\002" +
    "\000\030\007\uffb7\031\uffb7\033\uffb7\041\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\063\uffb7\064\uffb7\065\uffb7\070\uffb7\001\002" +
    "\000\130\002\uffb0\004\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\030\uffb0\031" +
    "\uffb0\033\uffb0\040\076\041\066\042\065\043\072\044\073" +
    "\045\077\046\070\047\102\050\062\051\075\052\061\053" +
    "\057\054\100\055\064\056\uffb0\057\uffb0\060\uffb0\063\uffb0" +
    "\064\uffb0\065\uffb0\066\067\067\063\070\uffb0\001\002\000" +
    "\130\002\uffae\004\uffae\006\uffae\007\uffae\010\uffae\011\uffae" +
    "\012\uffae\013\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\026\uffae\030\uffae\031\uffae" +
    "\033\uffae\040\076\041\066\042\065\043\072\044\073\045" +
    "\077\046\070\047\102\050\062\051\075\052\061\053\057" +
    "\054\100\055\064\056\uffae\057\uffae\060\uffae\063\uffae\064" +
    "\uffae\065\uffae\066\067\067\063\070\uffae\001\002\000\130" +
    "\002\uffaf\004\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012" +
    "\uffaf\013\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf" +
    "\022\uffaf\023\uffaf\024\uffaf\026\uffaf\030\uffaf\031\uffaf\033" +
    "\uffaf\040\076\041\066\042\065\043\072\044\073\045\077" +
    "\046\070\047\102\050\062\051\075\052\061\053\057\054" +
    "\100\055\064\056\uffaf\057\uffaf\060\uffaf\063\uffaf\064\uffaf" +
    "\065\uffaf\066\067\067\063\070\uffaf\001\002\000\006\061" +
    "\122\062\121\001\002\000\030\007\053\031\040\033\037" +
    "\041\023\056\041\057\025\060\035\063\055\064\054\065" +
    "\021\070\046\001\002\000\032\007\053\010\111\031\040" +
    "\033\037\041\023\056\041\057\025\060\035\063\055\064" +
    "\054\065\021\070\046\001\002\000\130\002\uffc1\004\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\026\uffc1\030\uffc1\031\uffc1\033\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\057\uffc1\060\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\001\002\000\006\010\115\026\114\001" +
    "\002\000\050\006\ufff5\010\ufff5\026\ufff5\040\076\041\066" +
    "\042\065\043\072\044\073\045\077\046\070\047\102\050" +
    "\062\051\075\052\061\053\057\054\100\055\064\066\067" +
    "\067\063\001\002\000\030\007\053\031\040\033\037\041" +
    "\023\056\041\057\025\060\035\063\055\064\054\065\021" +
    "\070\046\001\002\000\130\002\uffc2\004\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026" +
    "\uffc2\030\uffc2\031\uffc2\033\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2" +
    "\060\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\001\002\000\050\006\ufff4\010\ufff4\026\ufff4\040\076" +
    "\041\066\042\065\043\072\044\073\045\077\046\070\047" +
    "\102\050\062\051\075\052\061\053\057\054\100\055\064" +
    "\066\067\067\063\001\002\000\044\006\120\040\076\041" +
    "\066\042\065\043\072\044\073\045\077\046\070\047\102" +
    "\050\062\051\075\052\061\053\057\054\100\055\064\066" +
    "\067\067\063\001\002\000\130\002\uff9d\004\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\015\uff9d\016" +
    "\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024\uff9d" +
    "\026\uff9d\030\uff9d\031\uff9d\033\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\060\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d" +
    "\070\uff9d\001\002\000\130\002\uffa4\004\uffa4\006\uffa4\007" +
    "\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\015\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026" +
    "\uffa4\030\uffa4\031\uffa4\033\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051" +
    "\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070" +
    "\uffa4\001\002\000\130\002\uffa3\004\uffa3\006\uffa3\007\uffa3" +
    "\010\uffa3\011\uffa3\012\uffa3\013\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3" +
    "\030\uffa3\031\uffa3\033\uffa3\040\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3" +
    "\001\002\000\030\007\053\031\040\033\037\041\023\056" +
    "\041\057\025\060\035\063\055\064\054\065\021\070\046" +
    "\001\002\000\044\010\125\040\076\041\066\042\065\043" +
    "\072\044\073\045\077\046\070\047\102\050\062\051\075" +
    "\052\061\053\057\054\100\055\064\066\067\067\063\001" +
    "\002\000\004\005\126\001\002\000\010\006\130\015\133" +
    "\016\134\001\002\000\010\006\uffdc\015\133\016\134\001" +
    "\002\000\062\002\uffd9\004\uffd9\006\uffd9\007\uffd9\013\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\030\uffd9\031\uffd9\033\uffd9\041\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\063\uffd9\064\uffd9\065\uffd9\070\uffd9\001" +
    "\002\000\004\006\144\001\002\000\004\006\uffda\001\002" +
    "\000\030\007\053\031\040\033\037\041\023\056\041\057" +
    "\025\060\035\063\055\064\054\065\021\070\046\001\002" +
    "\000\004\011\136\001\002\000\010\006\uffdf\015\uffdf\016" +
    "\uffdf\001\002\000\052\004\005\007\053\013\016\017\052" +
    "\020\026\021\020\022\015\023\006\024\043\030\030\031" +
    "\040\033\037\041\023\056\041\057\025\060\035\063\034" +
    "\064\054\065\021\070\046\001\002\000\054\004\005\006" +
    "\uffdd\007\053\013\016\017\052\020\026\021\020\022\015" +
    "\023\006\024\043\030\030\031\040\033\037\041\023\056" +
    "\041\057\025\060\035\063\034\064\054\065\021\070\046" +
    "\001\002\000\062\002\ufff0\004\ufff0\006\ufff0\007\ufff0\013" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\023\ufff0\024\ufff0\030\ufff0\031\ufff0\033\ufff0\041\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\063\ufff0\064\ufff0\065\ufff0\070\ufff0" +
    "\001\002\000\044\011\142\040\076\041\066\042\065\043" +
    "\072\044\073\045\077\046\070\047\102\050\062\051\075" +
    "\052\061\053\057\054\100\055\064\066\067\067\063\001" +
    "\002\000\052\004\005\007\053\013\016\017\052\020\026" +
    "\021\020\022\015\023\006\024\043\030\030\031\040\033" +
    "\037\041\023\056\041\057\025\060\035\063\034\064\054" +
    "\065\021\070\046\001\002\000\060\004\005\006\uffe0\007" +
    "\053\013\016\015\uffe0\016\uffe0\017\052\020\026\021\020" +
    "\022\015\023\006\024\043\030\030\031\040\033\037\041" +
    "\023\056\041\057\025\060\035\063\034\064\054\065\021" +
    "\070\046\001\002\000\062\002\uffd8\004\uffd8\006\uffd8\007" +
    "\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\030\uffd8\031\uffd8\033\uffd8\041" +
    "\uffd8\056\uffd8\057\uffd8\060\uffd8\063\uffd8\064\uffd8\065\uffd8" +
    "\070\uffd8\001\002\000\004\006\uffdb\001\002\000\010\006" +
    "\uffde\015\uffde\016\uffde\001\002\000\122\002\uffbf\004\uffbf" +
    "\006\uffbf\007\uffbf\012\152\013\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\030\uffbf" +
    "\031\uffbf\033\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf" +
    "\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\001\002" +
    "\000\122\002\uffc0\004\uffc0\006\uffc0\007\uffc0\012\151\013" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\030\uffc0\031\uffc0\033\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\057\uffc0\060\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0" +
    "\067\uffc0\070\uffc0\001\002\000\062\002\ufff8\004\ufff8\006" +
    "\ufff8\007\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\030\ufff8\031\ufff8\033" +
    "\ufff8\041\ufff8\056\ufff8\057\ufff8\060\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\070\ufff8\001\002\000\062\002\ufff7\004\ufff7\006" +
    "\ufff7\007\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\023\ufff7\024\ufff7\030\ufff7\031\ufff7\033" +
    "\ufff7\041\ufff7\056\ufff7\057\ufff7\060\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\070\ufff7\001\002\000\004\002\001\001\002\000" +
    "\004\043\166\001\002\000\006\065\160\070\161\001\002" +
    "\000\004\070\157\001\002\000\130\002\uff9f\004\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\026\uff9f\030\uff9f\031\uff9f\033\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050" +
    "\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067" +
    "\uff9f\070\uff9f\001\002\000\004\011\162\001\002\000\130" +
    "\002\uffa0\004\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\026\uffa0\030\uffa0\031\uffa0\033" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\063\uffa0\064\uffa0" +
    "\065\uffa0\066\uffa0\067\uffa0\070\uffa0\001\002\000\004\065" +
    "\163\001\002\000\004\011\164\001\002\000\004\065\165" +
    "\001\002\000\004\070\uff9b\001\002\000\004\065\167\001" +
    "\002\000\004\043\170\001\002\000\004\065\171\001\002" +
    "\000\006\065\uff9c\070\uff9c\001\002\000\044\012\173\040" +
    "\076\041\066\042\065\043\072\044\073\045\077\046\070" +
    "\047\102\050\062\051\075\052\061\053\057\054\100\055" +
    "\064\066\067\067\063\001\002\000\062\002\uffd1\004\uffd1" +
    "\006\uffd1\007\uffd1\013\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\030\uffd1\031\uffd1" +
    "\033\uffd1\041\uffd1\056\uffd1\057\uffd1\060\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\070\uffd1\001\002\000\130\002\uffad\004\uffad" +
    "\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad\015" +
    "\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad" +
    "\024\uffad\026\uffad\030\uffad\031\uffad\033\uffad\040\076\041" +
    "\066\042\065\043\072\044\073\045\077\046\070\047\102" +
    "\050\062\051\075\052\061\053\057\054\uffad\055\uffad\056" +
    "\uffad\057\uffad\060\uffad\063\uffad\064\uffad\065\uffad\066\067" +
    "\067\063\070\uffad\001\002\000\004\032\176\001\002\000" +
    "\004\007\177\001\002\000\004\064\200\001\002\000\004" +
    "\010\201\001\002\000\130\002\uffc8\004\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026" +
    "\uffc8\030\uffc8\031\uffc8\033\uffc8\040\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070" +
    "\uffc8\001\002\000\004\064\203\001\002\000\004\026\204" +
    "\001\002\000\004\064\205\001\002\000\004\010\206\001" +
    "\002\000\130\002\uffc7\004\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\026\uffc7\030\uffc7" +
    "\031\uffc7\033\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\063" +
    "\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\001\002" +
    "\000\032\005\216\007\053\031\040\033\037\041\023\056" +
    "\041\057\025\060\035\063\055\064\054\065\021\070\046" +
    "\001\002\000\030\007\053\031\040\033\037\041\023\056" +
    "\041\057\025\060\035\063\055\064\054\065\021\070\046" +
    "\001\002\000\044\006\212\040\076\041\066\042\065\043" +
    "\072\044\073\045\077\046\070\047\102\050\062\051\075" +
    "\052\061\053\057\054\100\055\064\066\067\067\063\001" +
    "\002\000\122\002\uff9d\004\uff9d\006\uff9d\007\uff9d\011\213" +
    "\013\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\030\uff9d\031\uff9d\033\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047" +
    "\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d" +
    "\056\uff9d\057\uff9d\060\uff9d\063\uff9d\064\uff9d\065\uff9d\066" +
    "\uff9d\067\uff9d\070\uff9d\001\002\000\030\007\053\031\040" +
    "\033\037\041\023\056\041\057\025\060\035\063\055\064" +
    "\054\065\021\070\046\001\002\000\044\012\215\040\076" +
    "\041\066\042\065\043\072\044\073\045\077\046\070\047" +
    "\102\050\062\051\075\052\061\053\057\054\100\055\064" +
    "\066\067\067\063\001\002\000\062\002\ufff9\004\ufff9\006" +
    "\ufff9\007\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\024\ufff9\030\ufff9\031\ufff9\033" +
    "\ufff9\041\ufff9\056\ufff9\057\ufff9\060\ufff9\063\ufff9\064\ufff9" +
    "\065\ufff9\070\ufff9\001\002\000\030\007\053\031\040\033" +
    "\037\041\023\056\041\057\025\060\035\063\055\064\054" +
    "\065\021\070\046\001\002\000\044\012\220\040\076\041" +
    "\066\042\065\043\072\044\073\045\077\046\070\047\102" +
    "\050\062\051\075\052\061\053\057\054\100\055\064\066" +
    "\067\067\063\001\002\000\062\002\ufffa\004\ufffa\006\ufffa" +
    "\007\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\030\ufffa\031\ufffa\033\ufffa" +
    "\041\ufffa\056\ufffa\057\ufffa\060\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\070\ufffa\001\002\000\006\006\222\026\114\001\002" +
    "\000\004\012\223\001\002\000\062\002\ufff6\004\ufff6\006" +
    "\ufff6\007\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\030\ufff6\031\ufff6\033" +
    "\ufff6\041\ufff6\056\ufff6\057\ufff6\060\ufff6\063\ufff6\064\ufff6" +
    "\065\ufff6\070\ufff6\001\002\000\030\007\053\031\040\033" +
    "\037\041\023\056\041\057\025\060\035\063\055\064\054" +
    "\065\021\070\046\001\002\000\044\010\226\040\076\041" +
    "\066\042\065\043\072\044\073\045\077\046\070\047\102" +
    "\050\062\051\075\052\061\053\057\054\100\055\064\066" +
    "\067\067\063\001\002\000\004\012\227\001\002\000\062" +
    "\002\uffcc\004\uffcc\006\uffcc\007\uffcc\013\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\030\uffcc\031\uffcc\033\uffcc\041\uffcc\056\uffcc\057\uffcc\060" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\070\uffcc\001\002\000\004" +
    "\063\231\001\002\000\004\011\232\001\002\000\030\007" +
    "\053\031\040\033\037\041\023\056\041\057\025\060\035" +
    "\063\055\064\054\065\021\070\046\001\002\000\044\012" +
    "\234\040\076\041\066\042\065\043\072\044\073\045\077" +
    "\046\070\047\102\050\062\051\075\052\061\053\057\054" +
    "\100\055\064\066\067\067\063\001\002\000\030\007\053" +
    "\031\040\033\037\041\023\056\041\057\025\060\035\063" +
    "\055\064\054\065\021\070\046\001\002\000\044\012\236" +
    "\040\076\041\066\042\065\043\072\044\073\045\077\046" +
    "\070\047\102\050\062\051\075\052\061\053\057\054\100" +
    "\055\064\066\067\067\063\001\002\000\006\066\241\067" +
    "\240\001\002\000\004\010\242\001\002\000\004\010\uffd6" +
    "\001\002\000\004\010\uffd7\001\002\000\004\005\243\001" +
    "\002\000\054\004\005\006\245\007\053\013\016\017\052" +
    "\020\026\021\020\022\015\023\006\024\043\030\030\031" +
    "\040\033\037\041\023\056\041\057\025\060\035\063\034" +
    "\064\054\065\021\070\046\001\002\000\062\002\uffd5\004" +
    "\uffd5\006\uffd5\007\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\030\uffd5\031" +
    "\uffd5\033\uffd5\041\uffd5\056\uffd5\057\uffd5\060\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\070\uffd5\001\002\000\064\002\ufff3\004" +
    "\ufff3\006\ufff3\007\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\030" +
    "\ufff3\031\ufff3\033\ufff3\041\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\070\ufff3\001\002\000\054\004" +
    "\005\006\247\007\053\013\016\017\052\020\026\021\020" +
    "\022\015\023\006\024\043\030\030\031\040\033\037\041" +
    "\023\056\041\057\025\060\035\063\034\064\054\065\021" +
    "\070\046\001\002\000\064\002\ufff2\004\ufff2\006\ufff2\007" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\ufff2\024\ufff2\030\ufff2\031\ufff2\033" +
    "\ufff2\041\ufff2\056\ufff2\057\ufff2\060\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\070\ufff2\001\002\000\130\002\uffa1\004\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\015\uffa1" +
    "\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024" +
    "\uffa1\026\uffa1\030\uffa1\031\uffa1\033\uffa1\040\uffa1\041\uffa1" +
    "\042\065\043\072\044\073\045\077\046\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1" +
    "\057\uffa1\060\uffa1\063\uffa1\064\uffa1\065\uffa1\066\067\067" +
    "\063\070\uffa1\001\002\000\030\007\053\031\040\033\037" +
    "\041\023\056\041\057\025\060\035\063\055\064\054\065" +
    "\021\070\046\001\002\000\044\010\253\040\076\041\066" +
    "\042\065\043\072\044\073\045\077\046\070\047\102\050" +
    "\062\051\075\052\061\053\057\054\100\055\064\066\067" +
    "\067\063\001\002\000\004\005\243\001\002\000\062\002" +
    "\uffd4\004\uffd4\006\uffd4\007\uffd4\013\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\030" +
    "\uffd4\031\uffd4\033\uffd4\041\uffd4\056\uffd4\057\uffd4\060\uffd4" +
    "\063\uffd4\064\uffd4\065\uffd4\070\uffd4\001\002\000\030\007" +
    "\053\031\040\033\037\041\023\056\041\057\025\060\035" +
    "\063\055\064\054\065\021\070\046\001\002\000\044\010" +
    "\257\040\076\041\066\042\065\043\072\044\073\045\077" +
    "\046\070\047\102\050\062\051\075\052\061\053\057\054" +
    "\100\055\064\066\067\067\063\001\002\000\004\005\243" +
    "\001\002\000\064\002\uffe4\004\uffe4\006\uffe4\007\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\030\uffe4\031\uffe4\033\uffe4\041" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\070\uffe4\001\002\000\062\002\uffd3\004\uffd3\006\uffd3\007" +
    "\uffd3\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\030\uffd3\031\uffd3\033\uffd3\041" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\063\uffd3\064\uffd3\065\uffd3" +
    "\070\uffd3\001\002\000\004\005\243\001\002\000\062\002" +
    "\uffe1\004\uffe1\006\uffe1\007\uffe1\013\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\030" +
    "\uffe1\031\uffe1\033\uffe1\041\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\063\uffe1\064\uffe1\065\uffe1\070\uffe1\001\002\000\062\002" +
    "\uffe3\004\uffe3\006\uffe3\007\uffe3\013\uffe3\015\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\030" +
    "\uffe3\031\uffe3\033\uffe3\041\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\063\uffe3\064\uffe3\065\uffe3\070\uffe3\001\002\000\030\007" +
    "\053\031\040\033\037\041\023\056\041\057\025\060\035" +
    "\063\055\064\054\065\021\070\046\001\002\000\044\010" +
    "\267\040\076\041\066\042\065\043\072\044\073\045\077" +
    "\046\070\047\102\050\062\051\075\052\061\053\057\054" +
    "\100\055\064\066\067\067\063\001\002\000\004\012\270" +
    "\001\002\000\062\002\uffd2\004\uffd2\006\uffd2\007\uffd2\013" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\030\uffd2\031\uffd2\033\uffd2\041\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\063\uffd2\064\uffd2\065\uffd2\070\uffd2" +
    "\001\002\000\010\005\274\011\272\012\273\001\002\000" +
    "\032\005\305\007\053\031\040\033\037\041\023\056\041" +
    "\057\025\060\035\063\055\064\054\065\021\070\046\001" +
    "\002\000\062\002\uffff\004\uffff\006\uffff\007\uffff\013\uffff" +
    "\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023" +
    "\uffff\024\uffff\030\uffff\031\uffff\033\uffff\041\uffff\056\uffff" +
    "\057\uffff\060\uffff\063\uffff\064\uffff\065\uffff\070\uffff\001" +
    "\002\000\030\007\053\031\040\033\037\041\023\056\041" +
    "\057\025\060\035\063\055\064\054\065\021\070\046\001" +
    "\002\000\044\006\276\040\076\041\066\042\065\043\072" +
    "\044\073\045\077\046\070\047\102\050\062\051\075\052" +
    "\061\053\057\054\100\055\064\066\067\067\063\001\002" +
    "\000\006\011\277\012\300\001\002\000\004\005\301\001" +
    "\002\000\062\002\ufffd\004\ufffd\006\ufffd\007\ufffd\013\ufffd" +
    "\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\030\ufffd\031\ufffd\033\ufffd\041\ufffd\056\ufffd" +
    "\057\ufffd\060\ufffd\063\ufffd\064\ufffd\065\ufffd\070\ufffd\001" +
    "\002\000\030\007\053\031\040\033\037\041\023\056\041" +
    "\057\025\060\035\063\055\064\054\065\021\070\046\001" +
    "\002\000\006\006\303\026\114\001\002\000\004\012\304" +
    "\001\002\000\062\002\ufffb\004\ufffb\006\ufffb\007\ufffb\013" +
    "\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\030\ufffb\031\ufffb\033\ufffb\041\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\063\ufffb\064\ufffb\065\ufffb\070\ufffb" +
    "\001\002\000\030\007\053\031\040\033\037\041\023\056" +
    "\041\057\025\060\035\063\055\064\054\065\021\070\046" +
    "\001\002\000\044\012\307\040\076\041\066\042\065\043" +
    "\072\044\073\045\077\046\070\047\102\050\062\051\075" +
    "\052\061\053\057\054\100\055\064\066\067\067\063\001" +
    "\002\000\062\002\ufffe\004\ufffe\006\ufffe\007\ufffe\013\ufffe" +
    "\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\024\ufffe\030\ufffe\031\ufffe\033\ufffe\041\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\063\ufffe\064\ufffe\065\ufffe\070\ufffe\001" +
    "\002\000\006\006\311\026\114\001\002\000\004\012\312" +
    "\001\002\000\062\002\ufffc\004\ufffc\006\ufffc\007\ufffc\013" +
    "\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\030\ufffc\031\ufffc\033\ufffc\041\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\063\ufffc\064\ufffc\065\ufffc\070\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\054\003\031\004\030\006\026\010\012\011" +
    "\013\012\021\013\032\014\043\015\016\016\035\017\007" +
    "\020\044\021\041\022\006\023\010\034\011\035\047\037" +
    "\003\047\023\053\050\065\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\262\001\001\000\002\001\001" +
    "\000\050\003\031\004\030\006\026\011\137\012\021\013" +
    "\032\014\043\015\016\016\035\017\007\020\044\021\041" +
    "\022\006\023\010\034\011\035\047\037\003\047\023\053" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\006\026\021\041\034\011" +
    "\035\047\037\003\047\023\053\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\026\021\041\034\011\035\047\037\003\047\023\053\173" +
    "\001\001\000\002\001\001\000\020\006\026\021\041\034" +
    "\011\035\047\037\003\047\023\053\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\063\154\064\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\054\100" +
    "\055\070\056\073\001\001\000\002\001\001\000\020\006" +
    "\026\021\041\034\011\035\047\037\003\047\023\053\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\100\055\070\056\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\026\021" +
    "\041\034\011\035\047\037\003\047\023\053\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\026\021" +
    "\041\034\011\035\047\037\003\047\023\053\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\026\021\041\034\011\035\047" +
    "\037\003\047\023\053\102\001\001\000\002\001\001\000" +
    "\010\054\100\055\070\056\073\001\001\000\010\054\100" +
    "\055\070\056\073\001\001\000\010\054\100\055\070\056" +
    "\073\001\001\000\002\001\001\000\020\006\026\021\041" +
    "\034\011\035\047\037\003\047\023\053\116\001\001\000" +
    "\022\005\111\006\026\021\041\034\011\035\047\037\003" +
    "\047\023\053\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\054\100\055\070\056\073\001\001\000\020" +
    "\006\026\021\041\034\011\035\047\037\003\047\023\053" +
    "\115\001\001\000\002\001\001\000\010\054\100\055\070" +
    "\056\073\001\001\000\010\054\100\055\070\056\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\026\021\041\034\011\035\047\037\003\047" +
    "\023\053\123\001\001\000\010\054\100\055\070\056\073" +
    "\001\001\000\002\001\001\000\012\025\134\026\126\027" +
    "\131\030\130\001\001\000\006\025\145\027\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\026\021\041\034\011\035\047\037\003\047\023" +
    "\053\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\003\031\004\030\006\026\010\136\011\013\012\021" +
    "\013\032\014\043\015\016\016\035\017\007\020\044\021" +
    "\041\022\006\023\010\034\011\035\047\037\003\047\023" +
    "\053\050\001\001\000\050\003\031\004\030\006\026\011" +
    "\137\012\021\013\032\014\043\015\016\016\035\017\007" +
    "\020\044\021\041\022\006\023\010\034\011\035\047\037" +
    "\003\047\023\053\050\001\001\000\002\001\001\000\010" +
    "\054\100\055\070\056\073\001\001\000\052\003\031\004" +
    "\030\006\026\010\142\011\013\012\021\013\032\014\043" +
    "\015\016\016\035\017\007\020\044\021\041\022\006\023" +
    "\010\034\011\035\047\037\003\047\023\053\050\001\001" +
    "\000\050\003\031\004\030\006\026\011\137\012\021\013" +
    "\032\014\043\015\016\016\035\017\007\020\044\021\041" +
    "\022\006\023\010\034\011\035\047\037\003\047\023\053" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\054\100\055\070\056\073\001\001\000\002\001" +
    "\001\000\010\054\100\055\070\056\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\026\021\041\034\011\035\047\037\003\047\023" +
    "\053\216\001\001\000\020\006\026\021\041\034\011\035" +
    "\047\037\003\047\023\053\210\001\001\000\010\054\100" +
    "\055\070\056\073\001\001\000\002\001\001\000\020\006" +
    "\026\021\041\034\011\035\047\037\003\047\023\053\213" +
    "\001\001\000\010\054\100\055\070\056\073\001\001\000" +
    "\002\001\001\000\022\005\220\006\026\021\041\034\011" +
    "\035\047\037\003\047\023\053\112\001\001\000\010\054" +
    "\100\055\070\056\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\026\021\041\034\011\035\047\037\003\047\023\053\224" +
    "\001\001\000\010\054\100\055\070\056\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\006\026\021\041\034\011\035\047\037" +
    "\003\047\023\053\232\001\001\000\010\054\100\055\070" +
    "\056\073\001\001\000\020\006\026\021\041\034\011\035" +
    "\047\037\003\047\023\053\234\001\001\000\010\054\100" +
    "\055\070\056\073\001\001\000\004\031\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\243\001\001\000\052\003\031\004\030\006\026\010" +
    "\245\011\013\012\021\013\032\014\043\015\016\016\035" +
    "\017\007\020\044\021\041\022\006\023\010\034\011\035" +
    "\047\037\003\047\023\053\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\031\004\030\006\026\011" +
    "\137\012\021\013\032\014\043\015\016\016\035\017\007" +
    "\020\044\021\041\022\006\023\010\034\011\035\047\037" +
    "\003\047\023\053\050\001\001\000\002\001\001\000\010" +
    "\054\100\055\070\056\073\001\001\000\020\006\026\021" +
    "\041\034\011\035\047\037\003\047\023\053\251\001\001" +
    "\000\010\054\100\055\070\056\073\001\001\000\004\007" +
    "\253\001\001\000\002\001\001\000\020\006\026\021\041" +
    "\034\011\035\047\037\003\047\023\053\255\001\001\000" +
    "\010\054\100\055\070\056\073\001\001\000\004\007\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\263\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\026\021\041\034\011\035\047\037\003\047\023\053" +
    "\265\001\001\000\010\054\100\055\070\056\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\026\021\041\034\011\035\047\037\003\047\023" +
    "\053\305\001\001\000\002\001\001\000\020\006\026\021" +
    "\041\034\011\035\047\037\003\047\023\053\274\001\001" +
    "\000\010\054\100\055\070\056\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\005\301" +
    "\006\026\021\041\034\011\035\047\037\003\047\023\053" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\307\006\026\021\041\034\011\035" +
    "\047\037\003\047\023\053\112\001\001\000\010\054\100" +
    "\055\070\056\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public objetoBase raiz;
	public List<objetoBase>listaSentencias;

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


//Operaciones_Listas operaciones = new Operaciones_Listas();


  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // BOOLEAN ::= falso 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Booleano b = new Booleano("falso");RESULT= b;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*BOOLEAN*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // BOOLEAN ::= verdadero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Booleano b = new Booleano("verdadero");RESULT= b;
              CUP$Parser$result = new java_cup.runtime.Symbol(37/*BOOLEAN*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DATETIME ::= DATE numero dosPuntos numero dosPuntos numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		DateTime dt = new DateTime(a,b,c,d); RESULT= dt;
              CUP$Parser$result = new java_cup.runtime.Symbol(50/*DATETIME*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DATE ::= numero division numero division numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Datee d = new Datee(a,b,c); RESULT=d;
              CUP$Parser$result = new java_cup.runtime.Symbol(49/*DATE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // POS_VECTOR ::= id abreLlave EXPRESION cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(4/*POS_VECTOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= LLAMADA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= comillaSimple DATETIME comillaSimple 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= comillaSimple DATE comillaSimple 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= menos EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Negativo g= new Negativo(a); RESULT= g;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= abrePar EXPRESION cierraPar 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= id punto conteo 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= id punto atexto 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= cadena 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Cadena cad = new Cadena(a); RESULT = cad;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= BOOLEAN 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= numero 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Numero n = new Numero(a); RESULT= n;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= POS_VECTOR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= id 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Id i= new Id(a); RESULT= i;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= UNARIO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= OBTENER 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= SET_ELEMENTO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= not EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		NOT n = new NOT(a); RESULT=n;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION SIMB_LOGICA EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Logica ar= new Logica(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION SIMB_RELACIONAL EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Relacional ar= new Relacional(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION SIMB_ARITMETICO EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		Aritmetica ar= new Aritmetica(a,b,c); RESULT= ar;
              CUP$Parser$result = new java_cup.runtime.Symbol(41/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SIMB_LOGICA ::= or 
            {
              Object RESULT = null;
		RESULT="||";
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*SIMB_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SIMB_LOGICA ::= and 
            {
              Object RESULT = null;
		RESULT="&&";
              CUP$Parser$result = new java_cup.runtime.Symbol(44/*SIMB_LOGICA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIMB_RELACIONAL ::= igualIgual 
            {
              Object RESULT = null;
		RESULT= "==";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIMB_RELACIONAL ::= distintoA 
            {
              Object RESULT = null;
		RESULT= "!=";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIMB_RELACIONAL ::= mayorIgual 
            {
              Object RESULT = null;
		RESULT= ">=";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SIMB_RELACIONAL ::= menorIgual 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "<=";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIMB_RELACIONAL ::= mayor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= ">";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SIMB_RELACIONAL ::= menor 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "<";
              CUP$Parser$result = new java_cup.runtime.Symbol(43/*SIMB_RELACIONAL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIMB_ARITMETICO ::= residuo 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "%";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIMB_ARITMETICO ::= potencia 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "^";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SIMB_ARITMETICO ::= division 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "/";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SIMB_ARITMETICO ::= multiplicacion 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "*";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SIMB_ARITMETICO ::= menos 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "-";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SIMB_ARITMETICO ::= mas 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= "+";
              CUP$Parser$result = new java_cup.runtime.Symbol(42/*SIMB_ARITMETICO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // UNARIO ::= EXPRESION menosMenos 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(29/*UNARIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // UNARIO ::= EXPRESION masMas 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(29/*UNARIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LLAMADA ::= id abrePar cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(15/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LLAMADA ::= id abrePar LISTA_EXPRESIONES cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(15/*LLAMADA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OBSERVADOR ::= id punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OBSERVADOR ::= id punto observador abrePar TIPOS_EVENTOS coma LLAMADA CUERPO cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OBSERVADOR ::= documento punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OBSERVADOR ::= documento punto observador abrePar TIPOS_EVENTOS coma LLAMADA CUERPO cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(40/*OBSERVADOR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SET_ELEMENTO ::= setelemento abrePar cadena coma cadena cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(27/*SET_ELEMENTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OBTENER ::= documento punto obtener abrePar cadena cierraPar 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(26/*OBTENER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIPOS_EVENTOS ::= cliqueado 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TIPOS_EVENTOS ::= modificado 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TIPOS_EVENTOS ::= listo 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(28/*TIPOS_EVENTOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MENSAJE ::= mensaje abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Mensaje j = new Mensaje(a); RESULT= j;
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*MENSAJE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_ID ::= LISTA_ID coma id 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(25/*LISTA_ID*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA_ID ::= id 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(25/*LISTA_ID*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FUNCION ::= funcion id abrePar cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(24/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FUNCION ::= funcion id abrePar LISTA_ID cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(24/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETORNAR ::= retornar EXPRESION puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(14/*RETORNAR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IMPRIMIR ::= imprimir abrePar EXPRESION cierraPar puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(13/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DETENER ::= detener puntoComa 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(12/*DETENER*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MIENTRAS ::= mientras abrePar EXPRESION cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(11/*MIENTRAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARA ::= para abrePar id dosPuntos EXPRESION puntoComa EXPRESION puntoComa OPERADOR_PARA cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(10/*PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERADOR_PARA ::= menosMenos 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(23/*OPERADOR_PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERADOR_PARA ::= masMas 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(23/*OPERADOR_PARA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SELECCIONA ::= selecciona abrePar EXPRESION cierraPar abreLlave CUERPO_SELECCIONA cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(9/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SELECCIONA ::= selecciona abrePar EXPRESION cierraPar abreLlave cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(9/*SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CUERPO_SELECCIONA ::= DEFECTO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CUERPO_SELECCIONA ::= LISTA_CASOS DEFECTO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_SELECCIONA ::= LISTA_CASOS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(22/*CUERPO_SELECCIONA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DEFECTO ::= defecto dosPuntos SENTENCIAS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(21/*DEFECTO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_CASOS ::= LISTA_CASOS CASO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_CASOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_CASOS ::= CASO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(20/*LISTA_CASOS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASO ::= caso EXPRESION dosPuntos SENTENCIAS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(19/*CASO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IF ::= SI SINO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= SI 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*IF*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SINO ::= sino CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(18/*SINO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SI ::= si abrePar EXPRESION cierraPar CUERPO 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(17/*SI*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= MENSAJE 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT=a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= EXPRESION 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= RETORNAR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= IMPRIMIR 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= DETENER 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= MIENTRAS 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= PARA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= SELECCIONA 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		RESULT= a;
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= IF 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<objetoBase> lista = (ArrayList<objetoBase>)l;
									lista.add((objetoBase) a);
									RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		List<objetoBase> lista = new ArrayList<>();
							lista.add((objetoBase) a);
							RESULT= lista;
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= abreLlave SENTENCIAS cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= abreLlave cierraLlave 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(5/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA_EXPRESIONES ::= LISTA_EXPRESIONES coma EXPRESION 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
											List<objetoBase>elementos= (ArrayList<objetoBase>)l;
											elementos.add((objetoBase)a);
											RESULT=elementos;
										 
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*LISTA_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA_EXPRESIONES ::= EXPRESION 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
									List<objetoBase> elementos= new ArrayList<>();
									elementos.add((objetoBase)a);
									RESULT= elementos;
								
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*LISTA_EXPRESIONES*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ASIGNACION ::= id dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		asignaArreglo c = new asignaArreglo(a,b); RESULT=c; 
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ASIGNACION ::= EXPRESION menosMenos puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		AsignaUnario u =  new AsignaUnario(a,b); RESULT= u;
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASIGNACION ::= EXPRESION masMas puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		AsignaUnario u =  new AsignaUnario(a,b); RESULT= u;
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASIGNACION ::= id abreLlave EXPRESION cierraLlave dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		AsignaPosArreglo h= new AsignaPosArreglo(a,b,c); RESULT= h;
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASIGNACION ::= id dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Asignacion g = new Asignacion(a,b); RESULT= g;
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= dimv id abreLlave EXPRESION cierraLlave dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		DeclaArreglo simb = new DeclaArreglo(a,el);
		asignaArreglo c = new asignaArreglo(a,b);
		DeclaArregloNumAsigna g = new DeclaArregloNumAsigna(simb,c);
		RESULT = g;
	
	
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= dimv id dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
		List<objetoBase> l = (ArrayList<objetoBase>)lista;
		Numero num = new Numero(l.size());
		DeclaArreglo d= new DeclaArreglo(a, num);
		asignaArreglo c = new asignaArreglo(a,lista);
		List<objetoBase> listado = new ArrayList<>();
		listado.add(d);
		listado.add(c);
		DeclaAsig h = new DeclaAsig(listado);
		RESULT= h;
	
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= dimv id abreLlave EXPRESION cierraLlave puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 DeclaArreglo simb = new DeclaArreglo(a,el); RESULT= simb;
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= dimv id dosPuntos EXPRESION puntoComa 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Declaracion s = new Declaracion(a);
												  Asignacion s2 = new Asignacion(a,b);
												  List<objetoBase> lista = new ArrayList<>();
												  lista.add(s);
												  lista.add(s2);
												  DeclaAsig h = new DeclaAsig(lista);
												  RESULT = h;
												  
													
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DECLARACION ::= dimv id puntoComa 
            {
              Object RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Declaracion s = new Declaracion(i); RESULT = s;
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		parser.listaSentencias= (ArrayList<objetoBase>)a; System.out.println(a);
              CUP$Parser$result = new java_cup.runtime.Symbol(51/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

