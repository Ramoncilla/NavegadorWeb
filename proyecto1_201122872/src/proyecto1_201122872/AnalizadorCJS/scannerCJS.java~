/* The following code was generated by JFlex 1.4.3 on 3/7/18 3:55 PM */

/* ------------------------==: CODIGO DE USUARIO :==--------------------------*/

package proyecto1_201122872.AnalizadorCJS;
    

import java_cup.runtime.Symbol;
import java.io.*;
import java.lang.*;
import java.util.ArrayList;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/7/18 3:55 PM from the specification file
 * <tt>ScannerJS.jflex</tt>
 */
public class scannerCJS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\56\1\26\1\0\2\56\22\0\1\56\1\53\1\4\2\0"+
    "\1\47\1\54\1\5\1\33\1\34\1\45\1\43\1\37\1\44\1\2"+
    "\1\25\12\1\1\35\1\36\1\50\1\52\1\51\2\0\1\6\1\41"+
    "\1\13\1\16\1\10\1\23\1\3\1\3\1\15\1\40\1\3\1\22"+
    "\1\27\1\14\1\12\1\21\1\42\1\17\1\24\1\7\1\20\1\30"+
    "\1\3\1\11\2\3\3\0\1\46\1\3\1\0\1\6\1\41\1\13"+
    "\1\16\1\10\1\23\1\3\1\3\1\15\1\40\1\3\1\22\1\27"+
    "\1\14\1\12\1\21\1\42\1\17\1\24\1\7\1\20\1\30\1\3"+
    "\1\11\2\3\1\31\1\55\1\32\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\13\4"+
    "\1\6\1\7\1\4\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\1\1\26\2\1\1\0\1\4\2\0\1\27"+
    "\2\0\4\30\20\4\1\31\3\4\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\2\5\0\2\30"+
    "\1\0\1\30\27\4\4\0\2\30\1\0\1\42\1\4"+
    "\1\43\2\4\1\44\6\4\1\45\1\4\1\46\4\4"+
    "\1\47\3\4\3\0\1\30\12\4\1\50\6\4\2\0"+
    "\1\43\1\51\2\4\1\52\14\4\2\0\1\53\3\4"+
    "\1\54\1\55\2\4\1\56\2\4\1\57\2\4\1\60"+
    "\1\61\2\4\1\62\1\4\1\63\3\4\1\64\1\4"+
    "\1\65\1\66\3\4\1\67\1\4\1\70\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\57\0\215\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\57\0\u031f\0\u034e\0\57\0\57\0\57"+
    "\0\57\0\57\0\57\0\57\0\u037d\0\u03ac\0\57\0\57"+
    "\0\57\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5"+
    "\0\u0524\0\u0553\0\u0582\0\57\0\u05b1\0\u05e0\0\u060f\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6"+
    "\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e"+
    "\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\57\0\57"+
    "\0\57\0\57\0\57\0\57\0\57\0\57\0\u04f5\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67"+
    "\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf"+
    "\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057"+
    "\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\57\0\u11a0"+
    "\0\215\0\u11cf\0\u11fe\0\215\0\u122d\0\u125c\0\u128b\0\u12ba"+
    "\0\u12e9\0\u1318\0\215\0\u1347\0\215\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\215\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695"+
    "\0\u16c4\0\u16f3\0\u1722\0\215\0\u1751\0\u1780\0\u17af\0\u17de"+
    "\0\u180d\0\u183c\0\u186b\0\u189a\0\57\0\215\0\u18c9\0\u18f8"+
    "\0\215\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41"+
    "\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\215"+
    "\0\u1bb9\0\u1be8\0\u1c17\0\215\0\215\0\u1c46\0\u1c75\0\215"+
    "\0\u1ca4\0\u1cd3\0\215\0\u1d02\0\u1d31\0\57\0\57\0\u1d60"+
    "\0\u1d8f\0\215\0\u1dbe\0\215\0\u1ded\0\u1e1c\0\u1e4b\0\215"+
    "\0\u1e7a\0\215\0\215\0\u1ea9\0\u1ed8\0\u1f07\0\215\0\u1f36"+
    "\0\215\0\215\0\215";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\2\5\1\12\1\13\1\5\1\14\1\15\1\16\1\5"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\5"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\3\5"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\24\60\0\1\3\1\50\55\0"+
    "\1\51\1\52\1\5\2\0\17\5\2\0\2\5\7\0"+
    "\3\5\14\0\4\53\1\54\2\53\1\55\13\53\1\56"+
    "\33\53\5\57\1\0\1\57\1\60\13\57\1\61\1\57"+
    "\1\62\1\0\30\57\1\0\1\51\1\52\1\5\2\0"+
    "\1\5\1\63\15\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\11\5\1\64\5\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\17\5\2\0\2\5\7\0\1\5\1\65\1\5\15\0"+
    "\1\51\1\52\1\5\2\0\1\66\3\5\1\67\7\5"+
    "\1\70\2\5\2\0\2\5\7\0\3\5\15\0\1\51"+
    "\1\52\1\5\2\0\17\5\2\0\1\71\1\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\2\5\1\72"+
    "\1\5\1\73\2\5\1\74\7\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\2\5\1\75"+
    "\14\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\1\76\16\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\7\5\1\77\7\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\1\100\11\5\1\101\4\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\2\5\1\102"+
    "\4\5\1\103\7\5\2\0\2\5\7\0\3\5\42\0"+
    "\1\24\27\0\1\24\1\0\1\51\1\52\1\5\2\0"+
    "\2\5\1\104\1\5\1\105\2\5\1\106\7\5\2\0"+
    "\2\5\7\0\3\5\57\0\1\107\57\0\1\110\64\0"+
    "\1\111\56\0\1\112\56\0\1\113\56\0\1\114\60\0"+
    "\1\115\57\0\1\116\2\0\1\117\56\0\1\51\1\120"+
    "\1\5\2\0\17\5\2\0\2\5\7\0\3\5\22\0"+
    "\1\121\4\0\1\122\43\0\4\53\1\54\56\53\1\54"+
    "\12\53\1\123\43\53\1\54\1\53\1\124\50\53\5\57"+
    "\1\0\20\57\1\0\35\57\1\0\11\57\1\125\6\57"+
    "\1\0\35\57\1\0\1\126\17\57\1\0\30\57\5\62"+
    "\1\127\17\62\1\130\1\127\30\62\1\0\1\51\1\52"+
    "\1\5\2\0\2\5\1\131\14\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\12\5\1\132"+
    "\4\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\1\5\1\133\14\5\1\134\2\0\2\5"+
    "\7\0\3\5\15\0\1\51\1\52\1\5\2\0\16\5"+
    "\1\135\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\6\5\1\136\10\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\7\5\1\137"+
    "\7\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\13\5\1\140\3\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\1\5\1\141"+
    "\13\5\1\142\1\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\5\5\1\143\11\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\17\5\2\0\1\144\1\5\7\0\3\5\15\0\1\51"+
    "\1\52\1\5\2\0\1\5\1\145\15\5\2\0\2\5"+
    "\7\0\3\5\15\0\1\51\1\52\1\5\2\0\11\5"+
    "\1\146\5\5\2\0\2\5\7\0\3\5\15\0\1\51"+
    "\1\52\1\5\2\0\16\5\1\147\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\14\5\1\150"+
    "\2\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\6\5\1\151\10\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\1\5\1\152"+
    "\12\5\1\153\2\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\6\5\1\154\10\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\6\5\1\155\10\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\10\5\1\156\6\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\2\5\1\157\14\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\5\4\0\1\121\4\0\1\122\52\0\1\160\61\0"+
    "\1\161\44\0\4\53\1\54\13\53\1\162\42\53\1\54"+
    "\15\53\1\163\34\53\5\57\1\0\12\57\1\164\5\57"+
    "\1\0\35\57\1\0\14\57\1\165\3\57\1\0\30\57"+
    "\25\127\1\166\31\127\5\62\1\167\17\62\1\130\1\127"+
    "\30\62\1\0\1\51\1\52\1\5\2\0\3\5\1\170"+
    "\13\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\2\5\1\171\14\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\2\5\1\172"+
    "\14\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\2\5\1\173\14\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\4\5\1\174"+
    "\12\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\1\5\1\175\15\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\17\5\2\0"+
    "\2\5\7\0\2\5\1\176\15\0\1\51\1\52\1\5"+
    "\2\0\11\5\1\177\5\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\2\5\1\200\14\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\2\5\1\201\14\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\12\5\1\202\4\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\17\5\2\0\1\5\1\203\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\4\5\1\204\12\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\1\205\16\5\2\0\2\5\7\0\3\5\15\0\1\51"+
    "\1\52\1\5\2\0\1\5\1\206\15\5\2\0\2\5"+
    "\7\0\3\5\15\0\1\51\1\52\1\5\2\0\16\5"+
    "\1\132\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\5\5\1\207\11\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\2\5\1\210"+
    "\14\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\2\5\1\211\14\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\4\5\1\212"+
    "\12\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\16\5\1\213\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\7\5\1\214\7\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\6\5\1\215\10\5\2\0\2\5\7\0\3\5"+
    "\24\0\1\216\62\0\1\217\42\0\4\53\1\54\3\53"+
    "\1\220\52\53\1\54\17\53\1\162\32\53\5\57\1\0"+
    "\2\57\1\221\15\57\1\0\35\57\1\0\16\57\1\164"+
    "\1\57\1\0\30\57\5\127\1\167\17\127\1\166\31\127"+
    "\1\0\1\51\1\52\1\5\2\0\1\5\1\222\15\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\6\5\1\223\10\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\11\5\1\224\5\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\2\5\1\225\14\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\12\5\1\226\4\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\7\5\1\227\7\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\6\5\1\230\10\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\5\5\1\231\11\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\17\5\2\0\1\232"+
    "\1\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\11\5\1\233\5\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\4\5\1\234\12\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\7\5\1\235\7\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\14\5\1\236\2\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\5\5\1\237\11\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\1\240\16\5\2\0\2\5"+
    "\7\0\3\5\15\0\1\51\1\52\1\5\2\0\15\5"+
    "\1\241\1\5\2\0\2\5\7\0\3\5\15\0\1\51"+
    "\1\52\1\5\2\0\1\5\1\242\15\5\2\0\2\5"+
    "\7\0\3\5\25\0\1\243\54\0\1\244\47\0\4\53"+
    "\1\245\52\53\5\57\1\245\20\57\1\0\30\57\1\0"+
    "\1\51\1\52\1\5\2\0\4\5\1\246\12\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\2\5\1\247\14\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\17\5\2\0\1\5\1\250"+
    "\7\0\3\5\15\0\1\51\1\52\1\5\2\0\4\5"+
    "\1\251\12\5\2\0\2\5\7\0\3\5\15\0\1\51"+
    "\1\52\1\5\2\0\2\5\1\252\14\5\2\0\2\5"+
    "\7\0\3\5\15\0\1\51\1\52\1\5\2\0\17\5"+
    "\2\0\1\253\1\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\2\5\1\254\14\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\1\5\1\255"+
    "\15\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\2\5\1\256\14\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\6\5\1\257"+
    "\10\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\4\5\1\260\12\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\2\5\1\261"+
    "\14\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\5\5\1\262\11\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\17\5\2\0"+
    "\2\5\7\0\1\263\2\5\15\0\1\51\1\52\1\5"+
    "\2\0\7\5\1\264\7\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\11\5\1\265\5\5"+
    "\2\0\2\5\7\0\3\5\23\0\1\266\57\0\1\267"+
    "\47\0\1\51\1\52\1\5\2\0\11\5\1\270\5\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\1\271\16\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\1\272\16\5\2\0\2\5"+
    "\7\0\3\5\15\0\1\51\1\52\1\5\2\0\7\5"+
    "\1\273\7\5\2\0\2\5\7\0\3\5\15\0\1\51"+
    "\1\52\1\5\2\0\11\5\1\274\5\5\2\0\2\5"+
    "\7\0\3\5\15\0\1\51\1\52\1\5\2\0\4\5"+
    "\1\275\12\5\2\0\2\5\7\0\3\5\15\0\1\51"+
    "\1\52\1\5\2\0\6\5\1\276\10\5\2\0\2\5"+
    "\7\0\3\5\15\0\1\51\1\52\1\5\2\0\1\277"+
    "\16\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\6\5\1\300\10\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\17\5\2\0"+
    "\1\301\1\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\7\5\1\302\7\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\2\5\1\303\14\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\5\5\1\304\11\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\1\305\16\5\2\0"+
    "\2\5\7\0\3\5\26\0\1\306\56\0\1\307\45\0"+
    "\1\51\1\52\1\5\2\0\10\5\1\310\6\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\10\5\1\311\6\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\11\5\1\312\5\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\1\5\1\313\15\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\11\5\1\314\5\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\2\5\1\315\14\5\2\0\2\5\7\0\3\5\15\0"+
    "\1\51\1\52\1\5\2\0\4\5\1\316\12\5\2\0"+
    "\2\5\7\0\3\5\15\0\1\51\1\52\1\5\2\0"+
    "\1\317\16\5\2\0\2\5\7\0\3\5\15\0\1\51"+
    "\1\52\1\5\2\0\16\5\1\320\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\4\5\1\321"+
    "\12\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\4\5\1\322\12\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\4\5\1\323"+
    "\12\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\6\5\1\324\10\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\6\5\1\325"+
    "\10\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\10\5\1\326\6\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\11\5\1\327"+
    "\5\5\2\0\2\5\7\0\3\5\15\0\1\51\1\52"+
    "\1\5\2\0\1\5\1\330\15\5\2\0\2\5\7\0"+
    "\3\5\15\0\1\51\1\52\1\5\2\0\1\331\16\5"+
    "\2\0\2\5\7\0\3\5\15\0\1\51\1\52\1\5"+
    "\2\0\4\5\1\332\12\5\2\0\2\5\7\0\3\5"+
    "\15\0\1\51\1\52\1\5\2\0\4\5\1\333\12\5"+
    "\2\0\2\5\7\0\3\5\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8037];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\16\1\1\11\2\1\7\11"+
    "\2\1\3\11\6\1\1\0\1\1\2\0\1\11\2\0"+
    "\30\1\10\11\1\1\5\0\2\1\1\0\30\1\4\0"+
    "\2\1\1\0\1\11\26\1\3\0\22\1\2\0\1\11"+
    "\20\1\2\0\16\1\2\11\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public static String cadena;

/* ------------------------==: METODO DE ERROR LEXICO :==---------------------*/
    private void ErrorScan(int linea, int columna, String valor) {
        System.out.println("Error Lexico Iden: " + valor + ", " + linea + ", " + columna);
        cadena += "<tr>"
                + "<td><center><b>" + valor + "</b></center></td>"
                + "<td><center><b>" + linea + "</b></center></td>"
                + "<td><center><b>" + columna + "</b></center></td>"
                + "</tr>";
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scannerCJS(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scannerCJS(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 58: 
          { System.out.println("setElemento");   return new Symbol (simbolosCJS.setelemento, yyline+1,yychar+1, new String (yytext()));
          }
        case 59: break;
        case 29: 
          { System.out.println("mayorIgual");   return new Symbol (simbolosCJS.mayorIgual, yyline+1,yychar+1, new String (yytext()));
          }
        case 60: break;
        case 13: 
          { System.out.println("puntoComa");   return new Symbol (simbolosCJS.puntoComa, yyline+1,yychar+1, new String (yytext()));
          }
        case 61: break;
        case 14: 
          { System.out.println("coma");   return new Symbol (simbolosCJS.coma, yyline+1,yychar+1, new String (yytext()));
          }
        case 62: break;
        case 44: 
          { System.out.println("detener");   return new Symbol (simbolosCJS.detener, yyline+1,yychar+1, new String (yytext()));
          }
        case 63: break;
        case 37: 
          { System.out.println("dimv");   return new Symbol (simbolosCJS.dimv, yyline+1,yychar+1, new String (yytext()));
          }
        case 64: break;
        case 55: 
          { System.out.println("observador");   return new Symbol (simbolosCJS.observador, yyline+1,yychar+1, new String (yytext()));
          }
        case 65: break;
        case 11: 
          { System.out.println("cierraPar");   return new Symbol (simbolosCJS.cierraPar, yyline+1,yychar+1, new String (yytext()));
          }
        case 66: break;
        case 12: 
          { System.out.println("dosPuntos");   return new Symbol (simbolosCJS.dosPuntos, yyline+1,yychar+1, new String (yytext()));
          }
        case 67: break;
        case 57: 
          { System.out.println("modificado");   return new Symbol (simbolosCJS.modificado, yyline+1,yychar+1, new String (yytext()));
          }
        case 68: break;
        case 10: 
          { System.out.println("abrePar");   return new Symbol (simbolosCJS.abrePar, yyline+1,yychar+1, new String (yytext()));
          }
        case 69: break;
        case 24: 
          { System.out.println("Coment simple");   /* se ignora*/
          }
        case 70: break;
        case 22: 
          { System.out.println("not");  return new Symbol (simbolosCJS.not, yyline+1,yychar+1, new String (yytext()));
          }
        case 71: break;
        case 9: 
          { System.out.println("cierraLlave");   return new Symbol (simbolosCJS.cierraLlave, yyline+1,yychar+1, new String (yytext()));
          }
        case 72: break;
        case 34: 
          { System.out.println("Coment Multi");   /* se ignora*/
          }
        case 73: break;
        case 40: 
          { System.out.println("listo");   return new Symbol (simbolosCJS.listo, yyline+1,yychar+1, new String (yytext()));
          }
        case 74: break;
        case 1: 
          { ErrorScan(yyline,yychar,yytext());
          }
        case 75: break;
        case 8: 
          { System.out.println("abreLlave");   return new Symbol (simbolosCJS.abreLlave, yyline+1,yychar+1, new String (yytext()));
          }
        case 76: break;
        case 6: 
          { System.out.println("division");   return new Symbol (simbolosCJS.division, yyline+1,yychar+1, new String (yytext()));
          }
        case 77: break;
        case 20: 
          { System.out.println("menor");  return new Symbol (simbolosCJS.menor, yyline+1,yychar+1, new String (yytext()));
          }
        case 78: break;
        case 16: 
          { System.out.println("menos");   return new Symbol (simbolosCJS.menos, yyline+1,yychar+1, new String (yytext()));
          }
        case 79: break;
        case 48: 
          { System.out.println("cadebaVEctor");                return new Symbol (simbolosCJS.cadenaVector, yyline+1,yychar+1, new String (yytext()));
          }
        case 80: break;
        case 46: 
          { System.out.println("funcion");   return new Symbol (simbolosCJS.funcion, yyline+1,yychar+1, new String (yytext()));
          }
        case 81: break;
        case 56: 
          { System.out.println("selecciona");   return new Symbol (simbolosCJS.selecciona, yyline+1,yychar+1, new String (yytext()));
          }
        case 82: break;
        case 21: 
          { System.out.println("mayor");  return new Symbol (simbolosCJS.mayor, yyline+1,yychar+1, new String (yytext()));
          }
        case 83: break;
        case 30: 
          { System.out.println("igualIgual");   return new Symbol (simbolosCJS.igualIgual, yyline+1,yychar+1, new String (yytext()));
          }
        case 84: break;
        case 18: 
          { System.out.println("potencia");   return new Symbol (simbolosCJS.potencia, yyline+1,yychar+1, new String (yytext()));
          }
        case 85: break;
        case 19: 
          { System.out.println("residuo");   return new Symbol (simbolosCJS.residuo, yyline+1,yychar+1, new String (yytext()));
          }
        case 86: break;
        case 38: 
          { System.out.println("para");   return new Symbol (simbolosCJS.para, yyline+1,yychar+1, new String (yytext()));
          }
        case 87: break;
        case 31: 
          { System.out.println("disitnoA");   return new Symbol (simbolosCJS.distintoA, yyline+1,yychar+1, new String (yytext()));
          }
        case 88: break;
        case 53: 
          { System.out.println("cliqueado");  return new Symbol (simbolosCJS.cliqueado, yyline+1,yychar+1, new String (yytext()));
          }
        case 89: break;
        case 41: 
          { System.out.println("atexto");  return new Symbol (simbolosCJS.atexto, yyline+1,yychar+1, new String (yytext()));
          }
        case 90: break;
        case 47: 
          { System.out.println("mensaje");   return new Symbol (simbolosCJS.mensaje, yyline+1,yychar+1, new String (yytext()));
          }
        case 91: break;
        case 39: 
          { System.out.println("sino");   return new Symbol (simbolosCJS.sino, yyline+1,yychar+1, new String (yytext()));
          }
        case 92: break;
        case 27: 
          { System.out.println("menosMenos");   return new Symbol (simbolosCJS.menosMenos, yyline+1,yychar+1, new String (yytext()));
          }
        case 93: break;
        case 2: 
          { System.out.println(yytext());                return new Symbol (simbolosCJS.numero, yyline+1,yychar+1, new String (yytext()));
          }
        case 94: break;
        case 43: 
          { System.out.println("obtener");   return new Symbol (simbolosCJS.obtener, yyline+1,yychar+1, new String (yytext()));
          }
        case 95: break;
        case 33: 
          { System.out.println("or");   return new Symbol (simbolosCJS.or, yyline+1,yychar+1, new String (yytext()));
          }
        case 96: break;
        case 32: 
          { System.out.println("and");   return new Symbol (simbolosCJS.and, yyline+1,yychar+1, new String (yytext()));
          }
        case 97: break;
        case 3: 
          { System.out.println("punto");   return new Symbol (simbolosCJS.punto, yyline+1,yychar+1, new String (yytext()));
          }
        case 98: break;
        case 54: 
          { System.out.println("documento");   return new Symbol (simbolosCJS.documento, yyline+1,yychar+1, new String (yytext()));
          }
        case 99: break;
        case 26: 
          { System.out.println("masMas");   return new Symbol (simbolosCJS.masMas, yyline+1,yychar+1, new String (yytext()));
          }
        case 100: break;
        case 23: 
          { System.out.println(yytext());                return new Symbol (simbolosCJS.cadena, yyline+1,yychar+1, new String (yytext()));
          }
        case 101: break;
        case 15: 
          { System.out.println("mas");   return new Symbol (simbolosCJS.mas, yyline+1,yychar+1, new String (yytext()));
          }
        case 102: break;
        case 42: 
          { System.out.println("conteo");   return new Symbol (simbolosCJS.conteo, yyline+1,yychar+1, new String (yytext()));
          }
        case 103: break;
        case 4: 
          { System.out.println(yytext());                return new Symbol (simbolosCJS.id, yyline+1,yychar+1, new String (yytext()));
          }
        case 104: break;
        case 5: 
          { System.out.println("comillaSimple");   return new Symbol (simbolosCJS.comillaSimple, yyline+1,yychar+1, new String (yytext()));
          }
        case 105: break;
        case 52: 
          { System.out.println("mientras");  return new Symbol (simbolosCJS.mientras, yyline+1,yychar+1, new String (yytext()));
          }
        case 106: break;
        case 49: 
          { System.out.println("conteroVEctor");                return new Symbol (simbolosCJS.conteoVector, yyline+1,yychar+1, new String (yytext()));
          }
        case 107: break;
        case 45: 
          { System.out.println("defecto");   return new Symbol (simbolosCJS.defecto, yyline+1,yychar+1, new String (yytext()));
          }
        case 108: break;
        case 25: 
          { System.out.println("si");   return new Symbol (simbolosCJS.si, yyline+1,yychar+1, new String (yytext()));
          }
        case 109: break;
        case 51: 
          { System.out.println("retornar");   return new Symbol (simbolosCJS.retornar, yyline+1,yychar+1, new String (yytext()));
          }
        case 110: break;
        case 17: 
          { System.out.println("multiplicacion");   return new Symbol (simbolosCJS.multiplicacion, yyline+1,yychar+1, new String (yytext()));
          }
        case 111: break;
        case 28: 
          { System.out.println("menorIgual");   return new Symbol (simbolosCJS.menorIgual, yyline+1,yychar+1, new String (yytext()));
          }
        case 112: break;
        case 36: 
          { System.out.println("caso");   return new Symbol (simbolosCJS.caso, yyline+1,yychar+1, new String (yytext()));
          }
        case 113: break;
        case 7: 
          { /* Se ignoran */
          }
        case 114: break;
        case 35: 
          { System.out.println("verdadero");               return new Symbol (simbolosCJS.valBool, yyline+1,yychar+1, new String (yytext()));
          }
        case 115: break;
        case 50: 
          { System.out.println("imprimir");   return new Symbol (simbolosCJS.imprimir, yyline+1,yychar+1, new String (yytext()));
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(simbolosCJS.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
