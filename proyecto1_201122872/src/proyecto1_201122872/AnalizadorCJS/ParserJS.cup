package proyecto1_201122872.AnalizadorCJS;

import proyecto1_201122872.AnalizadorCJS.simbolosCJS;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;
import CJS.ARBOL.EXPRESION.*;
import CJS.objetoBase;
import CJS.TablaSimbolos.*;


parser code
{:
 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public objetoBase raiz;

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}

:}


action code
{:
//Operaciones_Listas operaciones = new Operaciones_Listas();

:}


/*-------- Terminales ---------------*/


terminal String dimv, abreLlave, cierraLlave,abrePar, cierraPar, dosPuntos, puntoComa,si,sino,caso,defecto,selecciona,para,
                mientras,detener,imprimir,retornar,funcion,coma,punto,mensaje,documento,obtener,setelemento,listo,modificado,
				cliqueado,observador,mas,menos,multiplicacion,division,potencia,residuo,menor,mayor,menorIgual,mayorIgual,
				igualIgual,distintoA,and,or,not,verdadero,falso,conteo,atexto, id, cadena, numero, masMas, menosMenos, comillaSimple,
				cadenaVector,conteoVector, idEtiqueta, grupoEtiqueta,altoEtiqueta,anchoEtiqueta,alineadoEtiqueta;



non terminal DECLARACION, ASIGNACION, LISTA_EXPRESIONES,POS_VECTOR,CUERPO,SENTENCIAS,SENTENCIA,
			IF,SELECCIONA, PARA, MIENTRAS,DETENER,IMPRIMIR, RETORNAR, LLAMADA, MENSAJE, SI, SINO, CASO, LISTA_CASOS, DEFECTO, CUERPO_SELECCIONA,
			OPERADOR_PARA, FUNCION, LISTA_ID, OBTENER, SET_ELEMENTO, TIPOS_EVENTOS, UNARIO,
			EXP_ARITMETICA, EXP_RELACIONAL, EXP_LOGICA,ELEMENTO_EXPRESION, NUMERO, CADENA, CADENA_VECTOR,
	BOOLEAN, ID, CONTEO_VECTOR, OBSERVADOR, EXPRESION,SIMB_ARITMETICO,SIMB_RELACIONAL,SIMB_LOGICA, DOCUMENTO, EXPRESION2,
	VECTOR_PROPIEDADES,PROP_VECTOR,DATE, DATETIME, INICIO, TERMINAL,ASIGNA_ARREGLO, CUERPO_ARREGLO,LISTA;
	
	
	
     	precedence left or;
		precedence left and;
		precedence left not;
		precedence left igualIgual, distintoA, menorIgual, mayorIgual,mayor, menor;
		precedence left mas, menos;
        precedence left multiplicacion, division;
        precedence right potencia;
		precedence left residuo;
		precedence left masMas, menosMenos;
		precedence left abrePar;
        
	
	start with INICIO;		
	
	
	INICIO::= SENTENCIAS:a{:parser.raiz= (objetoBase)a; System.out.println(a);:};


DECLARACION::= dimv id:i puntoComa{:Simbolo s = new Simbolo(i); RESULT = s;:}
	| dimv id dosPuntos EXPRESION puntoComa
	| dimv id abreLlave EXPRESION cierraLlave puntoComa
	| dimv id dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa
	| dimv id abreLlave EXPRESION cierraLlave dosPuntos abreLlave LISTA_EXPRESIONES cierraLlave puntoComa;
	
ASIGNACION ::=id dosPuntos EXPRESION puntoComa
	| POS_VECTOR dosPuntos EXPRESION puntoComa
	| UNARIO puntoComa
	| id dosPuntos abreLlave LISTA_EXPRESIONES puntoComa;



	




/* -------- Estructuras de control -----------*/

CUERPO::= abreLlave cierraLlave
	| abreLlave SENTENCIAS cierraLlave;


SENTENCIAS::= SENTENCIA
		| SENTENCIAS SENTENCIA;
		
		
SENTENCIA::= IF
			|DECLARACION
			|ASIGNACION
			|SELECCIONA
			|PARA
			|MIENTRAS
			|DETENER
			|IMPRIMIR
			|RETORNAR
			|EXPRESION
			|MENSAJE;
			
	
 
SI::= si abrePar EXPRESION cierraPar CUERPO;
SINO::= sino CUERPO;

IF::= SI
	| SI SINO;
	

	
CASO::= caso EXPRESION dosPuntos SENTENCIAS;

LISTA_CASOS::= CASO
		| LISTA_CASOS CASO;
		
DEFECTO::= defecto dosPuntos SENTENCIAS;

CUERPO_SELECCIONA::= LISTA_CASOS
	|LISTA_CASOS DEFECTO
	|DEFECTO;

SELECCIONA::= selecciona abrePar EXPRESION cierraPar abreLlave cierraLlave
	| selecciona abrePar EXPRESION cierraPar abreLlave CUERPO_SELECCIONA cierraLlave;
	
	


OPERADOR_PARA::= masMas
		|menosMenos;
		
PARA::= para abrePar id dosPuntos EXPRESION puntoComa EXPRESION puntoComa OPERADOR_PARA cierraPar CUERPO;

MIENTRAS::= mientras abrePar EXPRESION cierraPar CUERPO;

DETENER::= detener puntoComa;

IMPRIMIR::= imprimir abrePar EXPRESION cierraPar puntoComa;

RETORNAR::= retornar EXPRESION puntoComa;

FUNCION::= funcion id abrePar LISTA_ID cierraPar CUERPO
	| funcion id abrePar cierraPar CUERPO;


LISTA_ID::= id
	| LISTA_ID coma id;


	
MENSAJE::= mensaje abrePar EXPRESION cierraPar puntoComa;


/*Expresino*/


TIPOS_EVENTOS::= listo
	| modificado
	|cliqueado;
	

OBTENER::= documento punto obtener abrePar cadena cierraPar;
	
SET_ELEMENTO::= setelemento abrePar cadena coma cadena cierraPar;
	
OBSERVADOR::= documento punto observador abrePar TIPOS_EVENTOS coma LLAMADA CUERPO cierraPar puntoComa
	|documento punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa
	|id punto observador abrePar TIPOS_EVENTOS coma LLAMADA CUERPO cierraPar puntoComa
	|id punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa;

	
LLAMADA::= id abrePar LISTA_EXPRESIONES cierraPar
	| id abrePar cierraPar;

UNARIO::= ELEMENTO_EXPRESION masMas
		| ELEMENTO_EXPRESION menosMenos;
	
	
	
SIMB_ARITMETICO::= mas:a{:RESULT= "+";:}
	|menos:a{:RESULT= "-";:}
	|multiplicacion:a{:RESULT= "*";:}
	|division:a{:RESULT= "/";:}
	|potencia:a{:RESULT= "^";:}
	|residuo:a{:RESULT= "%";:};
	
SIMB_RELACIONAL::= menor:a{:RESULT= "<";:}
		| mayor:a{:RESULT= ">";:}
		| menorIgual:a{:RESULT= "<=";:}
		|mayorIgual{:RESULT= ">=";:}
		|distintoA{:RESULT= "!=";:}
		|igualIgual{:RESULT= "==";:};
		
SIMB_LOGICA::= and{:RESULT="&&";:}
	|or{:RESULT="||";:};


 
EXPRESION::= ELEMENTO_EXPRESION:a SIMB_ARITMETICO:b  EXPRESION:c{:Aritmetica ar= new Aritmetica(a,b,c); RESULT= ar;:}
	| EXPRESION:a SIMB_RELACIONAL:b  EXPRESION:c{:Relacional ar= new Relacional(a,b,c); RESULT= ar;:}
	| EXPRESION:a SIMB_LOGICA:b  EXPRESION:c{:Logica ar= new Logica(a,b,c); RESULT= ar;:}
	|not EXPRESION
	|SET_ELEMENTO
	|OBTENER
	| UNARIO
    | id
    | POS_VECTOR
	| numero
	| BOOLEAN
	| cadena
	//| vectorCadena y los demas atributos que pueda tener una etiqueta y arreglo
	| abrePar EXPRESION cierraPar
	| menos EXPRESION
	| comillaSimple DATE comillaSimple
	| comillaSimple DATETIME comillaSimple
	| LLAMADA;


LISTA_EXPRESIONES::= EXPRESION	
	|LISTA_EXPRESIONES coma EXPRESION;

POS_VECTOR::= id abreLlave EXPRESION cierraLlave;
 
DATE::=  numero:a division numero:b division numero:c{:Datee d = new Datee(a,b,c); RESULT=d;:};

DATETIME::= DATE:a numero:b dosPuntos numero:c dosPuntos numero:d{:DateTime dt = new DateTime(a,b,c,d); RESULT= dt;:};

BOOLEAN::= verdadero:a{:Booleano b = new Booleano(a);RESULT= b;:}
	|falso:a{:Booleano b = new Booleano(a);RESULT= b;:};



