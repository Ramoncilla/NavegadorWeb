package proyecto1_201122872.AnalizadorCJS;

import proyecto1_201122872.AnalizadorCJS.simbolosCJS;
import java_cup.runtime.*;
import java.io.*;
import java.lang.*;
import java.util.*;
import java.util.ArrayList;
import CJS.ARBOL.EXPRESION.*;
import CJS.objetoBase;
import CJS.TablaSimbolos.*;
import CJS.ARBOL.INSTRUCCIONES.*;
import CJS.ESTRUCURAS_CONTROL.*;
import Funciones.*;


parser code
{:
 /* -------------------------==: DECLARAR EL ARBOL :==--------------------------*/
    //public Nodo Gramaticas;     
    public static String cadena;
	public objetoBase raiz;
	public List<objetoBase>listaSentencias;
	public ListaFunciones listaFun;

	

/* -------------------------==: ERROR SINTACTICO :==--------------------------*/
public void syntax_error(Symbol s){
    System.out.println("Error Sintactico -> lexema: " +s.value+" Linea: " +s.right+ " Columna: "+s.left);
    cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}

/* ------------------==: ERROR SINTACTICO NO RECUPERABLE :==------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
    System.out.println("Error Sintactico No Recuperable-> Lexema: " +s.value+" Linea: "+s.right+ " Columna: "+s.left);
     cadena += "<tr>"
                + "<td><center><b>" + s.value + "</b></center></td>"
                + "<td><center><b>" + s.right + "</b></center></td>"
                + "<td><center><b>" + s.left+ "</b></center></td>"
                + "</tr>";
}

:}


action code
{:
//Operaciones_Listas operaciones = new Operaciones_Listas();

:}


/*-------- Terminales ---------------*/


terminal String dimv, abreLlave, cierraLlave,abrePar, cierraPar, dosPuntos, puntoComa,si,sino,caso,defecto,selecciona,para,
                mientras,detener,imprimir,retornar,funcion,coma,punto,mensaje,documento,obtener,setelemento,listo,modificado,
				cliqueado,observador,mas,menos,multiplicacion,division,potencia,residuo,menor,mayor,menorIgual,mayorIgual,
				igualIgual,distintoA,and,or,not,verdadero,falso,conteo,atexto, id, cadena, numero, masMas, menosMenos, comillaSimple,
				cadenaVector,conteoVector, idEtiqueta, grupoEtiqueta,altoEtiqueta,anchoEtiqueta,alineadoEtiqueta;



non terminal DECLARACION, ASIGNACION, LISTA_EXPRESIONES,POS_VECTOR,CUERPO,SENTENCIAS,SENTENCIA,
			IF,SELECCIONA, PARA, MIENTRAS,DETENER,IMPRIMIR, RETORNAR, LLAMADA, MENSAJE, SI, SINO, CASO, LISTA_CASOS, DEFECTO, CUERPO_SELECCIONA,
			OPERADOR_PARA, FUNCION, LISTA_ID, OBTENER, SET_ELEMENTO, TIPOS_EVENTOS, UNARIO,
			EXP_ARITMETICA, EXP_RELACIONAL, EXP_LOGICA,ELEMENTO_EXPRESION, NUMERO, CADENA, CADENA_VECTOR,
	BOOLEAN, ID, CONTEO_VECTOR, OBSERVADOR, EXPRESION,SIMB_ARITMETICO,SIMB_RELACIONAL,SIMB_LOGICA, DOCUMENTO, EXPRESION2,
	VECTOR_PROPIEDADES,PROP_VECTOR,DATE, DATETIME, INICIO, TERMINAL,ASIGNA_ARREGLO, CUERPO_ARREGLO,LISTA, LISTA_FUNCIONES;
	
	
	
     	precedence left or;
		precedence left and;
		precedence left not;
		precedence left igualIgual, distintoA, menorIgual, mayorIgual,mayor, menor;
		precedence left mas, menos;
        precedence left multiplicacion, division;
        precedence right potencia;
		precedence left residuo;
		precedence left masMas, menosMenos;
		precedence left abrePar;
        
	
	start with INICIO;		
	
	
	INICIO::= LISTA_FUNCIONES:a{:parser.listaFun= (ListaFunciones)a; System.out.println(a);:};
	
	
	
	LISTA_FUNCIONES::= FUNCION:a{: ListaFunciones funciones = new ListaFunciones();
								 funciones.insertarFuncion((Funcion)a);
								 RESULT= funciones;
								:}
		|LISTA_FUNCIONES:l FUNCION:a{:ListaFunciones funciones = (ListaFunciones)l;
								 funciones.insertarFuncion((Funcion)a);
								 RESULT= funciones;
								:};


DECLARACION::= dimv id:i puntoComa{:Declaracion s = new Declaracion(i); RESULT = s;:}

	| dimv id:a dosPuntos EXPRESION:b puntoComa{: Declaracion s = new Declaracion(a);
												  Asignacion s2 = new Asignacion(a,b);
												  List<objetoBase> lista = new ArrayList<>();
												  lista.add(s);
												  lista.add(s2);
												  DeclaAsig h = new DeclaAsig(lista);
												  RESULT = h;
												  
													:} 
													
	| dimv id:a abreLlave EXPRESION:el cierraLlave puntoComa{: DeclaArreglo simb = new DeclaArreglo(a,el); RESULT= simb;:}
	
	
	| dimv id:a dosPuntos abreLlave LISTA_EXPRESIONES:lista cierraLlave puntoComa
	{:
		List<objetoBase> l = (ArrayList<objetoBase>)lista;
		Numero num = new Numero(l.size());
		DeclaArreglo d= new DeclaArreglo(a, num);
		asignaArreglo c = new asignaArreglo(a,lista);
		List<objetoBase> listado = new ArrayList<>();
		listado.add(d);
		listado.add(c);
		DeclaAsig h = new DeclaAsig(listado);
		RESULT= h;
	:}
	
	
	| dimv id:a abreLlave EXPRESION:el cierraLlave dosPuntos abreLlave LISTA_EXPRESIONES:b cierraLlave puntoComa
	{:
		DeclaArreglo simb = new DeclaArreglo(a,el);
		asignaArreglo c = new asignaArreglo(a,b);
		DeclaArregloNumAsigna g = new DeclaArregloNumAsigna(simb,c);
		RESULT = g;
	
	:};
	
	
ASIGNACION ::= id:a dosPuntos EXPRESION:b puntoComa{:Asignacion g = new Asignacion(a,b); RESULT= g;:}
	| id:a abreLlave EXPRESION:b cierraLlave dosPuntos EXPRESION:c puntoComa{:AsignaPosArreglo h= new AsignaPosArreglo(a,b,c); RESULT= h;:}
	| EXPRESION:a masMas:b puntoComa{:AsignaUnario u =  new AsignaUnario(a,b); RESULT= u;:}
	| EXPRESION:a menosMenos:b puntoComa{:AsignaUnario u =  new AsignaUnario(a,b); RESULT= u;:}
	| id:a dosPuntos abreLlave LISTA_EXPRESIONES:b cierraLlave puntoComa{:asignaArreglo c = new asignaArreglo(a,b); RESULT=c; :};



	
LISTA_EXPRESIONES::= EXPRESION:a{:
									List<objetoBase> elementos= new ArrayList<>();
									elementos.add((objetoBase)a);
									RESULT= elementos;
								:}	
	|LISTA_EXPRESIONES:l coma EXPRESION:a{:
											List<objetoBase>elementos= (ArrayList<objetoBase>)l;
											elementos.add((objetoBase)a);
											RESULT=elementos;
										 :};
	




/* -------- Estructuras de control -----------*/

CUERPO::= abreLlave cierraLlave{:RESULT= new CuerpoEstructuras();:}
	| abreLlave SENTENCIAS:s cierraLlave{:RESULT= new CuerpoEstructuras(s);:};


SENTENCIAS::= SENTENCIA:a{:List<objetoBase> lista = new ArrayList<>();
							lista.add((objetoBase) a);
							RESULT= lista;:}
		| SENTENCIAS:l SENTENCIA:a{:List<objetoBase> lista = (ArrayList<objetoBase>)l;
									lista.add((objetoBase) a);
									RESULT= lista;:};
		
		
SENTENCIA::= IF:a{:RESULT=a;:}
			|DECLARACION:a{:RESULT= a;:}
			|ASIGNACION:a{:RESULT= a;:}
			|SELECCIONA
			|PARA
			|MIENTRAS:a{:RESULT=a;:}
			|DETENER:a{:RESULT=a;:}
			|IMPRIMIR:a{:RESULT=a;:}
			|RETORNAR
			|EXPRESION
			|MENSAJE:a{:RESULT=a;:}
			|FUNCION:a{:RESULT=a;:};
			


IF::= si abrePar EXPRESION:exp cierraPar CUERPO:v sino CUERPO:f{:Si s = new Si(exp,v,f); RESULT= s;:}
	| si abrePar EXPRESION:exp cierraPar CUERPO:v {:Si s = new Si(exp,v,new CuerpoEstructuras()); RESULT= s;:};
	

	
CASO::= caso EXPRESION dosPuntos SENTENCIAS;

LISTA_CASOS::= CASO
		| LISTA_CASOS CASO;
		
DEFECTO::= defecto dosPuntos SENTENCIAS;

CUERPO_SELECCIONA::= LISTA_CASOS
	|LISTA_CASOS DEFECTO
	|DEFECTO;

SELECCIONA::= selecciona abrePar EXPRESION cierraPar abreLlave cierraLlave
	| selecciona abrePar EXPRESION cierraPar abreLlave CUERPO_SELECCIONA cierraLlave;
	
	


OPERADOR_PARA::= masMas{:RESULT="++";:}
		|menosMenos{:RESULT="--";:};
		
PARA::= para abrePar id dosPuntos EXPRESION puntoComa EXPRESION puntoComa OPERADOR_PARA cierraPar CUERPO;

MIENTRAS::= mientras abrePar EXPRESION:e cierraPar CUERPO:c{:RESULT= new Mientras(e,c);:};

DETENER::= detener puntoComa{:Detener d = new Detener(); RESULT= d;:};

IMPRIMIR::= imprimir abrePar EXPRESION:a cierraPar puntoComa{:Imprimir g = new Imprimir(a); RESULT=g;:};

RETORNAR::= retornar EXPRESION puntoComa;

FUNCION::= funcion id:a abrePar LISTA_ID:b cierraPar CUERPO:c{:Funcion f= new Funcion(a,b,c);
												RESULT=f;:}

	| funcion id:i abrePar cierraPar CUERPO:c{:Funcion f= new Funcion(i,new ArrayList<String>(),c);
												RESULT=f;:};


LISTA_ID::= id:i{:List<String> lista = new ArrayList<>();
				  lista.add(i.toString());
				  RESULT=lista;
				:}
	| LISTA_ID:l coma id:i{:List<String> lista = (ArrayList<String>)l;;
				  lista.add(i.toString());
				  RESULT=lista;
				:};


	
MENSAJE::= mensaje abrePar EXPRESION:a cierraPar puntoComa{:Mensaje j = new Mensaje(a); RESULT= j;:};


/*Expresino*/


TIPOS_EVENTOS::= listo
	| modificado
	|cliqueado;
	

OBTENER::= documento punto obtener abrePar cadena cierraPar;
	
SET_ELEMENTO::= setelemento abrePar cadena coma cadena cierraPar;
	
OBSERVADOR::= documento punto observador abrePar TIPOS_EVENTOS coma LLAMADA CUERPO cierraPar puntoComa
	|documento punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa
	|id punto observador abrePar TIPOS_EVENTOS coma LLAMADA CUERPO cierraPar puntoComa
	|id punto observador abrePar TIPOS_EVENTOS coma LLAMADA cierraPar puntoComa;

	
LLAMADA::= id abrePar LISTA_EXPRESIONES cierraPar
	| id abrePar cierraPar;

UNARIO::= EXPRESION masMas
		| EXPRESION menosMenos;
	
	
	
SIMB_ARITMETICO::= mas:a{:RESULT= "+";:}
	|menos:a{:RESULT= "-";:}
	|multiplicacion:a{:RESULT= "*";:}
	|division:a{:RESULT= "/";:}
	|potencia:a{:RESULT= "^";:}
	|residuo:a{:RESULT= "%";:};
	
SIMB_RELACIONAL::= menor:a{:RESULT= "<";:}
		| mayor:a{:RESULT= ">";:}
		| menorIgual:a{:RESULT= "<=";:}
		|mayorIgual{:RESULT= ">=";:}
		|distintoA{:RESULT= "!=";:}
		|igualIgual{:RESULT= "==";:};
		
SIMB_LOGICA::= and{:RESULT="&&";:}
	|or{:RESULT="||";:};


 
EXPRESION::= EXPRESION:a SIMB_ARITMETICO:b  EXPRESION:c{:Aritmetica ar= new Aritmetica(a,b,c); RESULT= ar;:}
	| EXPRESION:a SIMB_RELACIONAL:b  EXPRESION:c{:Relacional ar= new Relacional(a,b,c); RESULT= ar;:}
	| EXPRESION:a SIMB_LOGICA:b  EXPRESION:c{:Logica ar= new Logica(a,b,c); RESULT= ar;:}
	| not EXPRESION:a{:NOT n = new NOT(a); RESULT=n;:}
	| SET_ELEMENTO
	| OBTENER
	| UNARIO
    | id:a{:Id i= new Id(a); RESULT= i;:}
    | POS_VECTOR
	| numero:a{:Numero n = new Numero(a); RESULT= n;:}
	| BOOLEAN:a{:RESULT= a;:}
	| cadena:a{:Cadena cad = new Cadena(a); RESULT = cad;:}
	| id punto atexto
	| id punto conteo
	| abrePar EXPRESION:a cierraPar{:RESULT=a;:}
	| menos EXPRESION:a{:Negativo g= new Negativo(a); RESULT= g;:}
	| comillaSimple DATE:a comillaSimple{:RESULT = a;:}
	| comillaSimple DATETIME:a comillaSimple{:RESULT = a;:}
	| LLAMADA;



POS_VECTOR::= id abreLlave EXPRESION cierraLlave;
 
DATE::=  numero:a division numero:b division numero:c{:Datee d = new Datee(a,b,c); RESULT=d;:};

DATETIME::= DATE:a numero:b dosPuntos numero:c dosPuntos numero:d{:DateTime dt = new DateTime(a,b,c,d); RESULT= dt;:};

BOOLEAN::= verdadero:a{:Booleano b = new Booleano("verdadero");RESULT= b;:}
	|falso:a{:Booleano b = new Booleano("falso");RESULT= b;:};




